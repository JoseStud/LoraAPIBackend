#!/usr/bin/env node
import { mkdir, writeFile } from 'node:fs/promises';
import { pathToFileURL } from 'node:url';
import path from 'node:path';
import process from 'node:process';

import openapiTS, { astToString } from 'openapi-typescript';

const DEFAULT_REMOTE_SPEC = 'http://localhost:8000/openapi.json';
const DEFAULT_LOCAL_SPEC = path.resolve(process.cwd(), 'openapi_example.yaml');
const OUTPUT_DIR = path.resolve(process.cwd(), 'app/frontend/src/types/generated');
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'backend.ts');

const [, , userProvidedSource] = process.argv;

const specSource =
  process.env.OPENAPI_SPEC ?? userProvidedSource ?? DEFAULT_REMOTE_SPEC;
const fallbackSource = process.env.OPENAPI_FALLBACK ?? DEFAULT_LOCAL_SPEC;

const headerComment = `/**\n * This file is auto-generated by scripts/generate-api-types.mjs.\n * Do not edit this file directly.\n */`;

const options = {
  // Add additional openapi-typescript options here if desired.
};

function toOpenAPIInput(value) {
  if (/^https?:\/\//i.test(value)) {
    return value;
  }

  return pathToFileURL(value).href;
}

async function generateFromSource(source) {
  const input = toOpenAPIInput(source);
  console.log(`\n[generate-api-types] Generating types from ${source}`);
  const ast = await openapiTS(input, options);
  return astToString(ast);
}

try {
  let output;

  try {
    output = await generateFromSource(specSource);
  } catch (primaryError) {
    if (!fallbackSource || fallbackSource === specSource) {
      throw primaryError;
    }

    console.warn(
      `[generate-api-types] Failed to load spec from ${specSource}. Falling back to ${fallbackSource}.`,
    );
    output = await generateFromSource(fallbackSource);
  }

  await mkdir(OUTPUT_DIR, { recursive: true });
  await writeFile(OUTPUT_FILE, `${headerComment}\n\n${output}\n`, 'utf8');
  console.log(
    `[generate-api-types] Wrote generated types to ${path.relative(process.cwd(), OUTPUT_FILE)}`,
  );
} catch (error) {
  console.error('[generate-api-types] Failed to generate API types.');
  console.error(error instanceof Error ? error.message : error);
  process.exitCode = 1;
}
