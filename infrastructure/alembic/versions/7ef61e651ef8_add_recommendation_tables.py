
"""
Revision ID: 7ef61e651ef8
Revises: 952b85546fed
Create Date: 2025-08-29 10:16:15.462007
"""

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '7ef61e651ef8'
down_revision = '952b85546fed'
branch_labels = None
depends_on = None


def upgrade():
# ### commands auto generated by Alembic - please adjust! ###
    op.create_table('recommendationsession',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('context_prompt', sa.Text(), nullable=True),
    sa.Column('active_loras', sa.JSON(), nullable=True),
    sa.Column('target_lora_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('recommendation_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('recommendations', sa.JSON(), nullable=True),
    sa.Column('user_feedback', sa.JSON(), nullable=True),
    sa.Column('generated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('userpreference',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('preference_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('preference_value', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('learned_from', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('evidence_count', sa.Integer(), nullable=False),
    sa.Column('last_evidence_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('loraembedding',
    sa.Column('adapter_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('semantic_embedding', sa.LargeBinary(), nullable=True),
    sa.Column('artistic_embedding', sa.LargeBinary(), nullable=True),
    sa.Column('technical_embedding', sa.LargeBinary(), nullable=True),
    sa.Column('extracted_keywords', sa.JSON(), nullable=True),
    sa.Column('keyword_scores', sa.JSON(), nullable=True),
    sa.Column('predicted_style', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('style_confidence', sa.Float(), nullable=True),
    sa.Column('sentiment_label', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('popularity_score', sa.Float(), nullable=True),
    sa.Column('recency_score', sa.Float(), nullable=True),
    sa.Column('compatibility_score', sa.Float(), nullable=True),
    sa.Column('last_computed', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['adapter_id'], ['adapter.id'], ),
    sa.PrimaryKeyConstraint('adapter_id')
    )
    op.create_table('recommendationfeedback',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('recommended_lora_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('feedback_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('feedback_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('implicit_signal', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['recommended_lora_id'], ['adapter.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['recommendationsession.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('adapter', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_adapter_active'))
        batch_op.drop_index(batch_op.f('idx_adapter_active_ordinal'))
        batch_op.drop_index(batch_op.f('idx_adapter_created_at'))
        batch_op.drop_index(batch_op.f('idx_adapter_name'))
        batch_op.drop_index(batch_op.f('idx_adapter_ordinal'))

    with op.batch_alter_table('deliveryjob', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_deliveryjob_created_at'))
        batch_op.drop_index(batch_op.f('idx_deliveryjob_mode'))
        batch_op.drop_index(batch_op.f('idx_deliveryjob_status'))

    # ### end Alembic commands ###


def downgrade():
# ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('deliveryjob', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_deliveryjob_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_deliveryjob_mode'), ['mode'], unique=False)
        batch_op.create_index(batch_op.f('idx_deliveryjob_created_at'), ['created_at'], unique=False)

    with op.batch_alter_table('adapter', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_adapter_ordinal'), ['ordinal'], unique=False)
        batch_op.create_index(batch_op.f('idx_adapter_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('idx_adapter_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_adapter_active_ordinal'), ['active', 'ordinal'], unique=False)
        batch_op.create_index(batch_op.f('idx_adapter_active'), ['active'], unique=False)

    op.drop_table('recommendationfeedback')
    op.drop_table('loraembedding')
    op.drop_table('userpreference')
    op.drop_table('recommendationsession')
    # ### end Alembic commands ###
