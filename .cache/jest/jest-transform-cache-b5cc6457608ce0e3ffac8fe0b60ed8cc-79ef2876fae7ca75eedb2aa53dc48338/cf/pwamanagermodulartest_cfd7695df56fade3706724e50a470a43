5eb5cef4cc3c9c3edcc2e4fe37cc7508
/**
 * Clean PWA Manager modular test suite
 */

const mockLocalStorage = {
  getItem: jest.fn(),
  setItem: jest.fn(),
  removeItem: jest.fn(),
  clear: jest.fn()
};
global.localStorage = mockLocalStorage;
global.window = global.window || {};
global.window.DevLogger = global.window.DevLogger || {
  info: jest.fn(),
  warn: jest.fn(),
  error: jest.fn()
};

// Load modules
const {
  pwaServiceWorker
} = require('../../../app/frontend/static/js/components/pwa-manager/service-worker.js');
const {
  pwaInstallation
} = require('../../../app/frontend/static/js/components/pwa-manager/installation.js');
const {
  pwaOffline
} = require('../../../app/frontend/static/js/components/pwa-manager/offline.js');
const {
  pwaCache
} = require('../../../app/frontend/static/js/components/pwa-manager/cache.js');
const {
  pwaUI
} = require('../../../app/frontend/static/js/components/pwa-manager/ui.js');
const {
  PWAManager
} = require('../../../app/frontend/static/js/components/pwa-manager/index.js');

// Minimal DOM mocks used by modules
global.document = global.document || {
  querySelector: jest.fn(),
  createElement: jest.fn(() => ({
    className: '',
    innerHTML: '',
    appendChild: jest.fn(),
    id: 'mock'
  })),
  body: {
    appendChild: jest.fn()
  },
  addEventListener: jest.fn(),
  documentElement: {
    style: {
      setProperty: jest.fn()
    }
  }
};
global.window.pwaServiceWorker = pwaServiceWorker;
global.window.pwaInstallation = pwaInstallation;
global.window.pwaOffline = pwaOffline;
global.window.pwaCache = pwaCache;
global.window.pwaUI = pwaUI;
global.window.PWAManager = PWAManager;
describe('PWA Manager Modular Components', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockLocalStorage.getItem.mockReturnValue(null);
  });
  test('modules load and expose expected APIs', () => {
    expect(global.window.pwaServiceWorker).toBeDefined();
    expect(global.window.pwaInstallation).toBeDefined();
    expect(global.window.pwaOffline).toBeDefined();
    expect(global.window.pwaCache).toBeDefined();
    expect(global.window.pwaUI).toBeDefined();
    expect(global.window.PWAManager).toBeDefined();
  });
  test('PWAManager constructs and returns status', () => {
    const manager = new global.window.PWAManager({
      enableLogging: false
    });
    const status = manager.getStatus();
    expect(status).toHaveProperty('isInitialized');
    expect(status).toHaveProperty('isOnline');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrTG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImplc3QiLCJmbiIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJnbG9iYWwiLCJsb2NhbFN0b3JhZ2UiLCJ3aW5kb3ciLCJEZXZMb2dnZXIiLCJpbmZvIiwid2FybiIsImVycm9yIiwicHdhU2VydmljZVdvcmtlciIsInJlcXVpcmUiLCJwd2FJbnN0YWxsYXRpb24iLCJwd2FPZmZsaW5lIiwicHdhQ2FjaGUiLCJwd2FVSSIsIlBXQU1hbmFnZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJpZCIsImJvZHkiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJ0ZXN0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJtYW5hZ2VyIiwiZW5hYmxlTG9nZ2luZyIsInN0YXR1cyIsImdldFN0YXR1cyIsInRvSGF2ZVByb3BlcnR5Il0sInNvdXJjZXMiOlsicHdhLW1hbmFnZXItbW9kdWxhci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xlYW4gUFdBIE1hbmFnZXIgbW9kdWxhciB0ZXN0IHN1aXRlXG4gKi9cblxuY29uc3QgbW9ja0xvY2FsU3RvcmFnZSA9IHtcbiAgICBnZXRJdGVtOiBqZXN0LmZuKCksXG4gICAgc2V0SXRlbTogamVzdC5mbigpLFxuICAgIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcbiAgICBjbGVhcjogamVzdC5mbigpXG59O1xuXG5nbG9iYWwubG9jYWxTdG9yYWdlID0gbW9ja0xvY2FsU3RvcmFnZTtcbmdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9O1xuZ2xvYmFsLndpbmRvdy5EZXZMb2dnZXIgPSBnbG9iYWwud2luZG93LkRldkxvZ2dlciB8fCB7IGluZm86IGplc3QuZm4oKSwgd2FybjogamVzdC5mbigpLCBlcnJvcjogamVzdC5mbigpIH07XG5cbi8vIExvYWQgbW9kdWxlc1xuY29uc3QgeyBwd2FTZXJ2aWNlV29ya2VyIH0gPSByZXF1aXJlKCcuLi8uLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcHdhLW1hbmFnZXIvc2VydmljZS13b3JrZXIuanMnKTtcbmNvbnN0IHsgcHdhSW5zdGFsbGF0aW9uIH0gPSByZXF1aXJlKCcuLi8uLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcHdhLW1hbmFnZXIvaW5zdGFsbGF0aW9uLmpzJyk7XG5jb25zdCB7IHB3YU9mZmxpbmUgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL2FwcC9mcm9udGVuZC9zdGF0aWMvanMvY29tcG9uZW50cy9wd2EtbWFuYWdlci9vZmZsaW5lLmpzJyk7XG5jb25zdCB7IHB3YUNhY2hlIH0gPSByZXF1aXJlKCcuLi8uLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcHdhLW1hbmFnZXIvY2FjaGUuanMnKTtcbmNvbnN0IHsgcHdhVUkgfSA9IHJlcXVpcmUoJy4uLy4uLy4uL2FwcC9mcm9udGVuZC9zdGF0aWMvanMvY29tcG9uZW50cy9wd2EtbWFuYWdlci91aS5qcycpO1xuY29uc3QgeyBQV0FNYW5hZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcHdhLW1hbmFnZXIvaW5kZXguanMnKTtcblxuLy8gTWluaW1hbCBET00gbW9ja3MgdXNlZCBieSBtb2R1bGVzXG5nbG9iYWwuZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQgfHwge1xuICAgIHF1ZXJ5U2VsZWN0b3I6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVFbGVtZW50OiBqZXN0LmZuKCgpID0+ICh7IGNsYXNzTmFtZTogJycsIGlubmVySFRNTDogJycsIGFwcGVuZENoaWxkOiBqZXN0LmZuKCksIGlkOiAnbW9jaycgfSkpLFxuICAgIGJvZHk6IHsgYXBwZW5kQ2hpbGQ6IGplc3QuZm4oKSB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBkb2N1bWVudEVsZW1lbnQ6IHsgc3R5bGU6IHsgc2V0UHJvcGVydHk6IGplc3QuZm4oKSB9IH1cbn07XG5cbmdsb2JhbC53aW5kb3cucHdhU2VydmljZVdvcmtlciA9IHB3YVNlcnZpY2VXb3JrZXI7XG5nbG9iYWwud2luZG93LnB3YUluc3RhbGxhdGlvbiA9IHB3YUluc3RhbGxhdGlvbjtcbmdsb2JhbC53aW5kb3cucHdhT2ZmbGluZSA9IHB3YU9mZmxpbmU7XG5nbG9iYWwud2luZG93LnB3YUNhY2hlID0gcHdhQ2FjaGU7XG5nbG9iYWwud2luZG93LnB3YVVJID0gcHdhVUk7XG5nbG9iYWwud2luZG93LlBXQU1hbmFnZXIgPSBQV0FNYW5hZ2VyO1xuXG5kZXNjcmliZSgnUFdBIE1hbmFnZXIgTW9kdWxhciBDb21wb25lbnRzJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5nZXRJdGVtLm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ21vZHVsZXMgbG9hZCBhbmQgZXhwb3NlIGV4cGVjdGVkIEFQSXMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChnbG9iYWwud2luZG93LnB3YVNlcnZpY2VXb3JrZXIpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWwud2luZG93LnB3YUluc3RhbGxhdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbC53aW5kb3cucHdhT2ZmbGluZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXhwZWN0KGdsb2JhbC53aW5kb3cucHdhQ2FjaGUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIGV4cGVjdChnbG9iYWwud2luZG93LnB3YVVJKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QoZ2xvYmFsLndpbmRvdy5QV0FNYW5hZ2VyKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnUFdBTWFuYWdlciBjb25zdHJ1Y3RzIGFuZCByZXR1cm5zIHN0YXR1cycsICgpID0+IHtcbiAgICAgICAgY29uc3QgbWFuYWdlciA9IG5ldyBnbG9iYWwud2luZG93LlBXQU1hbmFnZXIoeyBlbmFibGVMb2dnaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbWFuYWdlci5nZXRTdGF0dXMoKTtcbiAgICAgICAgZXhwZWN0KHN0YXR1cykudG9IYXZlUHJvcGVydHkoJ2lzSW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgZXhwZWN0KHN0YXR1cykudG9IYXZlUHJvcGVydHkoJ2lzT25saW5lJyk7XG4gICAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLE1BQU1BLGdCQUFnQixHQUFHO0VBQ3JCQyxPQUFPLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDbEJDLE9BQU8sRUFBRUYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUNsQkUsVUFBVSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBQ3JCRyxLQUFLLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFREksTUFBTSxDQUFDQyxZQUFZLEdBQUdSLGdCQUFnQjtBQUN0Q08sTUFBTSxDQUFDRSxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0UsTUFBTSxJQUFJLENBQUMsQ0FBQztBQUNuQ0YsTUFBTSxDQUFDRSxNQUFNLENBQUNDLFNBQVMsR0FBR0gsTUFBTSxDQUFDRSxNQUFNLENBQUNDLFNBQVMsSUFBSTtFQUFFQyxJQUFJLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFBRVMsSUFBSSxF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