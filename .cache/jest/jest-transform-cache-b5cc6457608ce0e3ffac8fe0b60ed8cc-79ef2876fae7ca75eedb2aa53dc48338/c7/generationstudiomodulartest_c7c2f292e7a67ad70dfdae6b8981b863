d4cce8f27d586d6449e00840642e880a
/**
 * Tests for Generation Studio Modular Components
 * 
 * Comprehensive test suite covering all generation studio modules.
 */

describe('Generation Studio - Modular Components', () => {
  describe('State Management Module', () => {
    let state;
    beforeEach(() => {
      // Load state module
      require('../../../../../app/frontend/static/js/components/generation-studio/state.js');
      state = global.window.generationState.createInitialState();
    });
    afterEach(() => {
      delete global.window.generationState;
    });
    test('should create initial state with correct structure', () => {
      expect(state).toHaveProperty('params');
      expect(state).toHaveProperty('activeJobs');
      expect(state).toHaveProperty('recentResults');
      expect(state).toHaveProperty('systemStatus');
      expect(state).toHaveProperty('isGenerating');
      expect(state.isGenerating).toBe(false);
    });
    test('should update parameters correctly', () => {
      const newParams = {
        prompt: 'test prompt',
        steps: 30
      };
      global.window.generationState.updateParams(state, newParams);
      expect(state.params.prompt).toBe('test prompt');
      expect(state.params.steps).toBe(30);
    });
    test('should add and manage active jobs', () => {
      const job = {
        id: 'job-1',
        prompt: 'test prompt',
        status: 'processing'
      };
      global.window.generationState.addActiveJob(state, job);
      expect(state.activeJobs).toHaveLength(1);
      expect(state.activeJobs[0].id).toBe('job-1');
      global.window.generationState.removeActiveJob(state, 'job-1');
      expect(state.activeJobs).toHaveLength(0);
    });
    test('should manage recent results', () => {
      const result = {
        id: 'result-1',
        prompt: 'test prompt',
        image_url: '/test.jpg'
      };
      global.window.generationState.addRecentResult(state, result);
      expect(state.recentResults).toHaveLength(1);
      global.window.generationState.removeRecentResult(state, 'result-1');
      expect(state.recentResults).toHaveLength(0);
    });
    test('should update system status', () => {
      const status = {
        status: 'healthy',
        memoryUsage: {
          used: 50,
          total: 100
        },
        queueLength: 5
      };
      global.window.generationState.updateSystemStatus(state, status);
      expect(state.systemStatus.status).toBe('healthy');
      expect(state.systemStatus.queueLength).toBe(5);
    });
  });
  describe('WebSocket Module', () => {
    let mockWebSocket;
    let manager;
    beforeEach(() => {
      // Mock WebSocket
      mockWebSocket = {
        send: jest.fn(),
        close: jest.fn(),
        readyState: 1,
        // OPEN
        addEventListener: jest.fn(),
        removeEventListener: jest.fn()
      };
      global.WebSocket = jest.fn(() => mockWebSocket);
      require('../../../../../app/frontend/static/js/components/generation-studio/websocket.js');
      manager = global.window.generationWebSocket.createConnectionManager({
        onOpen: jest.fn(),
        onMessage: jest.fn(),
        onClose: jest.fn(),
        onError: jest.fn()
      });
    });
    afterEach(() => {
      delete global.window.generationWebSocket;
      delete global.WebSocket;
    });
    test('should create connection manager with correct configuration', () => {
      expect(manager).toHaveProperty('connect');
      expect(manager).toHaveProperty('disconnect');
      expect(manager).toHaveProperty('sendMessage');
      expect(manager).toHaveProperty('isConnected');
    });
    test('should handle connection lifecycle', () => {
      manager.connect();
      expect(global.WebSocket).toHaveBeenCalled();
      expect(manager.isConnected()).toBe(true);
      manager.disconnect();
      expect(mockWebSocket.close).toHaveBeenCalled();
    });
    test('should send messages correctly', () => {
      manager.connect();
      const message = {
        type: 'test',
        payload: {
          data: 'test'
        }
      };
      manager.sendMessage(message);
      expect(mockWebSocket.send).toHaveBeenCalledWith(JSON.stringify(message));
    });
    test('should parse incoming messages', () => {
      const messageData = '{"type":"progress","payload":{"jobId":"test","progress":50}}';
      const parsed = global.window.generationWebSocket.parseMessage(messageData);
      expect(parsed.type).toBe('progress');
      expect(parsed.payload.jobId).toBe('test');
      expect(parsed.payload.progress).toBe(50);
    });
  });
  describe('API Module', () => {
    beforeEach(() => {
      // Mock fetch
      global.fetch = jest.fn();
      require('../../../../../app/frontend/static/js/components/generation-studio/api.js');
    });
    afterEach(() => {
      delete global.window.generationAPI;
      delete global.fetch;
    });
    test('should make API requests with correct configuration', async () => {
      const mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue({
          status: 'success'
        })
      };
      global.fetch.mockResolvedValue(mockResponse);
      const result = await global.window.generationAPI.loadSystemStatus();
      expect(global.fetch).toHaveBeenCalledWith('/api/v1/system/status', expect.objectContaining({
        method: 'GET',
        headers: expect.objectContaining({
          'Content-Type': 'application/json'
        })
      }));
      expect(result.success).toBe(true);
    });
    test('should validate generation parameters', () => {
      const params = {
        prompt: 'test prompt',
        width: 512,
        height: 512,
        steps: 20
      };
      const validated = global.window.generationAPI.validateGenerationParams(params);
      expect(validated.prompt).toBe('test prompt');
      expect(validated.width).toBe(512);
      expect(validated.height).toBe(512);
      expect(validated.steps).toBe(20);
    });
    test('should handle API errors gracefully', async () => {
      global.fetch.mockRejectedValue(new Error('Network error'));
      const result = await global.window.generationAPI.loadSystemStatus();
      expect(result.success).toBe(false);
      expect(result.error).toBe('Network error');
    });
    test('should start generation with correct parameters', async () => {
      const mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue({
          job_id: 'test-job-123',
          status: 'queued'
        })
      };
      global.fetch.mockResolvedValue(mockResponse);
      const params = {
        prompt: 'test prompt',
        width: 512,
        height: 512,
        steps: 20
      };
      const result = await global.window.generationAPI.startGeneration(params);
      expect(result.success).toBe(true);
      expect(result.data.job_id).toBe('test-job-123');
    });
  });
  describe('Progress Module', () => {
    beforeEach(() => {
      require('../../../../../app/frontend/static/js/components/generation-studio/progress.js');
    });
    afterEach(() => {
      delete global.window.generationProgress;
    });
    test('should update job progress correctly', () => {
      const job = {
        id: 'job-1',
        status: 'processing',
        progress: 25,
        current_step: 5,
        total_steps: 20,
        start_time: Date.now() - 10000
      };
      const progressData = {
        progress: 50,
        status: 'processing',
        currentStep: 10
      };
      const updated = global.window.generationProgress.updateJobProgress(job, progressData);
      expect(updated.progress).toBe(50);
      expect(updated.current_step).toBe(10);
      expect(updated.eta).toBeGreaterThan(0);
    });
    test('should calculate ETA correctly', () => {
      const job = {
        start_time: Date.now() - 20000 // 20 seconds ago
      };
      const eta = global.window.generationProgress.calculateETA(job, 40); // 40% complete

      expect(eta).toBeGreaterThan(0);
      expect(eta).toBeLessThan(60); // Should be reasonable
    });
    test('should format duration correctly', () => {
      expect(global.window.generationProgress.formatDuration(30)).toBe('30s');
      expect(global.window.generationProgress.formatDuration(90)).toBe('1m 30s');
      expect(global.window.generationProgress.formatDuration(3660)).toBe('1h 1m');
    });
    test('should get progress bar configuration', () => {
      const job = {
        status: 'processing',
        progress: 75,
        current_step: 15,
        total_steps: 20
      };
      const config = global.window.generationProgress.getProgressBarConfig(job);
      expect(config.progress).toBe(75);
      expect(config.color).toBe('green');
      expect(config.animated).toBe(true);
    });
    test('should sort jobs by priority', () => {
      const jobs = [{
        id: '1',
        status: 'completed',
        created_at: '2023-01-01'
      }, {
        id: '2',
        status: 'processing',
        created_at: '2023-01-02'
      }, {
        id: '3',
        status: 'queued',
        created_at: '2023-01-03'
      }];
      const sorted = global.window.generationProgress.sortJobsByPriority(jobs);
      expect(sorted[0].status).toBe('processing');
      expect(sorted[1].status).toBe('queued');
      expect(sorted[2].status).toBe('completed');
    });
  });
  describe('Results Module', () => {
    beforeEach(() => {
      require('../../../../../app/frontend/static/js/components/generation-studio/results.js');
    });
    afterEach(() => {
      delete global.window.generationResults;
    });
    test('should format results correctly', () => {
      const rawResult = {
        id: 'result-1',
        prompt: 'test prompt',
        image_url: '/test.jpg',
        width: 512,
        height: 768,
        file_size: 1024000,
        generation_time: 45.5
      };
      const formatted = global.window.generationResults.formatResult(rawResult);
      expect(formatted.id).toBe('result-1');
      expect(formatted.prompt).toBe('test prompt');
      expect(formatted.width).toBe(512);
      expect(formatted.height).toBe(768);
    });
    test('should format file sizes correctly', () => {
      expect(global.window.generationResults.formatFileSize(1024)).toBe('1.0 KB');
      expect(global.window.generationResults.formatFileSize(1048576)).toBe('1.0 MB');
      expect(global.window.generationResults.formatFileSize(1073741824)).toBe('1.0 GB');
    });
    test('should calculate aspect ratios', () => {
      const result = {
        width: 512,
        height: 512
      };
      expect(global.window.generationResults.getAspectRatio(result)).toBe('1:1');
      const result2 = {
        width: 1024,
        height: 768
      };
      expect(global.window.generationResults.getAspectRatio(result2)).toBe('4:3');
    });
    test('should extract parameters from results', () => {
      const result = {
        prompt: 'test prompt',
        width: 512,
        height: 512,
        steps: 25,
        cfg_scale: 8.0,
        seed: 12345
      };
      const params = global.window.generationResults.extractParameters(result);
      expect(params.prompt).toBe('test prompt');
      expect(params.width).toBe(512);
      expect(params.steps).toBe(25);
      expect(params.seed).toBe(12345);
    });
    test('should filter results correctly', () => {
      const results = [{
        id: '1',
        prompt: 'anime girl',
        rating: 4,
        width: 512,
        height: 512
      }, {
        id: '2',
        prompt: 'landscape',
        rating: 3,
        width: 1024,
        height: 768
      }, {
        id: '3',
        prompt: 'anime boy',
        rating: 5,
        width: 512,
        height: 768
      }];
      const filtered = global.window.generationResults.filterResults(results, {
        search: 'anime',
        minRating: 4
      });
      expect(filtered).toHaveLength(2);
      expect(filtered[0].id).toBe('1');
      expect(filtered[1].id).toBe('3');
    });
    test('should sort results correctly', () => {
      const results = [{
        id: '1',
        rating: 3,
        created_at: '2023-01-01'
      }, {
        id: '2',
        rating: 5,
        created_at: '2023-01-02'
      }, {
        id: '3',
        rating: 4,
        created_at: '2023-01-03'
      }];
      const sorted = global.window.generationResults.sortResults(results, 'rating', 'desc');
      expect(sorted[0].rating).toBe(5);
      expect(sorted[1].rating).toBe(4);
      expect(sorted[2].rating).toBe(3);
    });
  });
  describe('UI Module', () => {
    beforeEach(() => {
      // Mock browser APIs
      global.localStorage = {
        getItem: jest.fn(),
        setItem: jest.fn(),
        removeItem: jest.fn()
      };
      global.navigator = {
        clipboard: {
          writeText: jest.fn().mockResolvedValue()
        }
      };
      global.document = {
        createElement: jest.fn().mockReturnValue({
          style: {},
          focus: jest.fn(),
          select: jest.fn()
        }),
        body: {
          appendChild: jest.fn(),
          removeChild: jest.fn()
        },
        execCommand: jest.fn().mockReturnValue(true)
      };
      global.URL = {
        createObjectURL: jest.fn().mockReturnValue('blob:url'),
        revokeObjectURL: jest.fn()
      };
      require('../../../../../app/frontend/static/js/components/generation-studio/ui.js');
    });
    afterEach(() => {
      delete global.window.generationUI;
      delete global.localStorage;
      delete global.navigator;
      delete global.document;
      delete global.URL;
    });
    test('should show toast notifications', () => {
      const mockDispatchEvent = jest.fn();
      global.window = {
        dispatchEvent: mockDispatchEvent
      };
      const result = global.window.generationUI.toast.show('Test message', 'success', 5000);
      expect(result.message).toBe('Test message');
      expect(result.type).toBe('success');
      expect(result.duration).toBe(5000);
      expect(mockDispatchEvent).toHaveBeenCalled();
    });
    test('should manage localStorage correctly', () => {
      global.localStorage.getItem.mockReturnValue('{"test": "value"}');
      const value = global.window.generationUI.storage.get('test-key', {});
      expect(value).toEqual({
        test: 'value'
      });
      global.window.generationUI.storage.set('test-key', {
        new: 'value'
      });
      expect(global.localStorage.setItem).toHaveBeenCalledWith('test-key', '{"new":"value"}');
    });
    test('should copy text to clipboard', async () => {
      const success = await global.window.generationUI.clipboard.copyText('test text');
      expect(success).toBe(true);
      expect(global.navigator.clipboard.writeText).toHaveBeenCalledWith('test text');
    });
    test('should validate prompts correctly', () => {
      const validation = global.window.generationUI.validation.validatePrompt('');
      expect(validation.isValid).toBe(false);
      expect(validation.errors).toContain('Prompt is required');
      const validation2 = global.window.generationUI.validation.validatePrompt('Valid prompt');
      expect(validation2.isValid).toBe(true);
      expect(validation2.errors).toHaveLength(0);
    });
    test('should generate random prompts and parameters', () => {
      const prompt = global.window.generationUI.random.getPrompt();
      expect(typeof prompt).toBe('string');
      expect(prompt.length).toBeGreaterThan(0);
      const params = global.window.generationUI.random.getParams();
      expect(params).toHaveProperty('width');
      expect(params).toHaveProperty('height');
      expect(params).toHaveProperty('steps');
      expect(params).toHaveProperty('cfg_scale');
      expect(params).toHaveProperty('seed');
    });
    test('should download blobs correctly', () => {
      const mockBlob = new Blob(['test content'], {
        type: 'text/plain'
      });
      const mockLink = {
        href: '',
        download: '',
        click: jest.fn()
      };
      global.document.createElement.mockReturnValue(mockLink);
      const success = global.window.generationUI.download.blob(mockBlob, 'test.txt');
      expect(success).toBe(true);
      expect(mockLink.download).toBe('test.txt');
      expect(mockLink.click).toHaveBeenCalled();
    });
  });
  describe('Main Index Integration', () => {
    let component;
    beforeEach(() => {
      // Load all modules
      require('../../../../../app/frontend/static/js/components/generation-studio/state.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/websocket.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/api.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/progress.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/results.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/ui.js');
      require('../../../../../app/frontend/static/js/components/generation-studio/index.js');

      // Mock WebSocket
      global.WebSocket = jest.fn(() => ({
        send: jest.fn(),
        close: jest.fn(),
        readyState: 1,
        addEventListener: jest.fn(),
        removeEventListener: jest.fn()
      }));

      // Mock fetch
      global.fetch = jest.fn().mockResolvedValue({
        ok: true,
        json: jest.fn().mockResolvedValue({
          status: 'success'
        })
      });
      component = global.window.generationStudio();
    });
    afterEach(() => {
      if (component.destroy) {
        component.destroy();
      }

      // Cleanup globals
      delete global.window.generationState;
      delete global.window.generationWebSocket;
      delete global.window.generationAPI;
      delete global.window.generationProgress;
      delete global.window.generationResults;
      delete global.window.generationUI;
      delete global.window.generationStudio;
      delete global.WebSocket;
      delete global.fetch;
    });
    test('should create component with correct structure', () => {
      expect(component).toHaveProperty('init');
      expect(component).toHaveProperty('startGeneration');
      expect(component).toHaveProperty('loadData');
      expect(component).toHaveProperty('params');
      expect(component).toHaveProperty('activeJobs');
      expect(component).toHaveProperty('recentResults');
    });
    test('should initialize correctly', async () => {
      await component.init();
      expect(global.fetch).toHaveBeenCalled();
      expect(component.systemStatus).toBeDefined();
    });
    test('should handle generation workflow', async () => {
      // Set parameters
      component.params.prompt = 'test prompt';
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: jest.fn().mockResolvedValue({
          job_id: 'test-job-123',
          status: 'queued'
        })
      });
      await component.startGeneration();
      expect(component.activeJobs).toHaveLength(1);
      expect(component.activeJobs[0].id).toBe('test-job-123');
    });
    test('should provide reactive getters', () => {
      // Add some test data
      component.activeJobs.push({
        id: 'job-1',
        status: 'processing',
        created_at: new Date().toISOString()
      });
      component.recentResults.push({
        id: 'result-1',
        prompt: 'test'
      });
      expect(component.sortedActiveJobs).toHaveLength(1);
      expect(component.hasActiveJobs).toBe(true);
      expect(component.hasRecentResults).toBe(true);
    });
    test('should handle cancellation correctly', async () => {
      // Add active job
      component.activeJobs.push({
        id: 'job-1',
        status: 'processing'
      });
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: jest.fn().mockResolvedValue({
          status: 'cancelled'
        })
      });
      await component.cancelJob('job-1');
      expect(component.activeJobs).toHaveLength(0);
    });
    test('should manage results correctly', async () => {
      const testResult = {
        id: 'result-1',
        prompt: 'test prompt',
        image_url: '/test.jpg'
      };
      component.recentResults.push(testResult);

      // Test parameter reuse
      component.reuseParameters(testResult);
      expect(component.params.prompt).toBe('test prompt');

      // Test deletion
      global.fetch.mockResolvedValueOnce({
        ok: true,
        json: jest.fn().mockResolvedValue({
          message: 'deleted'
        })
      });

      // Mock confirm
      global.confirm = jest.fn().mockReturnValue(true);
      await component.deleteResult('result-1');
      expect(component.recentResults).toHaveLength(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,