78b5663ceec5c21378d06d78aa30f71c
/**
 * Unit test for lora selection event mapping
 */

/** @jest-environment jsdom */

const fs = require('fs');
const path = require('path');

// Load loraGallery implementation from template file (extract function body)
const templatePath = path.resolve(__dirname, '../../app/frontend/templates/pages/loras.html');
const template = fs.readFileSync(templatePath, 'utf8');

// Extract the loraGallery function definition from the template
const fnMatch = template.match(/function loraGallery\s*\(\)\s*\{([\s\S]*?)\n\}\n/);
let loraGalleryFnSource = null;
if (fnMatch) {
  loraGalleryFnSource = fnMatch[0];
} else {
  throw new Error('Could not extract loraGallery function from template');
}

// Create a sandboxed function and evaluate it
const {
  JSDOM
} = require('jsdom');
function setupDom() {
  const dom = new JSDOM(`<!doctype html><html><body><div id="lora-root"></div></body></html>`, {
    runScripts: 'outside-only'
  });
  global.document = dom.window.document;
  global.window = dom.window;
  global.HTMLElement = dom.window.HTMLElement;
}
beforeEach(() => {
  setupDom();
});
test('loraGallery updates selectedLoras on lora-selected / lora-deselected events', () => {
  // Evaluate the function in the JSDOM window context
  const vm = new Function('window', 'document', `${loraGalleryFnSource}; return loraGallery;`);
  const loraGallery = vm(global.window, global.document)();

  // Attach to a dummy element to emulate Alpine.$data semantics (not needed here)
  expect(Array.isArray(loraGallery.selectedLoras)).toBe(true);

  // Dispatch lora-selected event
  const selectEvent = new global.window.CustomEvent('lora-selected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(selectEvent);
  // Allow any synchronous handlers to run
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(true);

  // Dispatch lora-deselected
  const deselectEvent = new global.window.CustomEvent('lora-deselected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(deselectEvent);
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(false);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwidGVtcGxhdGVQYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsInRlbXBsYXRlIiwicmVhZEZpbGVTeW5jIiwiZm5NYXRjaCIsIm1hdGNoIiwibG9yYUdhbGxlcnlGblNvdXJjZSIsIkVycm9yIiwiSlNET00iLCJzZXR1cERvbSIsImRvbSIsInJ1blNjcmlwdHMiLCJnbG9iYWwiLCJkb2N1bWVudCIsIndpbmRvdyIsIkhUTUxFbGVtZW50IiwiYmVmb3JlRWFjaCIsInRlc3QiLCJ2bSIsIkZ1bmN0aW9uIiwibG9yYUdhbGxlcnkiLCJleHBlY3QiLCJBcnJheSIsImlzQXJyYXkiLCJzZWxlY3RlZExvcmFzIiwidG9CZSIsInNlbGVjdEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpZCIsImRpc3BhdGNoRXZlbnQiLCJpbmNsdWRlcyIsImRlc2VsZWN0RXZlbnQiXSwic291cmNlcyI6WyJsb3JhLXNlbGVjdGlvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVW5pdCB0ZXN0IGZvciBsb3JhIHNlbGVjdGlvbiBldmVudCBtYXBwaW5nXG4gKi9cblxuLyoqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tICovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8vIExvYWQgbG9yYUdhbGxlcnkgaW1wbGVtZW50YXRpb24gZnJvbSB0ZW1wbGF0ZSBmaWxlIChleHRyYWN0IGZ1bmN0aW9uIGJvZHkpXG5jb25zdCB0ZW1wbGF0ZVBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vYXBwL2Zyb250ZW5kL3RlbXBsYXRlcy9wYWdlcy9sb3Jhcy5odG1sJyk7XG5jb25zdCB0ZW1wbGF0ZSA9IGZzLnJlYWRGaWxlU3luYyh0ZW1wbGF0ZVBhdGgsICd1dGY4Jyk7XG5cbi8vIEV4dHJhY3QgdGhlIGxvcmFHYWxsZXJ5IGZ1bmN0aW9uIGRlZmluaXRpb24gZnJvbSB0aGUgdGVtcGxhdGVcbmNvbnN0IGZuTWF0Y2ggPSB0ZW1wbGF0ZS5tYXRjaCgvZnVuY3Rpb24gbG9yYUdhbGxlcnlcXHMqXFwoXFwpXFxzKlxceyhbXFxzXFxTXSo/KVxcblxcfVxcbi8pO1xubGV0IGxvcmFHYWxsZXJ5Rm5Tb3VyY2UgPSBudWxsO1xuaWYgKGZuTWF0Y2gpIHtcbiAgbG9yYUdhbGxlcnlGblNvdXJjZSA9IGZuTWF0Y2hbMF07XG59IGVsc2Uge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IGxvcmFHYWxsZXJ5IGZ1bmN0aW9uIGZyb20gdGVtcGxhdGUnKTtcbn1cblxuLy8gQ3JlYXRlIGEgc2FuZGJveGVkIGZ1bmN0aW9uIGFuZCBldmFsdWF0ZSBpdFxuY29uc3QgeyBKU0RPTSB9ID0gcmVxdWlyZSgnanNkb20nKTtcblxuZnVuY3Rpb24gc2V0dXBEb20oKSB7XG4gIGNvbnN0IGRvbSA9IG5ldyBKU0RPTShgPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+PGRpdiBpZD1cImxvcmEtcm9vdFwiPjwvZGl2PjwvYm9keT48L2h0bWw+YCwgeyBydW5TY3JpcHRzOiAnb3V0c2lkZS1vbmx5JyB9KTtcbiAgZ2xvYmFsLmRvY3VtZW50ID0gZG9tLndpbmRvdy5kb2N1bWVudDtcbiAgZ2xvYmFsLndpbmRvdyA9IGRvbS53aW5kb3c7XG4gIGdsb2JhbC5IVE1MRWxlbWVudCA9IGRvbS53aW5kb3cuSFRNTEVsZW1lbnQ7XG59XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBzZXR1cERvbSgpO1xufSk7XG5cbnRlc3QoJ2xvcmFHYWxsZXJ5IHVwZGF0ZXMgc2VsZWN0ZWRMb3JhcyBvbiBsb3JhLXNlbGVjdGVkIC8gbG9yYS1kZXNlbGVjdGVkIGV2ZW50cycsICgpID0+IHtcbiAgLy8gRXZhbHVhdGUgdGhlIGZ1bmN0aW9uIGluIHRoZSBKU0RPTSB3aW5kb3cgY29udGV4dFxuICBjb25zdCB2bSA9IG5ldyBGdW5jdGlvbignd2luZG93JywgJ2RvY3VtZW50JywgYCR7bG9yYUdhbGxlcnlGblNvdXJjZX07IHJldHVybiBsb3JhR2FsbGVyeTtgKTtcbiAgY29uc3QgbG9yYUdhbGxlcnkgPSB2bShnbG9iYWwud2luZG93LCBnbG9iYWwuZG9jdW1lbnQpKCk7XG5cbiAgLy8gQXR0YWNoIHRvIGEgZHVtbXkgZWxlbWVudCB0byBlbXVsYXRlIEFscGluZS4kZGF0YSBzZW1hbnRpY3MgKG5vdCBuZWVkZWQgaGVyZSlcbiAgZXhwZWN0KEFycmF5LmlzQXJyYXkobG9yYUdhbGxlcnkuc2VsZWN0ZWRMb3JhcykpLnRvQmUodHJ1ZSk7XG5cbiAgLy8gRGlzcGF0Y2ggbG9yYS1zZWxlY3RlZCBldmVudFxuICBjb25zdCBzZWxlY3RFdmVudCA9IG5ldyBnbG9iYWwud2luZG93LkN1c3RvbUV2ZW50KCdsb3JhLXNlbGVjdGVkJywgeyBkZXRhaWw6IHsgaWQ6ICdhYmMtMScgfSB9KTtcbiAgZ2xvYmFsLndpbmRvdy5kb2N1bWVudC5kaXNwYXRjaEV2ZW50KHNlbGVjdEV2ZW50KTtcbiAgLy8gQWxsb3cgYW55IHN5bmNocm9ub3VzIGhhbmRsZXJzIHRvIHJ1blxuICBleHBlY3QobG9yYUdhbGxlcnkuc2VsZWN0ZWRMb3Jhcy5pbmNsdWRlcygnYWJjLTEnKSkudG9CZSh0cnVlKTtcblxuICAvLyBEaXNwYXRjaCBsb3JhLWRlc2VsZWN0ZWRcbiAgY29uc3QgZGVzZWxlY3RFdmVudCA9IG5ldyBnbG9iYWwud2luZG93LkN1c3RvbUV2ZW50KCdsb3JhLWRlc2VsZWN0ZWQnLCB7IGRldGFpbDogeyBpZDogJ2FiYy0xJyB9IH0pO1xuICBnbG9iYWwud2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZGVzZWxlY3RFdmVudCk7XG4gIGV4cGVjdChsb3JhR2FsbGVyeS5zZWxlY3RlZExvcmFzLmluY2x1ZGVzKCdhYmMtMScpKS50b0JlKGZhbHNlKTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFP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