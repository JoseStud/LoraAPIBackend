{"version":3,"names":["global","window","Object","assign","createPerformanceAnalyticsState","require","performanceAnalyticsState","performanceMetrics","performanceCharts","performanceExports","performanceFilters","performanceRealtime","Chart","jest","fn","mockImplementation","data","labels","datasets","update","destroy","resize","WebSocket","send","close","readyState","onopen","onmessage","onerror","onclose","performanceAnalytics","describe","test","state","expect","isLoading","toBe","timeRange","autoRefresh","charts","toEqual","kpis","toBeDefined","chartData","newKPIs","total_generations","success_rate","updated","updateKPIs","setLoading","showToast","message","type","toastMessage","toastType","generateMockKPIs","toHaveProperty","topLoras","generateMockTopLoras","Array","isArray","length","toBeGreaterThan","generateMockChartData","generationVolume","performance","avg_time","total_failed","derived","calculateDerivedMetrics","avgResponseTime","errorRate","beforeEach","document","getElementById","mockReturnValue","getContext","initializeCharts","available","isChartJsAvailable","config","getChartConfig","mockChart","volume","destroyCharts","toHaveBeenCalled","validData","invalidData","validIssues","validateExportData","invalidIssues","toHaveLength","formats","getSupportedFormats","size","estimateExportSize","formatted","formatMetricName","options","getTimeRangeOptions","formatDuration","formatPercentage","formatNumber","growth","calculateGrowthRate","increasingData","value","decreasingData","stableData","calculateTrend","validateTimeRange","callback","intervalId","startAutoRefresh","stopAutoRefresh","refreshInterval","toBeNull","mockCallback","testData","handleWebSocketMessage","toHaveBeenCalledWith","status","getMonitoringStatus","webSocket","component","init","toBeInstanceOf","Function","refreshData","exportData","handleTimeRangeChange","not","toThrow","handleAutoRefreshToggle","toContain","toBeTruthy"],"sources":["performance-analytics-modular.test.js"],"sourcesContent":["/**\n * Jest tests for performance-analytics modular components\n */\n\n// Mock window functions\nglobal.window = global.window || {};\nObject.assign(global.window, {\n    createPerformanceAnalyticsState: require('../../../app/frontend/static/js/components/performance-analytics/state.js').createPerformanceAnalyticsState,\n    performanceAnalyticsState: require('../../../app/frontend/static/js/components/performance-analytics/state.js').performanceAnalyticsState,\n    performanceMetrics: require('../../../app/frontend/static/js/components/performance-analytics/metrics.js').performanceMetrics,\n    performanceCharts: require('../../../app/frontend/static/js/components/performance-analytics/charts.js').performanceCharts,\n    performanceExports: require('../../../app/frontend/static/js/components/performance-analytics/export.js').performanceExports,\n    performanceFilters: require('../../../app/frontend/static/js/components/performance-analytics/filters.js').performanceFilters,\n    performanceRealtime: require('../../../app/frontend/static/js/components/performance-analytics/realtime.js').performanceRealtime\n});\n\n// Mock Chart.js\nglobal.Chart = jest.fn().mockImplementation(() => ({\n    data: { labels: [], datasets: [] },\n    update: jest.fn(),\n    destroy: jest.fn(),\n    resize: jest.fn()\n}));\n\n// Mock WebSocket\nglobal.WebSocket = jest.fn().mockImplementation(() => ({\n    send: jest.fn(),\n    close: jest.fn(),\n    readyState: 1, // OPEN\n    onopen: null,\n    onmessage: null,\n    onerror: null,\n    onclose: null\n}));\n\nconst { performanceAnalytics } = require('../../../app/frontend/static/js/components/performance-analytics/index.js');\n\ndescribe('Performance Analytics Modular Components', () => {\n    \n    describe('State Management', () => {\n        test('should create initial state with all required properties', () => {\n            const state = global.window.createPerformanceAnalyticsState();\n            \n            expect(state.isLoading).toBe(false);\n            expect(state.timeRange).toBe('24h');\n            expect(state.autoRefresh).toBe(false);\n            expect(state.charts).toEqual({});\n            expect(state.kpis).toBeDefined();\n            expect(state.chartData).toBeDefined();\n        });\n        \n        test('should update KPIs correctly', () => {\n            const state = global.window.createPerformanceAnalyticsState();\n            const newKPIs = { total_generations: 1000, success_rate: 95.5 };\n            const updated = global.window.performanceAnalyticsState.updateKPIs(state, newKPIs);\n            \n            expect(updated.kpis.total_generations).toBe(1000);\n            expect(updated.kpis.success_rate).toBe(95.5);\n        });\n        \n        test('should manage loading state', () => {\n            const state = global.window.createPerformanceAnalyticsState();\n            const updated = global.window.performanceAnalyticsState.setLoading(state, true);\n            \n            expect(updated.isLoading).toBe(true);\n        });\n        \n        test('should handle toast notifications', () => {\n            const state = global.window.createPerformanceAnalyticsState();\n            const updated = global.window.performanceAnalyticsState.showToast(state, { \n                message: 'Test message', \n                type: 'success' \n            });\n            \n            expect(updated.showToast).toBe(true);\n            expect(updated.toastMessage).toBe('Test message');\n            expect(updated.toastType).toBe('success');\n        });\n    });\n    \n    describe('Metrics Operations', () => {\n        test('should generate mock KPIs', () => {\n            const kpis = global.window.performanceMetrics.generateMockKPIs();\n            \n            expect(kpis).toHaveProperty('total_generations');\n            expect(kpis).toHaveProperty('success_rate');\n            expect(kpis).toHaveProperty('avg_generation_time');\n            expect(typeof kpis.total_generations).toBe('number');\n            expect(typeof kpis.success_rate).toBe('number');\n        });\n        \n        test('should generate mock top LoRAs', () => {\n            const topLoras = global.window.performanceMetrics.generateMockTopLoras();\n            \n            expect(Array.isArray(topLoras)).toBe(true);\n            expect(topLoras.length).toBeGreaterThan(0);\n            expect(topLoras[0]).toHaveProperty('name');\n            expect(topLoras[0]).toHaveProperty('usage_count');\n            expect(topLoras[0]).toHaveProperty('success_rate');\n        });\n        \n        test('should generate mock chart data', () => {\n            const chartData = global.window.performanceMetrics.generateMockChartData();\n            \n            expect(chartData).toHaveProperty('generationVolume');\n            expect(chartData).toHaveProperty('performance');\n            expect(chartData).toHaveProperty('loraUsage');\n            expect(chartData).toHaveProperty('resourceUsage');\n            expect(Array.isArray(chartData.generationVolume)).toBe(true);\n        });\n        \n        test('should calculate derived metrics', () => {\n            const chartData = {\n                performance: [\n                    { avg_time: 30 },\n                    { avg_time: 40 },\n                    { avg_time: 50 }\n                ]\n            };\n            const kpis = { total_generations: 100, total_failed: 5 };\n            \n            const derived = global.window.performanceMetrics.calculateDerivedMetrics(chartData, kpis);\n            \n            expect(derived).toHaveProperty('avgResponseTime');\n            expect(derived).toHaveProperty('errorRate');\n            expect(derived.avgResponseTime).toBe(40); // Average of 30, 40, 50\n            expect(derived.errorRate).toBe('5.00'); // 5/100 * 100\n        });\n    });\n    \n    describe('Chart Management', () => {\n        beforeEach(() => {\n            // Mock DOM elements\n            global.document = {\n                getElementById: jest.fn().mockReturnValue({\n                    getContext: jest.fn().mockReturnValue({})\n                })\n            };\n        });\n        \n        test('should initialize charts when Chart.js is available', () => {\n            const charts = global.window.performanceCharts.initializeCharts();\n            \n            expect(typeof charts).toBe('object');\n            // Charts will be empty objects due to mocking, but structure should be there\n        });\n        \n        test('should check Chart.js availability', () => {\n            const available = global.window.performanceCharts.isChartJsAvailable();\n            expect(typeof available).toBe('boolean');\n        });\n        \n        test('should get chart configuration', () => {\n            const config = global.window.performanceCharts.getChartConfig('volume');\n            \n            expect(config).toHaveProperty('type');\n            expect(config).toHaveProperty('title');\n            expect(config.type).toBe('line');\n        });\n        \n        test('should handle chart destruction', () => {\n            const mockChart = {\n                destroy: jest.fn()\n            };\n            const charts = { volume: mockChart };\n            \n            global.window.performanceCharts.destroyCharts(charts);\n            expect(mockChart.destroy).toHaveBeenCalled();\n        });\n    });\n    \n    describe('Export Operations', () => {\n        test('should validate export data', () => {\n            const validData = {\n                kpis: { total_generations: 100 },\n                chartData: { generationVolume: [] }\n            };\n            const invalidData = {};\n            \n            const validIssues = global.window.performanceExports.validateExportData(validData);\n            const invalidIssues = global.window.performanceExports.validateExportData(invalidData);\n            \n            expect(validIssues).toHaveLength(0);\n            expect(invalidIssues.length).toBeGreaterThan(0);\n        });\n        \n        test('should get supported export formats', () => {\n            const formats = global.window.performanceExports.getSupportedFormats();\n            \n            expect(Array.isArray(formats)).toBe(true);\n            expect(formats.length).toBeGreaterThan(0);\n            expect(formats[0]).toHaveProperty('id');\n            expect(formats[0]).toHaveProperty('name');\n        });\n        \n        test('should estimate export file size', () => {\n            const data = { test: 'data' };\n            const size = global.window.performanceExports.estimateExportSize(data, 'json');\n            \n            expect(typeof size).toBe('number');\n            expect(size).toBeGreaterThan(0);\n        });\n        \n        test('should format metric names correctly', () => {\n            const formatted = global.window.performanceExports.formatMetricName('total_generations');\n            expect(formatted).toBe('Total Generations');\n        });\n    });\n    \n    describe('Filters and Utilities', () => {\n        test('should get time range options', () => {\n            const options = global.window.performanceFilters.getTimeRangeOptions();\n            \n            expect(Array.isArray(options)).toBe(true);\n            expect(options.length).toBeGreaterThan(0);\n            expect(options[0]).toHaveProperty('id');\n            expect(options[0]).toHaveProperty('name');\n            expect(options[0]).toHaveProperty('hours');\n        });\n        \n        test('should format duration correctly', () => {\n            expect(global.window.performanceFilters.formatDuration(30)).toBe('30.0s');\n            expect(global.window.performanceFilters.formatDuration(90)).toBe('1m 30s');\n            expect(global.window.performanceFilters.formatDuration(3660)).toBe('1h 1m');\n        });\n        \n        test('should format percentage correctly', () => {\n            expect(global.window.performanceFilters.formatPercentage(95.567)).toBe('95.6%');\n            expect(global.window.performanceFilters.formatPercentage(100, 0)).toBe('100%');\n        });\n        \n        test('should format large numbers correctly', () => {\n            expect(global.window.performanceFilters.formatNumber(500)).toBe('500');\n            expect(global.window.performanceFilters.formatNumber(1500)).toBe('1.5K');\n            expect(global.window.performanceFilters.formatNumber(1500000)).toBe('1.5M');\n        });\n        \n        test('should calculate growth rate', () => {\n            const growth = global.window.performanceFilters.calculateGrowthRate(110, 100);\n            expect(growth).toBe(10);\n        });\n        \n        test('should calculate trend direction', () => {\n            const increasingData = [{ value: 10 }, { value: 15 }, { value: 20 }];\n            const decreasingData = [{ value: 20 }, { value: 15 }, { value: 10 }];\n            const stableData = [{ value: 15 }, { value: 16 }, { value: 15 }];\n            \n            expect(global.window.performanceFilters.calculateTrend(increasingData)).toBe('increasing');\n            expect(global.window.performanceFilters.calculateTrend(decreasingData)).toBe('decreasing');\n            expect(global.window.performanceFilters.calculateTrend(stableData)).toBe('stable');\n        });\n        \n        test('should validate time range', () => {\n            expect(global.window.performanceFilters.validateTimeRange('24h')).toBe(true);\n            expect(global.window.performanceFilters.validateTimeRange('invalid')).toBe(false);\n        });\n    });\n    \n    describe('Real-time Operations', () => {\n        test('should start and stop auto refresh', () => {\n            const callback = jest.fn();\n            \n            const intervalId = global.window.performanceRealtime.startAutoRefresh(callback, 1000);\n            expect(intervalId).toBeDefined();\n            \n            global.window.performanceRealtime.stopAutoRefresh();\n            expect(global.window.performanceRealtime.refreshInterval).toBeNull();\n        });\n        \n        test('should handle WebSocket message processing', () => {\n            const mockCallback = jest.fn();\n            const testData = {\n                type: 'kpi_update',\n                kpis: { total_generations: 100 }\n            };\n            \n            global.window.performanceRealtime.handleWebSocketMessage(testData, mockCallback);\n            expect(mockCallback).toHaveBeenCalledWith('kpis', testData.kpis);\n        });\n        \n        test('should get monitoring status', () => {\n            const status = global.window.performanceRealtime.getMonitoringStatus();\n            \n            expect(status).toHaveProperty('autoRefresh');\n            expect(status).toHaveProperty('webSocket');\n            expect(typeof status.autoRefresh).toBe('boolean');\n            expect(typeof status.webSocket).toBe('boolean');\n        });\n    });\n    \n    describe('Main Component Integration', () => {\n        test('should initialize component with correct state', () => {\n            const component = performanceAnalytics();\n            \n            expect(component.timeRange).toBe('24h');\n            expect(component.isLoading).toBe(false);\n            expect(component.init).toBeInstanceOf(Function);\n            expect(component.refreshData).toBeInstanceOf(Function);\n            expect(component.exportData).toBeInstanceOf(Function);\n        });\n        \n        test('should handle time range changes', () => {\n            const component = performanceAnalytics();\n            \n            expect(() => {\n                component.handleTimeRangeChange('7d');\n            }).not.toThrow();\n        });\n        \n        test('should handle auto refresh toggle', () => {\n            const component = performanceAnalytics();\n            \n            expect(() => {\n                component.handleAutoRefreshToggle(true);\n                component.handleAutoRefreshToggle(false);\n            }).not.toThrow();\n        });\n        \n        test('should format values using utility functions', () => {\n            const component = performanceAnalytics();\n            \n            expect(component.formatDuration(45)).toContain('s');\n            expect(component.formatPercentage(95.5)).toContain('%');\n            expect(component.formatNumber(1500)).toBeTruthy();\n        });\n    });\n    \n});\n"],"mappings":"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","ignoreList":[]}