{"version":3,"names":["generationAPI","config","baseUrl","timeout","retries","retryDelay","request","endpoint","options","method","headers","body","url","requestOptions","JSON","stringify","lastError","attempt","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","errorText","text","Error","status","error","isRetryableError","delay","Math","pow","name","message","includes","ms","Promise","resolve","loadSystemStatus","data","json","success","memoryUsage","memory_usage","gpuUsage","gpu_usage","diskUsage","disk_usage","queueLength","queue_length","activeWorkers","active_workers","systemLoad","system_load","uptime","version","timestamp","Date","now","loadActiveJobs","Array","isArray","map","job","id","prompt","negative_prompt","width","height","steps","cfg_scale","seed","batch_count","batch_size","progress","current_step","total_steps","created_at","start_time","eta","model_used","user_id","loadRecentResults","limit","result","job_id","image_url","thumbnail_url","file_size","generation_time","rating","tags","startGeneration","params","validatedParams","validateGenerationParams","estimated_time","queue_position","validated","trim","validateDimension","validateSteps","validateCfgScale","validateSeed","validateBatchCount","validateBatchSize","sampler","scheduler","model","value","defaultValue","num","Number","isNaN","isInteger","cancelJob","jobId","deleteResult","resultId","result_id","getAvailableModels","type","description","size","loaded","default","getQueueInfo","length","processing","estimated_wait","throughput","rateResult","tagResult","getGenerationStats","timeRange","total_generations","successful_generations","failed_generations","average_time","popular_prompts","model_usage","hourly_distribution","downloadResult","format","blob","filename","get","split","replace","module","exports","window"],"sources":["api.js"],"sourcesContent":["/**\n * Generation Studio - API Operations Module\n * \n * Handles all API communications for data loading and generation requests.\n */\n\n/**\n * API operations for generation studio\n */\nconst generationAPI = {\n    /**\n     * Base configuration for API requests\n     */\n    config: {\n        baseUrl: '/api/v1',\n        timeout: 30000,\n        retries: 3,\n        retryDelay: 1000\n    },\n    \n    /**\n     * Makes an API request with error handling and retries\n     */\n    async request(endpoint, options = {}) {\n        const {\n            method = 'GET',\n            headers = {},\n            body = null,\n            timeout = this.config.timeout,\n            retries = this.config.retries\n        } = options;\n        \n        const url = `${this.config.baseUrl}${endpoint}`;\n        const requestOptions = {\n            method,\n            headers: {\n                'Content-Type': 'application/json',\n                ...headers\n            }\n        };\n        \n        if (body) {\n            requestOptions.body = typeof body === 'string' ? body : JSON.stringify(body);\n        }\n        \n        let lastError = null;\n        \n        for (let attempt = 0; attempt <= retries; attempt++) {\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(() => controller.abort(), timeout);\n                \n                const response = await fetch(url, {\n                    ...requestOptions,\n                    signal: controller.signal\n                });\n                \n                clearTimeout(timeoutId);\n                \n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(`HTTP ${response.status}: ${errorText}`);\n                }\n                \n                return response;\n            } catch (error) {\n                lastError = error;\n                \n                if (attempt < retries && this.isRetryableError(error)) {\n                    await this.delay(this.config.retryDelay * Math.pow(2, attempt));\n                    continue;\n                }\n                \n                break;\n            }\n        }\n        \n        throw lastError;\n    },\n    \n    /**\n     * Determines if an error is retryable\n     */\n    isRetryableError(error) {\n        return error.name === 'AbortError' || \n               error.message.includes('fetch') ||\n               error.message.includes('NetworkError') ||\n               error.message.includes('ERR_NETWORK');\n    },\n    \n    /**\n     * Delay utility for retries\n     */\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    },\n    \n    /**\n     * Loads system status\n     */\n    async loadSystemStatus() {\n        try {\n            const response = await this.request('/system/status');\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    status: data.status || 'unknown',\n                    memoryUsage: data.memory_usage || {},\n                    gpuUsage: data.gpu_usage || {},\n                    diskUsage: data.disk_usage || {},\n                    queueLength: data.queue_length || 0,\n                    activeWorkers: data.active_workers || 0,\n                    systemLoad: data.system_load || {},\n                    uptime: data.uptime || 0,\n                    version: data.version || 'unknown',\n                    timestamp: Date.now()\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Loads active generation jobs\n     */\n    async loadActiveJobs() {\n        try {\n            const response = await this.request('/generation/jobs/active');\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: Array.isArray(data) ? data.map(job => ({\n                    id: job.id,\n                    prompt: job.prompt,\n                    negative_prompt: job.negative_prompt,\n                    width: job.width,\n                    height: job.height,\n                    steps: job.steps,\n                    cfg_scale: job.cfg_scale,\n                    seed: job.seed,\n                    batch_count: job.batch_count,\n                    batch_size: job.batch_size,\n                    status: job.status,\n                    progress: job.progress || 0,\n                    current_step: job.current_step || 0,\n                    total_steps: job.total_steps || job.steps,\n                    created_at: job.created_at,\n                    start_time: job.start_time,\n                    eta: job.eta,\n                    model_used: job.model_used,\n                    user_id: job.user_id\n                })) : []\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: []\n            };\n        }\n    },\n    \n    /**\n     * Loads recent generation results\n     */\n    async loadRecentResults(limit = 10) {\n        try {\n            const response = await this.request(`/generation/results?limit=${limit}&sort=created_at:desc`);\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: Array.isArray(data) ? data.map(result => ({\n                    id: result.id,\n                    job_id: result.job_id,\n                    prompt: result.prompt,\n                    negative_prompt: result.negative_prompt,\n                    image_url: result.image_url,\n                    thumbnail_url: result.thumbnail_url,\n                    width: result.width,\n                    height: result.height,\n                    steps: result.steps,\n                    cfg_scale: result.cfg_scale,\n                    seed: result.seed,\n                    batch_count: result.batch_count,\n                    batch_size: result.batch_size,\n                    created_at: result.created_at,\n                    file_size: result.file_size,\n                    generation_time: result.generation_time,\n                    model_used: result.model_used,\n                    user_id: result.user_id,\n                    rating: result.rating,\n                    tags: result.tags || []\n                })) : []\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: []\n            };\n        }\n    },\n    \n    /**\n     * Starts a new generation\n     */\n    async startGeneration(params) {\n        try {\n            const validatedParams = this.validateGenerationParams(params);\n            \n            const response = await this.request('/generation/generate', {\n                method: 'POST',\n                body: validatedParams\n            });\n            \n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    job_id: data.job_id,\n                    status: data.status,\n                    estimated_time: data.estimated_time,\n                    queue_position: data.queue_position,\n                    message: data.message\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Validates generation parameters\n     */\n    validateGenerationParams(params) {\n        const validated = {};\n        \n        // Required parameters\n        if (!params.prompt || !params.prompt.trim()) {\n            throw new Error('Prompt is required');\n        }\n        validated.prompt = params.prompt.trim();\n        \n        // Optional parameters with defaults and validation\n        validated.negative_prompt = (params.negative_prompt || '').trim();\n        \n        validated.width = this.validateDimension(params.width, 512);\n        validated.height = this.validateDimension(params.height, 512);\n        validated.steps = this.validateSteps(params.steps, 20);\n        validated.cfg_scale = this.validateCfgScale(params.cfg_scale, 7.0);\n        validated.seed = this.validateSeed(params.seed, -1);\n        validated.batch_count = this.validateBatchCount(params.batch_count, 1);\n        validated.batch_size = this.validateBatchSize(params.batch_size, 1);\n        \n        // Optional advanced parameters\n        if (params.sampler) {\n            validated.sampler = params.sampler;\n        }\n        if (params.scheduler) {\n            validated.scheduler = params.scheduler;\n        }\n        if (params.model) {\n            validated.model = params.model;\n        }\n        \n        return validated;\n    },\n    \n    /**\n     * Validates dimension (width/height)\n     */\n    validateDimension(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || num < 64 || num > 2048 || num % 8 !== 0) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Validates steps parameter\n     */\n    validateSteps(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || num < 1 || num > 150) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Validates CFG scale parameter\n     */\n    validateCfgScale(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || num < 1 || num > 30) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Validates seed parameter\n     */\n    validateSeed(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || !Number.isInteger(num)) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Validates batch count parameter\n     */\n    validateBatchCount(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || num < 1 || num > 10) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Validates batch size parameter\n     */\n    validateBatchSize(value, defaultValue) {\n        const num = Number(value);\n        if (isNaN(num) || num < 1 || num > 4) {\n            return defaultValue;\n        }\n        return num;\n    },\n    \n    /**\n     * Cancels a generation job\n     */\n    async cancelJob(jobId) {\n        try {\n            const response = await this.request(`/generation/jobs/${jobId}/cancel`, {\n                method: 'POST'\n            });\n            \n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    job_id: jobId,\n                    status: data.status,\n                    message: data.message\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Deletes a generation result\n     */\n    async deleteResult(resultId) {\n        try {\n            await this.request(`/generation/results/${resultId}`, {\n                method: 'DELETE'\n            });\n            \n            return {\n                success: true,\n                data: {\n                    result_id: resultId,\n                    message: 'Result deleted successfully'\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Gets available models\n     */\n    async getAvailableModels() {\n        try {\n            const response = await this.request('/models/available');\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: Array.isArray(data) ? data.map(model => ({\n                    id: model.id,\n                    name: model.name,\n                    type: model.type,\n                    description: model.description,\n                    tags: model.tags || [],\n                    size: model.size,\n                    loaded: model.loaded || false,\n                    default: model.default || false\n                })) : []\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: []\n            };\n        }\n    },\n    \n    /**\n     * Gets generation queue information\n     */\n    async getQueueInfo() {\n        try {\n            const response = await this.request('/generation/queue/info');\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    length: data.length || 0,\n                    processing: data.processing || 0,\n                    estimated_wait: data.estimated_wait || 0,\n                    active_workers: data.active_workers || 0,\n                    throughput: data.throughput || 0\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Updates generation result rating\n     */\n    async rateResult(resultId, rating) {\n        try {\n            const response = await this.request(`/generation/results/${resultId}/rate`, {\n                method: 'POST',\n                body: { rating: Number(rating) }\n            });\n            \n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    result_id: resultId,\n                    rating: data.rating,\n                    message: 'Rating updated successfully'\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Adds tags to a generation result\n     */\n    async tagResult(resultId, tags) {\n        try {\n            const response = await this.request(`/generation/results/${resultId}/tags`, {\n                method: 'POST',\n                body: { tags: Array.isArray(tags) ? tags : [tags] }\n            });\n            \n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    result_id: resultId,\n                    tags: data.tags,\n                    message: 'Tags updated successfully'\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Gets generation statistics\n     */\n    async getGenerationStats(timeRange = '24h') {\n        try {\n            const response = await this.request(`/generation/stats?range=${timeRange}`);\n            const data = await response.json();\n            \n            return {\n                success: true,\n                data: {\n                    total_generations: data.total_generations || 0,\n                    successful_generations: data.successful_generations || 0,\n                    failed_generations: data.failed_generations || 0,\n                    average_time: data.average_time || 0,\n                    popular_prompts: data.popular_prompts || [],\n                    model_usage: data.model_usage || {},\n                    hourly_distribution: data.hourly_distribution || []\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    },\n    \n    /**\n     * Downloads a generation result\n     */\n    async downloadResult(resultId, format = 'original') {\n        try {\n            const response = await this.request(`/generation/results/${resultId}/download?format=${format}`, {\n                headers: {}  // Don't set Content-Type for downloads\n            });\n            \n            if (response.ok) {\n                const blob = await response.blob();\n                const filename = response.headers.get('content-disposition')?.split('filename=')[1] || `result_${resultId}.png`;\n                \n                return {\n                    success: true,\n                    data: {\n                        blob,\n                        filename: filename.replace(/\"/g, ''),\n                        size: blob.size,\n                        type: blob.type\n                    }\n                };\n            } else {\n                throw new Error(`Download failed: ${response.status}`);\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                data: null\n            };\n        }\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { generationAPI };\n} else if (typeof window !== 'undefined') {\n    window.generationAPI = generationAPI;\n}\n"],"mappings":"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","ignoreList":[]}