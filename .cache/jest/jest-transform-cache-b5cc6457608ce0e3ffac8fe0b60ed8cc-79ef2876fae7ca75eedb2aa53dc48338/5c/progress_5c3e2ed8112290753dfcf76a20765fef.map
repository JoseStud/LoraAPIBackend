{"version":3,"names":["generationProgress","updateJobProgress","job","progressData","validatedProgress","validateProgressData","updatedJob","progress","status","current_step","currentStep","total_steps","totalSteps","start_time","Date","now","eta","calculateETA","speed","calculateGenerationSpeed","end_time","generation_time","calculateTotalTime","error","last_updated","data","validated","Math","max","min","validStatuses","includes","floor","String","currentProgress","elapsed","progressPercent","estimatedTotal","remaining","endTime","formatDuration","seconds","round","minutes","remainingSeconds","hours","formatETA","etaSeconds","ceil","getProgressBarConfig","color","animated","text","config","getProcessingText","parts","push","length","join","getStatusIcon","icons","queued","processing","completed","failed","cancelled","paused","getStatusColorClass","colorClasses","isJobActive","activeStatuses","isJobCompleted","isJobFailed","getJobPriority","statusPriority","basePriority","timePriority","created_at","getTime","sortJobsByPriority","jobs","Array","isArray","sort","a","b","priorityA","priorityB","getProgressStatistics","total","averageProgress","estimatedTotalTime","stats","totalProgress","totalETA","forEach","createProgressEvent","previousJob","event","jobId","id","timestamp","changes","from","to","step","module","exports","window"],"sources":["progress.js"],"sourcesContent":["/**\n * Generation Studio - Progress Tracking Module\n * \n * Handles job progress updates, ETA calculations, and progress visualization.\n */\n\n/**\n * Progress tracking for generation jobs\n */\nconst generationProgress = {\n    /**\n     * Updates job progress with validation\n     */\n    updateJobProgress(job, progressData) {\n        if (!job || !progressData) {\n            return null;\n        }\n        \n        const validatedProgress = this.validateProgressData(progressData);\n        const updatedJob = { ...job };\n        \n        // Update basic progress info\n        updatedJob.progress = validatedProgress.progress;\n        updatedJob.status = validatedProgress.status;\n        updatedJob.current_step = validatedProgress.currentStep;\n        updatedJob.total_steps = validatedProgress.totalSteps || job.total_steps;\n        \n        // Handle status-specific updates\n        if (validatedProgress.status === 'processing') {\n            updatedJob.start_time = updatedJob.start_time || Date.now();\n            updatedJob.eta = this.calculateETA(updatedJob, validatedProgress.progress);\n            updatedJob.speed = this.calculateGenerationSpeed(updatedJob);\n        } else if (validatedProgress.status === 'completed') {\n            updatedJob.progress = 100;\n            updatedJob.end_time = Date.now();\n            updatedJob.generation_time = this.calculateTotalTime(updatedJob);\n            updatedJob.eta = null;\n        } else if (validatedProgress.status === 'failed' || validatedProgress.status === 'cancelled') {\n            updatedJob.end_time = Date.now();\n            updatedJob.eta = null;\n            updatedJob.error = validatedProgress.error;\n        }\n        \n        // Update timestamp\n        updatedJob.last_updated = Date.now();\n        \n        return updatedJob;\n    },\n    \n    /**\n     * Validates progress data\n     */\n    validateProgressData(data) {\n        const validated = {\n            progress: 0,\n            status: 'unknown',\n            currentStep: 0,\n            totalSteps: null,\n            error: null\n        };\n        \n        // Validate progress percentage\n        if (typeof data.progress === 'number') {\n            validated.progress = Math.max(0, Math.min(100, data.progress));\n        }\n        \n        // Validate status\n        const validStatuses = ['queued', 'processing', 'completed', 'failed', 'cancelled', 'paused'];\n        if (validStatuses.includes(data.status)) {\n            validated.status = data.status;\n        }\n        \n        // Validate current step\n        if (typeof data.currentStep === 'number' && data.currentStep >= 0) {\n            validated.currentStep = Math.floor(data.currentStep);\n        } else if (typeof data.current_step === 'number' && data.current_step >= 0) {\n            validated.currentStep = Math.floor(data.current_step);\n        }\n        \n        // Validate total steps\n        if (typeof data.totalSteps === 'number' && data.totalSteps > 0) {\n            validated.totalSteps = Math.floor(data.totalSteps);\n        } else if (typeof data.total_steps === 'number' && data.total_steps > 0) {\n            validated.totalSteps = Math.floor(data.total_steps);\n        }\n        \n        // Capture error message\n        if (data.error) {\n            validated.error = String(data.error);\n        }\n        \n        return validated;\n    },\n    \n    /**\n     * Calculates estimated time remaining (ETA)\n     */\n    calculateETA(job, currentProgress) {\n        if (!job.start_time || currentProgress <= 0) {\n            return null;\n        }\n        \n        const now = Date.now();\n        const elapsed = (now - job.start_time) / 1000; // seconds\n        \n        if (elapsed < 5) {\n            // Not enough data for reliable ETA\n            return null;\n        }\n        \n        const progressPercent = currentProgress / 100;\n        const estimatedTotal = elapsed / progressPercent;\n        const remaining = estimatedTotal - elapsed;\n        \n        return Math.max(0, remaining);\n    },\n    \n    /**\n     * Calculates generation speed (steps per second)\n     */\n    calculateGenerationSpeed(job) {\n        if (!job.start_time || !job.current_step) {\n            return 0;\n        }\n        \n        const elapsed = (Date.now() - job.start_time) / 1000;\n        if (elapsed <= 0) return 0;\n        \n        return job.current_step / elapsed;\n    },\n    \n    /**\n     * Calculates total generation time\n     */\n    calculateTotalTime(job) {\n        if (!job.start_time) return 0;\n        \n        const endTime = job.end_time || Date.now();\n        return (endTime - job.start_time) / 1000;\n    },\n    \n    /**\n     * Formats time duration for display\n     */\n    formatDuration(seconds) {\n        if (!seconds || seconds <= 0) {\n            return '—';\n        }\n        \n        if (seconds < 60) {\n            return `${Math.round(seconds)}s`;\n        } else if (seconds < 3600) {\n            const minutes = Math.floor(seconds / 60);\n            const remainingSeconds = Math.round(seconds % 60);\n            return `${minutes}m ${remainingSeconds}s`;\n        } else {\n            const hours = Math.floor(seconds / 3600);\n            const minutes = Math.floor((seconds % 3600) / 60);\n            return `${hours}h ${minutes}m`;\n        }\n    },\n    \n    /**\n     * Formats ETA for display\n     */\n    formatETA(etaSeconds) {\n        if (!etaSeconds || etaSeconds <= 0) {\n            return 'Unknown';\n        }\n        \n        if (etaSeconds < 60) {\n            return `~${Math.round(etaSeconds)}s`;\n        } else if (etaSeconds < 3600) {\n            const minutes = Math.ceil(etaSeconds / 60);\n            return `~${minutes}m`;\n        } else {\n            const hours = Math.floor(etaSeconds / 3600);\n            const minutes = Math.ceil((etaSeconds % 3600) / 60);\n            return `~${hours}h ${minutes}m`;\n        }\n    },\n    \n    /**\n     * Gets progress bar configuration\n     */\n    getProgressBarConfig(job) {\n        if (!job) {\n            return {\n                progress: 0,\n                status: 'unknown',\n                color: 'gray',\n                animated: false,\n                text: ''\n            };\n        }\n        \n        const config = {\n            progress: job.progress || 0,\n            status: job.status || 'unknown',\n            animated: false,\n            text: ''\n        };\n        \n        // Set color based on status\n        switch (job.status) {\n            case 'queued':\n                config.color = 'blue';\n                config.text = 'Queued';\n                break;\n            case 'processing':\n                config.color = 'green';\n                config.animated = true;\n                config.text = this.getProcessingText(job);\n                break;\n            case 'completed':\n                config.color = 'green';\n                config.progress = 100;\n                config.text = 'Completed';\n                break;\n            case 'failed':\n                config.color = 'red';\n                config.text = 'Failed';\n                break;\n            case 'cancelled':\n                config.color = 'orange';\n                config.text = 'Cancelled';\n                break;\n            case 'paused':\n                config.color = 'yellow';\n                config.text = 'Paused';\n                break;\n            default:\n                config.color = 'gray';\n                config.text = 'Unknown';\n        }\n        \n        return config;\n    },\n    \n    /**\n     * Gets processing text with step info\n     */\n    getProcessingText(job) {\n        const parts = [];\n        \n        if (job.current_step && job.total_steps) {\n            parts.push(`Step ${job.current_step}/${job.total_steps}`);\n        }\n        \n        if (job.progress) {\n            parts.push(`${Math.round(job.progress)}%`);\n        }\n        \n        if (job.eta) {\n            parts.push(`ETA: ${this.formatETA(job.eta)}`);\n        }\n        \n        return parts.length > 0 ? parts.join(' • ') : 'Processing...';\n    },\n    \n    /**\n     * Gets status icon for job\n     */\n    getStatusIcon(status) {\n        const icons = {\n            queued: '⏳',\n            processing: '⚡',\n            completed: '✅',\n            failed: '❌',\n            cancelled: '⏹️',\n            paused: '⏸️'\n        };\n        \n        return icons[status] || '❓';\n    },\n    \n    /**\n     * Gets status color class\n     */\n    getStatusColorClass(status) {\n        const colorClasses = {\n            queued: 'text-blue-600',\n            processing: 'text-green-600',\n            completed: 'text-green-600',\n            failed: 'text-red-600',\n            cancelled: 'text-orange-600',\n            paused: 'text-yellow-600'\n        };\n        \n        return colorClasses[status] || 'text-gray-600';\n    },\n    \n    /**\n     * Checks if job is active (not in final state)\n     */\n    isJobActive(job) {\n        if (!job) return false;\n        \n        const activeStatuses = ['queued', 'processing', 'paused'];\n        return activeStatuses.includes(job.status);\n    },\n    \n    /**\n     * Checks if job is completed\n     */\n    isJobCompleted(job) {\n        return job && job.status === 'completed';\n    },\n    \n    /**\n     * Checks if job has failed\n     */\n    isJobFailed(job) {\n        return job && (job.status === 'failed' || job.status === 'cancelled');\n    },\n    \n    /**\n     * Gets job priority score (for sorting)\n     */\n    getJobPriority(job) {\n        if (!job) return 0;\n        \n        const statusPriority = {\n            processing: 1000,\n            queued: 500,\n            paused: 100,\n            failed: 10,\n            cancelled: 5,\n            completed: 1\n        };\n        \n        const basePriority = statusPriority[job.status] || 0;\n        const timePriority = job.created_at ? (Date.now() - new Date(job.created_at).getTime()) / 1000 : 0;\n        \n        return basePriority + (timePriority / 1000); // Newer jobs get slightly higher priority\n    },\n    \n    /**\n     * Sorts jobs by priority\n     */\n    sortJobsByPriority(jobs) {\n        if (!Array.isArray(jobs)) return [];\n        \n        return [...jobs].sort((a, b) => {\n            const priorityA = this.getJobPriority(a);\n            const priorityB = this.getJobPriority(b);\n            return priorityB - priorityA; // Higher priority first\n        });\n    },\n    \n    /**\n     * Gets progress statistics for multiple jobs\n     */\n    getProgressStatistics(jobs) {\n        if (!Array.isArray(jobs) || jobs.length === 0) {\n            return {\n                total: 0,\n                queued: 0,\n                processing: 0,\n                completed: 0,\n                failed: 0,\n                cancelled: 0,\n                paused: 0,\n                averageProgress: 0,\n                estimatedTotalTime: 0\n            };\n        }\n        \n        const stats = {\n            total: jobs.length,\n            queued: 0,\n            processing: 0,\n            completed: 0,\n            failed: 0,\n            cancelled: 0,\n            paused: 0,\n            averageProgress: 0,\n            estimatedTotalTime: 0\n        };\n        \n        let totalProgress = 0;\n        let totalETA = 0;\n        \n        jobs.forEach(job => {\n            if (job.status) {\n                stats[job.status] = (stats[job.status] || 0) + 1;\n            }\n            \n            totalProgress += job.progress || 0;\n            \n            if (job.eta && this.isJobActive(job)) {\n                totalETA += job.eta;\n            }\n        });\n        \n        stats.averageProgress = totalProgress / jobs.length;\n        stats.estimatedTotalTime = totalETA;\n        \n        return stats;\n    },\n    \n    /**\n     * Creates progress event data\n     */\n    createProgressEvent(job, previousJob = null) {\n        const event = {\n            jobId: job.id,\n            status: job.status,\n            progress: job.progress,\n            timestamp: Date.now(),\n            changes: {}\n        };\n        \n        if (previousJob) {\n            // Track what changed\n            if (previousJob.status !== job.status) {\n                event.changes.status = { from: previousJob.status, to: job.status };\n            }\n            \n            if (previousJob.progress !== job.progress) {\n                event.changes.progress = { from: previousJob.progress, to: job.progress };\n            }\n            \n            if (previousJob.current_step !== job.current_step) {\n                event.changes.step = { from: previousJob.current_step, to: job.current_step };\n            }\n        }\n        \n        return event;\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { generationProgress };\n} else if (typeof window !== 'undefined') {\n    window.generationProgress = generationProgress;\n}\n"],"mappings":"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","ignoreList":[]}