18d2376a29267ac833ed1fe4351df872
/**
 * Jest tests for performance-analytics modular components
 */

// Mock window functions
global.window = global.window || {};
Object.assign(global.window, {
  createPerformanceAnalyticsState: require('../../../app/frontend/static/js/components/performance-analytics/state.js').createPerformanceAnalyticsState,
  performanceAnalyticsState: require('../../../app/frontend/static/js/components/performance-analytics/state.js').performanceAnalyticsState,
  performanceMetrics: require('../../../app/frontend/static/js/components/performance-analytics/metrics.js').performanceMetrics,
  performanceCharts: require('../../../app/frontend/static/js/components/performance-analytics/charts.js').performanceCharts,
  performanceExports: require('../../../app/frontend/static/js/components/performance-analytics/export.js').performanceExports,
  performanceFilters: require('../../../app/frontend/static/js/components/performance-analytics/filters.js').performanceFilters,
  performanceRealtime: require('../../../app/frontend/static/js/components/performance-analytics/realtime.js').performanceRealtime
});

// Mock Chart.js
global.Chart = jest.fn().mockImplementation(() => ({
  data: {
    labels: [],
    datasets: []
  },
  update: jest.fn(),
  destroy: jest.fn(),
  resize: jest.fn()
}));

// Mock WebSocket
global.WebSocket = jest.fn().mockImplementation(() => ({
  send: jest.fn(),
  close: jest.fn(),
  readyState: 1,
  // OPEN
  onopen: null,
  onmessage: null,
  onerror: null,
  onclose: null
}));

// Mock WebSocket constants
global.WebSocket.OPEN = 1;
global.WebSocket.CONNECTING = 0;
global.WebSocket.CLOSING = 2;
global.WebSocket.CLOSED = 3;
const {
  performanceAnalytics
} = require('../../../app/frontend/static/js/components/performance-analytics/index.js');
describe('Performance Analytics Modular Components', () => {
  describe('State Management', () => {
    test('should create initial state with all required properties', () => {
      const state = global.window.createPerformanceAnalyticsState();
      expect(state.isLoading).toBe(false);
      expect(state.timeRange).toBe('24h');
      expect(state.autoRefresh).toBe(false);
      expect(state.charts).toEqual({});
      expect(state.kpis).toBeDefined();
      expect(state.chartData).toBeDefined();
    });
    test('should update KPIs correctly', () => {
      const state = global.window.createPerformanceAnalyticsState();
      const newKPIs = {
        total_generations: 1000,
        success_rate: 95.5
      };
      const updated = global.window.performanceAnalyticsState.updateKPIs(state, newKPIs);
      expect(updated.kpis.total_generations).toBe(1000);
      expect(updated.kpis.success_rate).toBe(95.5);
    });
    test('should manage loading state', () => {
      const state = global.window.createPerformanceAnalyticsState();
      const updated = global.window.performanceAnalyticsState.setLoading(state, true);
      expect(updated.isLoading).toBe(true);
    });
    test('should handle toast notifications', () => {
      const state = global.window.createPerformanceAnalyticsState();
      const updated = global.window.performanceAnalyticsState.showToast(state, {
        message: 'Test message',
        type: 'success'
      });
      expect(updated.showToast).toBe(true);
      expect(updated.toastMessage).toBe('Test message');
      expect(updated.toastType).toBe('success');
    });
  });
  describe('Metrics Operations', () => {
    test('should generate mock KPIs', () => {
      const kpis = global.window.performanceMetrics.generateMockKPIs();
      expect(kpis).toHaveProperty('total_generations');
      expect(kpis).toHaveProperty('success_rate');
      expect(kpis).toHaveProperty('avg_generation_time');
      expect(typeof kpis.total_generations).toBe('number');
      expect(typeof kpis.success_rate).toBe('number');
    });
    test('should generate mock top LoRAs', () => {
      const topLoras = global.window.performanceMetrics.generateMockTopLoras();
      expect(Array.isArray(topLoras)).toBe(true);
      expect(topLoras.length).toBeGreaterThan(0);
      expect(topLoras[0]).toHaveProperty('name');
      expect(topLoras[0]).toHaveProperty('usage_count');
      expect(topLoras[0]).toHaveProperty('success_rate');
    });
    test('should generate mock chart data', () => {
      const chartData = global.window.performanceMetrics.generateMockChartData();
      expect(chartData).toHaveProperty('generationVolume');
      expect(chartData).toHaveProperty('performance');
      expect(chartData).toHaveProperty('loraUsage');
      expect(chartData).toHaveProperty('resourceUsage');
      expect(Array.isArray(chartData.generationVolume)).toBe(true);
    });
    test('should calculate derived metrics', () => {
      const chartData = {
        performance: [{
          avg_time: 30
        }, {
          avg_time: 40
        }, {
          avg_time: 50
        }]
      };
      const kpis = {
        total_generations: 100,
        total_failed: 5
      };
      const derived = global.window.performanceMetrics.calculateDerivedMetrics(chartData, kpis);
      expect(derived).toHaveProperty('avgResponseTime');
      expect(derived).toHaveProperty('errorRate');
      expect(derived.avgResponseTime).toBe(40); // Average of 30, 40, 50
      expect(derived.errorRate).toBe('5.00'); // 5/100 * 100
    });
  });
  describe('Chart Management', () => {
    beforeEach(() => {
      // Mock DOM elements
      global.document = {
        getElementById: jest.fn().mockReturnValue({
          getContext: jest.fn().mockReturnValue({})
        })
      };
    });
    test('should initialize charts when Chart.js is available', () => {
      const charts = global.window.performanceCharts.initializeCharts();
      expect(typeof charts).toBe('object');
      // Charts will be empty objects due to mocking, but structure should be there
    });
    test('should check Chart.js availability', () => {
      const available = global.window.performanceCharts.isChartJsAvailable();
      expect(typeof available).toBe('boolean');
    });
    test('should get chart configuration', () => {
      const config = global.window.performanceCharts.getChartConfig('volume');
      expect(config).toHaveProperty('type');
      expect(config).toHaveProperty('title');
      expect(config.type).toBe('line');
    });
    test('should handle chart destruction', () => {
      const mockChart = {
        destroy: jest.fn()
      };
      const charts = {
        volume: mockChart
      };
      global.window.performanceCharts.destroyCharts(charts);
      expect(mockChart.destroy).toHaveBeenCalled();
    });
  });
  describe('Export Operations', () => {
    test('should validate export data', () => {
      const validData = {
        kpis: {
          total_generations: 100
        },
        chartData: {
          generationVolume: []
        }
      };
      const invalidData = {};
      const validIssues = global.window.performanceExports.validateExportData(validData);
      const invalidIssues = global.window.performanceExports.validateExportData(invalidData);
      expect(validIssues).toHaveLength(0);
      expect(invalidIssues.length).toBeGreaterThan(0);
    });
    test('should get supported export formats', () => {
      const formats = global.window.performanceExports.getSupportedFormats();
      expect(Array.isArray(formats)).toBe(true);
      expect(formats.length).toBeGreaterThan(0);
      expect(formats[0]).toHaveProperty('id');
      expect(formats[0]).toHaveProperty('name');
    });
    test('should estimate export file size', () => {
      const data = {
        test: 'data'
      };
      const size = global.window.performanceExports.estimateExportSize(data, 'json');
      expect(typeof size).toBe('number');
      expect(size).toBeGreaterThan(0);
    });
    test('should format metric names correctly', () => {
      const formatted = global.window.performanceExports.formatMetricName('total_generations');
      expect(formatted).toBe('Total Generations');
    });
  });
  describe('Filters and Utilities', () => {
    test('should get time range options', () => {
      const options = global.window.performanceFilters.getTimeRangeOptions();
      expect(Array.isArray(options)).toBe(true);
      expect(options.length).toBeGreaterThan(0);
      expect(options[0]).toHaveProperty('id');
      expect(options[0]).toHaveProperty('name');
      expect(options[0]).toHaveProperty('hours');
    });
    test('should format duration correctly', () => {
      expect(global.window.performanceFilters.formatDuration(30)).toBe('30.0s');
      expect(global.window.performanceFilters.formatDuration(90)).toBe('1m 30s');
      expect(global.window.performanceFilters.formatDuration(3660)).toBe('1h 1m');
    });
    test('should format percentage correctly', () => {
      expect(global.window.performanceFilters.formatPercentage(95.567)).toBe('95.6%');
      expect(global.window.performanceFilters.formatPercentage(100, 0)).toBe('100%');
    });
    test('should format large numbers correctly', () => {
      expect(global.window.performanceFilters.formatNumber(500)).toBe('500');
      expect(global.window.performanceFilters.formatNumber(1500)).toBe('1.5K');
      expect(global.window.performanceFilters.formatNumber(1500000)).toBe('1.5M');
    });
    test('should calculate growth rate', () => {
      const growth = global.window.performanceFilters.calculateGrowthRate(110, 100);
      expect(growth).toBe(10);
    });
    test('should calculate trend direction', () => {
      const increasingData = [{
        value: 10
      }, {
        value: 15
      }, {
        value: 20
      }];
      const decreasingData = [{
        value: 20
      }, {
        value: 15
      }, {
        value: 10
      }];
      const stableData = [{
        value: 15
      }, {
        value: 16
      }, {
        value: 15
      }];
      expect(global.window.performanceFilters.calculateTrend(increasingData)).toBe('increasing');
      expect(global.window.performanceFilters.calculateTrend(decreasingData)).toBe('decreasing');
      expect(global.window.performanceFilters.calculateTrend(stableData)).toBe('stable');
    });
    test('should validate time range', () => {
      expect(global.window.performanceFilters.validateTimeRange('24h')).toBe(true);
      expect(global.window.performanceFilters.validateTimeRange('invalid')).toBe(false);
    });
  });
  describe('Real-time Operations', () => {
    test('should start and stop auto refresh', () => {
      const callback = jest.fn();
      const intervalId = global.window.performanceRealtime.startAutoRefresh(callback, 1000);
      expect(intervalId).toBeDefined();
      global.window.performanceRealtime.stopAutoRefresh();
      expect(global.window.performanceRealtime.refreshInterval).toBeNull();
    });
    test('should handle WebSocket message processing', () => {
      const mockCallback = jest.fn();
      const testData = {
        type: 'kpi_update',
        kpis: {
          total_generations: 100
        }
      };
      global.window.performanceRealtime.handleWebSocketMessage(testData, mockCallback);
      expect(mockCallback).toHaveBeenCalledWith('kpis', testData.kpis);
    });
    test('should get monitoring status', () => {
      const status = global.window.performanceRealtime.getMonitoringStatus();
      expect(status).toHaveProperty('autoRefresh');
      expect(status).toHaveProperty('webSocket');
      expect(typeof status.autoRefresh).toBe('boolean');
      expect(typeof status.webSocket).toBe('boolean');
    });
  });
  describe('Main Component Integration', () => {
    test('should initialize component with correct state', () => {
      const component = performanceAnalytics();
      expect(component.timeRange).toBe('24h');
      expect(component.isLoading).toBe(false);
      expect(component.init).toBeInstanceOf(Function);
      expect(component.refreshData).toBeInstanceOf(Function);
      expect(component.exportData).toBeInstanceOf(Function);
    });
    test('should handle time range changes', () => {
      const component = performanceAnalytics();
      expect(() => {
        component.handleTimeRangeChange('7d');
      }).not.toThrow();
    });
    test('should handle auto refresh toggle', () => {
      const component = performanceAnalytics();
      expect(() => {
        component.handleAutoRefreshToggle(true);
        component.handleAutoRefreshToggle(false);
      }).not.toThrow();
    });
    test('should format values using utility functions', () => {
      const component = performanceAnalytics();
      expect(component.formatDuration(45)).toContain('s');
      expect(component.formatPercentage(95.5)).toContain('%');
      expect(component.formatNumber(1500)).toBeTruthy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,