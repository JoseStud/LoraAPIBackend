{"version":3,"names":["describe","component","mockChart","mockFetch","beforeEach","jest","fn","global","fetch","update","destroy","resize","data","labels","datasets","options","Chart","register","isLoading","error","selectedTimeRange","selectedMetrics","metrics","kpis","totalRequests","avgResponseTime","errorRate","uptime","systemMetrics","cpu","memory","disk","gpu","performanceMetrics","responseTime","throughput","userMetrics","activeUsers","newUsers","bounceRate","charts","system","performance","users","exportData","format","includeCharts","dateRange","start","end","init","loadData","initCharts","updateCharts","exportReport","setTimeRange","refreshData","createSystemChart","createPerformanceChart","createUsersChart","exportJSON","exportCSV","exportPDF","afterEach","clearAllMocks","test","expect","toBe","toEqual","toHaveBeenCalled","mockResolvedValue","ok","json","Promise","resolve","timestamp","value","response","toHaveBeenCalledWith","mockRejectedValue","Error","message","range","mockCanvas","document","createElement","mockCtx","getContext","ctx","chart","type","label","borderColor","mockData","newData","Object","values","forEach","toHaveBeenCalledTimes","destroyCharts","responseTimes","calculateAvgResponseTime","times","reduce","sum","time","length","avg","errorRequests","calculateErrorRate","errors","total","totalTime","downtime","calculateUptime","down","toBeCloseTo","Date","toISOString","timeRange","blob","Blob","JSON","stringify","toBeInstanceOf","headers","rows","csvContent","map","row","join","jsPDF","text","addImage","save","pdf","mockWebSocket","onopen","onmessage","onclose","onerror","send","close","WebSocket","initRealTimeUpdates","ws","event","parse","updateMetrics","push","mockEvent","getFilteredMetrics","allMetrics","filtered","metric","toHaveProperty","not","rawData","aggregateByHour","grouped","point","hour","substring","entries","val","aggregated","toHaveLength"],"sources":["performance-analytics.test.js"],"sourcesContent":["/**\n * Unit Tests for Performance Analytics Component\n */\n\ndescribe('Performance Analytics Component', () => {\n    let component;\n    let mockChart;\n    let mockFetch;\n    \n    beforeEach(() => {\n        // Mock fetch\n        mockFetch = jest.fn();\n        global.fetch = mockFetch;\n        \n        // Mock Chart.js\n        mockChart = {\n            update: jest.fn(),\n            destroy: jest.fn(),\n            resize: jest.fn(),\n            data: {\n                labels: [],\n                datasets: []\n            },\n            options: {}\n        };\n        \n        global.Chart = jest.fn(() => mockChart);\n        global.Chart.register = jest.fn();\n        \n        // Setup component data structure similar to performance-analytics.js\n        component = {\n            // State\n            isLoading: false,\n            error: null,\n            selectedTimeRange: '24h',\n            selectedMetrics: ['cpu', 'memory', 'disk'],\n            \n            // Data\n            metrics: {\n                kpis: {\n                    totalRequests: 0,\n                    avgResponseTime: 0,\n                    errorRate: 0,\n                    uptime: 0\n                },\n                systemMetrics: {\n                    cpu: [],\n                    memory: [],\n                    disk: [],\n                    gpu: []\n                },\n                performanceMetrics: {\n                    responseTime: [],\n                    throughput: [],\n                    errorRate: []\n                },\n                userMetrics: {\n                    activeUsers: 0,\n                    newUsers: 0,\n                    bounceRate: 0\n                }\n            },\n            \n            // Charts\n            charts: {\n                system: null,\n                performance: null,\n                users: null\n            },\n            \n            // Export data\n            exportData: {\n                format: 'json',\n                includeCharts: true,\n                dateRange: {\n                    start: '',\n                    end: ''\n                }\n            },\n            \n            // Methods\n            init: jest.fn(),\n            loadData: jest.fn(),\n            initCharts: jest.fn(),\n            updateCharts: jest.fn(),\n            exportReport: jest.fn(),\n            \n            // Time range methods\n            setTimeRange: jest.fn(),\n            refreshData: jest.fn(),\n            \n            // Chart methods\n            createSystemChart: jest.fn(),\n            createPerformanceChart: jest.fn(),\n            createUsersChart: jest.fn(),\n            \n            // Export methods\n            exportJSON: jest.fn(),\n            exportCSV: jest.fn(),\n            exportPDF: jest.fn()\n        };\n    });\n    \n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n    \n    describe('Component Initialization', () => {\n        test('should initialize with default state', () => {\n            expect(component.isLoading).toBe(false);\n            expect(component.error).toBe(null);\n            expect(component.selectedTimeRange).toBe('24h');\n            expect(component.selectedMetrics).toEqual(['cpu', 'memory', 'disk']);\n        });\n        \n        test('should initialize charts on component creation', () => {\n            component.init();\n            expect(component.init).toHaveBeenCalled();\n        });\n    });\n    \n    describe('Data Loading', () => {\n        beforeEach(() => {\n            mockFetch.mockResolvedValue({\n                ok: true,\n                json: () => Promise.resolve({\n                    kpis: {\n                        totalRequests: 1000,\n                        avgResponseTime: 250,\n                        errorRate: 0.5,\n                        uptime: 99.9\n                    },\n                    systemMetrics: {\n                        cpu: [\n                            { timestamp: '2024-01-01T10:00:00Z', value: 45 },\n                            { timestamp: '2024-01-01T11:00:00Z', value: 52 }\n                        ],\n                        memory: [\n                            { timestamp: '2024-01-01T10:00:00Z', value: 67 },\n                            { timestamp: '2024-01-01T11:00:00Z', value: 72 }\n                        ]\n                    }\n                })\n            });\n        });\n        \n        test('should load analytics data', async () => {\n            component.loadData = jest.fn(async () => {\n                const response = await fetch(`/api/v1/analytics?timeRange=${component.selectedTimeRange}`);\n                const data = await response.json();\n                component.metrics = { ...component.metrics, ...data };\n            });\n            \n            await component.loadData();\n            \n            expect(mockFetch).toHaveBeenCalledWith('/api/v1/analytics?timeRange=24h');\n            expect(component.loadData).toHaveBeenCalled();\n        });\n        \n        test('should handle loading errors', async () => {\n            mockFetch.mockRejectedValue(new Error('Failed to fetch'));\n            \n            component.loadData = jest.fn(async () => {\n                try {\n                    await fetch(`/api/v1/analytics?timeRange=${component.selectedTimeRange}`);\n                } catch (error) {\n                    component.error = error.message;\n                }\n            });\n            \n            await component.loadData();\n            expect(component.error).toBe('Failed to fetch');\n        });\n        \n        test('should refresh data on time range change', async () => {\n            component.setTimeRange = jest.fn(async (range) => {\n                component.selectedTimeRange = range;\n                await component.loadData();\n            });\n            \n            await component.setTimeRange('7d');\n            \n            expect(component.selectedTimeRange).toBe('7d');\n            expect(component.setTimeRange).toHaveBeenCalledWith('7d');\n        });\n    });\n    \n    describe('Chart Management', () => {\n        test('should create system metrics chart', () => {\n            const mockCanvas = document.createElement('canvas');\n            const mockCtx = mockCanvas.getContext('2d');\n            \n            component.createSystemChart = jest.fn((ctx, data) => {\n                const chart = new Chart(ctx, {\n                    type: 'line',\n                    data: {\n                        labels: data.labels,\n                        datasets: [\n                            {\n                                label: 'CPU Usage',\n                                data: data.cpu,\n                                borderColor: 'rgb(59, 130, 246)'\n                            },\n                            {\n                                label: 'Memory Usage',\n                                data: data.memory,\n                                borderColor: 'rgb(34, 197, 94)'\n                            }\n                        ]\n                    }\n                });\n                component.charts.system = chart;\n                return chart;\n            });\n            \n            const mockData = {\n                labels: ['10:00', '11:00'],\n                cpu: [45, 52],\n                memory: [67, 72]\n            };\n            \n            const chart = component.createSystemChart(mockCtx, mockData);\n            \n            expect(Chart).toHaveBeenCalled();\n            expect(component.charts.system).toBe(chart);\n        });\n        \n        test('should update charts with new data', () => {\n            component.charts.system = mockChart;\n            component.charts.performance = mockChart;\n            \n            component.updateCharts = jest.fn((newData) => {\n                Object.values(component.charts).forEach(chart => {\n                    if (chart) {\n                        chart.data.labels = newData.labels;\n                        chart.update();\n                    }\n                });\n            });\n            \n            const newData = {\n                labels: ['12:00', '13:00'],\n                cpu: [48, 55]\n            };\n            \n            component.updateCharts(newData);\n            \n            expect(mockChart.update).toHaveBeenCalledTimes(2);\n        });\n        \n        test('should destroy charts on cleanup', () => {\n            component.charts.system = mockChart;\n            component.charts.performance = mockChart;\n            \n            component.destroyCharts = jest.fn(() => {\n                Object.values(component.charts).forEach(chart => {\n                    if (chart) {\n                        chart.destroy();\n                    }\n                });\n            });\n            \n            component.destroyCharts();\n            \n            expect(mockChart.destroy).toHaveBeenCalledTimes(2);\n        });\n    });\n    \n    describe('KPI Calculations', () => {\n        test('should calculate average response time', () => {\n            const responseTimes = [100, 200, 150, 300, 250];\n            \n            component.calculateAvgResponseTime = jest.fn((times) => {\n                return times.reduce((sum, time) => sum + time, 0) / times.length;\n            });\n            \n            const avg = component.calculateAvgResponseTime(responseTimes);\n            expect(avg).toBe(200);\n        });\n        \n        test('should calculate error rate', () => {\n            const totalRequests = 1000;\n            const errorRequests = 5;\n            \n            component.calculateErrorRate = jest.fn((errors, total) => {\n                return (errors / total) * 100;\n            });\n            \n            const errorRate = component.calculateErrorRate(errorRequests, totalRequests);\n            expect(errorRate).toBe(0.5);\n        });\n        \n        test('should calculate uptime percentage', () => {\n            const totalTime = 24 * 60; // 24 hours in minutes\n            const downtime = 5; // 5 minutes\n            \n            component.calculateUptime = jest.fn((total, down) => {\n                return ((total - down) / total) * 100;\n            });\n            \n            const uptime = component.calculateUptime(totalTime, downtime);\n            expect(uptime).toBeCloseTo(99.65, 2);\n        });\n    });\n    \n    describe('Export Functionality', () => {\n        test('should export data as JSON', () => {\n            const mockData = {\n                timestamp: new Date().toISOString(),\n                metrics: component.metrics,\n                timeRange: component.selectedTimeRange\n            };\n            \n            component.exportJSON = jest.fn(() => {\n                const data = {\n                    timestamp: new Date().toISOString(),\n                    metrics: component.metrics,\n                    timeRange: component.selectedTimeRange\n                };\n                \n                const blob = new Blob([JSON.stringify(data, null, 2)], {\n                    type: 'application/json'\n                });\n                \n                return blob;\n            });\n            \n            const blob = component.exportJSON();\n            expect(blob).toBeInstanceOf(Blob);\n            expect(blob.type).toBe('application/json');\n        });\n        \n        test('should export data as CSV', () => {\n            component.exportCSV = jest.fn(() => {\n                const headers = ['timestamp', 'cpu', 'memory', 'disk'];\n                const rows = [\n                    ['2024-01-01T10:00:00Z', '45', '67', '80'],\n                    ['2024-01-01T11:00:00Z', '52', '72', '82']\n                ];\n                \n                const csvContent = [headers, ...rows]\n                    .map(row => row.join(','))\n                    .join('\\n');\n                \n                const blob = new Blob([csvContent], {\n                    type: 'text/csv'\n                });\n                \n                return blob;\n            });\n            \n            const blob = component.exportCSV();\n            expect(blob).toBeInstanceOf(Blob);\n            expect(blob.type).toBe('text/csv');\n        });\n        \n        test('should export report as PDF', () => {\n            // Mock PDF generation\n            global.jsPDF = jest.fn(() => ({\n                text: jest.fn(),\n                addImage: jest.fn(),\n                save: jest.fn()\n            }));\n            \n            component.exportPDF = jest.fn(() => {\n                const pdf = new jsPDF();\n                pdf.text('Performance Analytics Report', 20, 20);\n                return pdf;\n            });\n            \n            const pdf = component.exportPDF();\n            expect(pdf.text).toHaveBeenCalledWith('Performance Analytics Report', 20, 20);\n        });\n    });\n    \n    describe('Real-time Updates', () => {\n        test('should handle WebSocket messages', () => {\n            const mockWebSocket = {\n                onopen: null,\n                onmessage: null,\n                onclose: null,\n                onerror: null,\n                send: jest.fn(),\n                close: jest.fn()\n            };\n            \n            global.WebSocket = jest.fn(() => mockWebSocket);\n            \n            component.initRealTimeUpdates = jest.fn(() => {\n                const ws = new WebSocket('ws://localhost:8000/ws/analytics');\n                ws.onmessage = (event) => {\n                    const data = JSON.parse(event.data);\n                    component.updateMetrics(data);\n                };\n                return ws;\n            });\n            \n            component.updateMetrics = jest.fn((data) => {\n                if (data.type === 'system_metrics') {\n                    component.metrics.systemMetrics.cpu.push({\n                        timestamp: data.timestamp,\n                        value: data.cpu\n                    });\n                    component.updateCharts();\n                }\n            });\n            \n            const ws = component.initRealTimeUpdates();\n            expect(WebSocket).toHaveBeenCalledWith('ws://localhost:8000/ws/analytics');\n            \n            // Simulate incoming data\n            const mockEvent = {\n                data: JSON.stringify({\n                    type: 'system_metrics',\n                    timestamp: '2024-01-01T12:00:00Z',\n                    cpu: 48,\n                    memory: 70\n                })\n            };\n            \n            ws.onmessage(mockEvent);\n            \n            expect(component.updateMetrics).toHaveBeenCalledWith({\n                type: 'system_metrics',\n                timestamp: '2024-01-01T12:00:00Z',\n                cpu: 48,\n                memory: 70\n            });\n        });\n    });\n    \n    describe('Filtering and Aggregation', () => {\n        test('should filter metrics by selected types', () => {\n            component.selectedMetrics = ['cpu', 'memory'];\n            \n            component.getFilteredMetrics = jest.fn(() => {\n                const allMetrics = component.metrics.systemMetrics;\n                const filtered = {};\n                \n                component.selectedMetrics.forEach(metric => {\n                    if (allMetrics[metric]) {\n                        filtered[metric] = allMetrics[metric];\n                    }\n                });\n                \n                return filtered;\n            });\n            \n            component.metrics.systemMetrics = {\n                cpu: [{ value: 45 }],\n                memory: [{ value: 67 }],\n                disk: [{ value: 80 }],\n                gpu: [{ value: 30 }]\n            };\n            \n            const filtered = component.getFilteredMetrics();\n            \n            expect(filtered).toHaveProperty('cpu');\n            expect(filtered).toHaveProperty('memory');\n            expect(filtered).not.toHaveProperty('disk');\n            expect(filtered).not.toHaveProperty('gpu');\n        });\n        \n        test('should aggregate data by time intervals', () => {\n            const rawData = [\n                { timestamp: '2024-01-01T10:00:00Z', value: 45 },\n                { timestamp: '2024-01-01T10:15:00Z', value: 50 },\n                { timestamp: '2024-01-01T10:30:00Z', value: 55 },\n                { timestamp: '2024-01-01T10:45:00Z', value: 48 }\n            ];\n            \n            component.aggregateByHour = jest.fn((data) => {\n                const grouped = {};\n                \n                data.forEach(point => {\n                    const hour = point.timestamp.substring(0, 13); // YYYY-MM-DDTHH\n                    if (!grouped[hour]) {\n                        grouped[hour] = [];\n                    }\n                    grouped[hour].push(point.value);\n                });\n                \n                return Object.entries(grouped).map(([hour, values]) => ({\n                    timestamp: hour + ':00:00Z',\n                    value: values.reduce((sum, val) => sum + val, 0) / values.length\n                }));\n            });\n            \n            const aggregated = component.aggregateByHour(rawData);\n            \n            expect(aggregated).toHaveLength(1);\n            expect(aggregated[0].value).toBe(49.5);\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}