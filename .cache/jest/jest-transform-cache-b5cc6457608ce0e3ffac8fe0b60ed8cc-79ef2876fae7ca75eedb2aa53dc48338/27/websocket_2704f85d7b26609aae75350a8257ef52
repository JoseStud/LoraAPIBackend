648cc1f7a6fabd5ab87d81bf57d660ff
/**
 * Generation Studio - WebSocket Operations Module
 * 
 * Handles real-time communication via WebSocket connections.
 */

/**
 * WebSocket management for real-time generation updates
 */
const generationWebSocket = {
  /**
   * Initializes WebSocket connection
   */
  init(callbacks = {}) {
    const {
      onOpen = () => {},
      onMessage = () => {},
      onClose = () => {},
      onError = () => {},
      onReconnect = () => {}
    } = callbacks;
    try {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/ws/generation`;
      const websocket = new WebSocket(wsUrl);
      websocket.onopen = event => {
        this.log('WebSocket connected for generation updates');
        onOpen(event);
      };
      websocket.onmessage = event => {
        try {
          const data = JSON.parse(event.data);
          this.handleMessage(data, onMessage);
        } catch (error) {
          this.log('Failed to parse WebSocket message:', error);
        }
      };
      websocket.onclose = event => {
        this.log('WebSocket disconnected, attempting reconnection...');
        onClose(event);

        // Attempt reconnection after delay
        setTimeout(() => {
          this.log('Attempting WebSocket reconnection...');
          onReconnect();
        }, 5000);
      };
      websocket.onerror = error => {
        this.log('WebSocket error:', error);
        onError(error);
      };
      return websocket;
    } catch (error) {
      this.log('Failed to initialize WebSocket:', error);
      onError(error);
      return null;
    }
  },
  /**
   * Handles incoming WebSocket messages
   */
  handleMessage(data, callback) {
    if (!data || typeof data !== 'object') {
      this.log('Invalid WebSocket message format:', data);
      return;
    }
    const messageInfo = this.parseMessage(data);
    if (messageInfo.isValid) {
      callback(messageInfo);
    } else {
      this.log('Unknown WebSocket message type:', data.type);
    }
  },
  /**
   * Parses and validates WebSocket messages
   */
  parseMessage(data) {
    // Accept either a JSON string (from tests) or an already-parsed object
    let parsed = data;
    if (typeof data === 'string') {
      try {
        parsed = JSON.parse(data);
      } catch (e) {
        return {
          type: null,
          isValid: false,
          payload: null
        };
      }
    }

    // Support messages that may be wrapped in a `payload` envelope
    const envelope = parsed.payload && typeof parsed.payload === 'object' ? parsed.payload : parsed;
    const msgType = parsed?.type || envelope?.type || null;
    const messageInfo = {
      type: msgType,
      isValid: false,
      payload: null
    };
    switch (msgType) {
      case 'generation_progress':
      case 'progress':
        // backwards-compatible alias used in some tests/clients
        if (this.validateProgressMessage(envelope)) {
          messageInfo.isValid = true;
          messageInfo.payload = {
            jobId: envelope.job_id || envelope.jobId,
            progress: envelope.progress,
            status: envelope.status,
            currentStep: envelope.current_step || envelope.currentStep,
            totalSteps: envelope.total_steps || envelope.totalSteps,
            eta: envelope.eta,
            timestamp: envelope.timestamp || Date.now()
          };
        }
        break;
      case 'generation_complete':
      case 'complete':
        if (this.validateCompleteMessage(envelope)) {
          messageInfo.isValid = true;
          messageInfo.payload = {
            jobId: envelope.job_id || envelope.jobId,
            resultId: envelope.result_id || envelope.resultId,
            prompt: envelope.prompt,
            negativePrompt: envelope.negative_prompt || envelope.negativePrompt,
            imageUrl: envelope.image_url || envelope.imageUrl,
            thumbnailUrl: envelope.thumbnail_url || envelope.thumbnailUrl,
            width: envelope.width,
            height: envelope.height,
            steps: envelope.steps,
            cfgScale: envelope.cfg_scale || envelope.cfgScale,
            seed: envelope.seed,
            batchCount: envelope.batch_count || envelope.batchCount,
            batchSize: envelope.batch_size || envelope.batchSize,
            generationTime: envelope.generation_time || envelope.generationTime,
            fileSize: envelope.file_size || envelope.fileSize,
            modelUsed: envelope.model_used || envelope.modelUsed,
            timestamp: envelope.timestamp || Date.now()
          };
        }
        break;
      case 'generation_error':
      case 'error':
        if (this.validateErrorMessage(envelope)) {
          messageInfo.isValid = true;
          messageInfo.payload = {
            jobId: envelope.job_id || envelope.jobId,
            error: envelope.error,
            errorCode: envelope.error_code || envelope.errorCode,
            details: envelope.details,
            timestamp: envelope.timestamp || Date.now()
          };
        }
        break;
      case 'queue_update':
      case 'queue':
        if (this.validateQueueMessage(envelope)) {
          messageInfo.isValid = true;
          messageInfo.payload = {
            jobs: envelope.jobs,
            queueLength: envelope.queue_length || envelope.queueLength,
            processingCount: envelope.processing_count || envelope.processingCount,
            timestamp: envelope.timestamp || Date.now()
          };
        }
        break;
      case 'system_status':
      case 'status':
        if (this.validateSystemMessage(envelope)) {
          messageInfo.isValid = true;
          messageInfo.payload = {
            status: envelope.status,
            memoryUsage: envelope.memory_usage || envelope.memoryUsage,
            gpuUsage: envelope.gpu_usage || envelope.gpuUsage,
            queueLength: envelope.queue_length || envelope.queueLength,
            activeWorkers: envelope.active_workers || envelope.activeWorkers,
            timestamp: envelope.timestamp || Date.now()
          };
        }
        break;
      default:
        this.log('Unknown message type:', msgType);
    }
    return messageInfo;
  },
  /**
   * Validates progress message format
   */
  validateProgressMessage(data) {
    return (data.job_id || data.jobId) && (typeof data.progress === 'number' || !isNaN(Number(data.progress))) && Number(data.progress) >= 0 && Number(data.progress) <= 100;
  },
  /**
   * Validates completion message format
   */
  validateCompleteMessage(data) {
    return (data.job_id || data.jobId) && (data.result_id || data.resultId) && (data.image_url || data.imageUrl) && data.prompt;
  },
  /**
   * Validates error message format
   */
  validateErrorMessage(data) {
    return (data.job_id || data.jobId) && data.error;
  },
  /**
   * Validates queue message format
   */
  validateQueueMessage(data) {
    return Array.isArray(data.jobs) && typeof (data.queue_length || data.queueLength) === 'number';
  },
  /**
   * Validates system status message format
   */
  validateSystemMessage(data) {
    return data.status && typeof data.status === 'object';
  },
  /**
   * Sends a message through WebSocket
   */
  send(websocket, messageType, payload) {
    if (!websocket || websocket.readyState !== WebSocket.OPEN) {
      this.log('WebSocket not available for sending message');
      return false;
    }
    try {
      const message = {
        type: messageType,
        timestamp: Date.now(),
        ...payload
      };
      websocket.send(JSON.stringify(message));
      return true;
    } catch (error) {
      this.log('Failed to send WebSocket message:', error);
      return false;
    }
  },
  /**
   * Requests job status update
   */
  requestJobStatus(websocket, jobId) {
    return this.send(websocket, 'request_job_status', {
      job_id: jobId
    });
  },
  /**
   * Requests queue status
   */
  requestQueueStatus(websocket) {
    return this.send(websocket, 'request_queue_status', {});
  },
  /**
   * Requests system status
   */
  requestSystemStatus(websocket) {
    return this.send(websocket, 'request_system_status', {});
  },
  /**
   * Subscribes to job updates
   */
  subscribeToJob(websocket, jobId) {
    return this.send(websocket, 'subscribe_job', {
      job_id: jobId
    });
  },
  /**
   * Unsubscribes from job updates
   */
  unsubscribeFromJob(websocket, jobId) {
    return this.send(websocket, 'unsubscribe_job', {
      job_id: jobId
    });
  },
  /**
   * Gets WebSocket connection status
   */
  getConnectionStatus(websocket) {
    if (!websocket) {
      return {
        status: 'not_initialized',
        ready: false
      };
    }
    const statusMap = {
      [WebSocket.CONNECTING]: {
        status: 'connecting',
        ready: false
      },
      [WebSocket.OPEN]: {
        status: 'connected',
        ready: true
      },
      [WebSocket.CLOSING]: {
        status: 'closing',
        ready: false
      },
      [WebSocket.CLOSED]: {
        status: 'closed',
        ready: false
      }
    };
    return statusMap[websocket.readyState] || {
      status: 'unknown',
      ready: false
    };
  },
  /**
   * Closes WebSocket connection gracefully
   */
  close(websocket) {
    if (websocket && websocket.readyState === WebSocket.OPEN) {
      websocket.close(1000, 'Component cleanup');
      return true;
    }
    return false;
  },
  /**
   * Creates WebSocket connection manager
   */
  createConnectionManager(callbacks = {}) {
    let websocket = null;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    let reconnectDelay = 1000; // Start with 1 second
    let isDestroyed = false;
    const connect = () => {
      if (isDestroyed) return null;
      websocket = this.init({
        onOpen: event => {
          reconnectAttempts = 0;
          reconnectDelay = 1000;
          if (callbacks.onOpen) callbacks.onOpen(event);
        },
        onMessage: messageInfo => {
          if (callbacks.onMessage) callbacks.onMessage(messageInfo);
        },
        onClose: event => {
          if (callbacks.onClose) callbacks.onClose(event);
        },
        onError: error => {
          if (callbacks.onError) callbacks.onError(error);
        },
        onReconnect: () => {
          if (isDestroyed) return;
          if (reconnectAttempts < maxReconnectAttempts) {
            reconnectAttempts++;
            reconnectDelay = Math.min(reconnectDelay * 2, 30000); // Cap at 30 seconds

            setTimeout(() => {
              if (!isDestroyed) {
                this.log(`Reconnection attempt ${reconnectAttempts}/${maxReconnectAttempts}`);
                connect();
              }
            }, reconnectDelay);
          } else {
            this.log('Max reconnection attempts reached');
            if (callbacks.onMaxReconnectAttempts) {
              callbacks.onMaxReconnectAttempts();
            }
          }
        }
      });
      return websocket;
    };
    return {
      connect,
      // Primary send method
      send: (messageType, payload) => this.send(websocket, messageType, payload),
      // Backwards-compatible alias
      sendMessage: (messageType, payload) => this.send(websocket, messageType, payload),
      getStatus: () => this.getConnectionStatus(websocket),
      // Primary close method
      close: () => this.close(websocket),
      // Backwards-compatible alias
      disconnect: () => this.close(websocket),
      destroy: () => {
        isDestroyed = true;
        this.close(websocket);
        websocket = null;
      },
      getWebSocket: () => websocket,
      isConnected: () => {
        const status = this.getConnectionStatus(websocket);
        return status.ready;
      }
    };
  },
  /**
   * Logging utility
   */
  log(message, ...args) {
    if (window.DevLogger) {
      window.DevLogger.info(`[GenerationWebSocket] ${message}`, ...args);
    } else {
      // eslint-disable-next-line no-console
      console.log(`[GenerationWebSocket] ${message}`, ...args);
    }
  }
};

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    generationWebSocket
  };
} else if (typeof window !== 'undefined') {
  window.generationWebSocket = generationWebSocket;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,