{"version":3,"names":["generationWebSocket","init","callbacks","onOpen","onMessage","onClose","onError","onReconnect","protocol","window","location","wsUrl","host","websocket","WebSocket","onopen","event","log","onmessage","data","JSON","parse","handleMessage","error","onclose","setTimeout","onerror","callback","messageInfo","parseMessage","isValid","type","parsed","e","payload","envelope","msgType","validateProgressMessage","jobId","job_id","progress","status","currentStep","current_step","totalSteps","total_steps","eta","timestamp","Date","now","validateCompleteMessage","resultId","result_id","prompt","negativePrompt","negative_prompt","imageUrl","image_url","thumbnailUrl","thumbnail_url","width","height","steps","cfgScale","cfg_scale","seed","batchCount","batch_count","batchSize","batch_size","generationTime","generation_time","fileSize","file_size","modelUsed","model_used","validateErrorMessage","errorCode","error_code","details","validateQueueMessage","jobs","queueLength","queue_length","processingCount","processing_count","validateSystemMessage","memoryUsage","memory_usage","gpuUsage","gpu_usage","activeWorkers","active_workers","isNaN","Number","Array","isArray","send","messageType","readyState","OPEN","message","stringify","requestJobStatus","requestQueueStatus","requestSystemStatus","subscribeToJob","unsubscribeFromJob","getConnectionStatus","ready","statusMap","CONNECTING","CLOSING","CLOSED","close","createConnectionManager","reconnectAttempts","maxReconnectAttempts","reconnectDelay","isDestroyed","connect","Math","min","onMaxReconnectAttempts","sendMessage","getStatus","disconnect","destroy","getWebSocket","isConnected","args","DevLogger","info","console","module","exports"],"sources":["websocket.js"],"sourcesContent":["/**\n * Generation Studio - WebSocket Operations Module\n * \n * Handles real-time communication via WebSocket connections.\n */\n\n/**\n * WebSocket management for real-time generation updates\n */\nconst generationWebSocket = {\n    /**\n     * Initializes WebSocket connection\n     */\n    init(callbacks = {}) {\n        const {\n            onOpen = () => {},\n            onMessage = () => {},\n            onClose = () => {},\n            onError = () => {},\n            onReconnect = () => {}\n        } = callbacks;\n        \n        try {\n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const wsUrl = `${protocol}//${window.location.host}/ws/generation`;\n            \n            const websocket = new WebSocket(wsUrl);\n            \n            websocket.onopen = (event) => {\n                this.log('WebSocket connected for generation updates');\n                onOpen(event);\n            };\n            \n            websocket.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    this.handleMessage(data, onMessage);\n                } catch (error) {\n                    this.log('Failed to parse WebSocket message:', error);\n                }\n            };\n            \n            websocket.onclose = (event) => {\n                this.log('WebSocket disconnected, attempting reconnection...');\n                onClose(event);\n                \n                // Attempt reconnection after delay\n                setTimeout(() => {\n                    this.log('Attempting WebSocket reconnection...');\n                    onReconnect();\n                }, 5000);\n            };\n            \n            websocket.onerror = (error) => {\n                this.log('WebSocket error:', error);\n                onError(error);\n            };\n            \n            return websocket;\n        } catch (error) {\n            this.log('Failed to initialize WebSocket:', error);\n            onError(error);\n            return null;\n        }\n    },\n    \n    /**\n     * Handles incoming WebSocket messages\n     */\n    handleMessage(data, callback) {\n        if (!data || typeof data !== 'object') {\n            this.log('Invalid WebSocket message format:', data);\n            return;\n        }\n        \n        const messageInfo = this.parseMessage(data);\n        \n        if (messageInfo.isValid) {\n            callback(messageInfo);\n        } else {\n            this.log('Unknown WebSocket message type:', data.type);\n        }\n    },\n    \n    /**\n     * Parses and validates WebSocket messages\n     */\n    parseMessage(data) {\n        // Accept either a JSON string (from tests) or an already-parsed object\n        let parsed = data;\n        if (typeof data === 'string') {\n            try {\n                parsed = JSON.parse(data);\n            } catch (e) {\n                return { type: null, isValid: false, payload: null };\n            }\n        }\n\n        // Support messages that may be wrapped in a `payload` envelope\n        const envelope = parsed.payload && typeof parsed.payload === 'object' ? parsed.payload : parsed;\n\n        const msgType = parsed?.type || envelope?.type || null;\n\n        const messageInfo = {\n            type: msgType,\n            isValid: false,\n            payload: null\n        };\n\n    switch (msgType) {\n            case 'generation_progress':\n            case 'progress': // backwards-compatible alias used in some tests/clients\n                if (this.validateProgressMessage(envelope)) {\n                    messageInfo.isValid = true;\n                    messageInfo.payload = {\n                        jobId: envelope.job_id || envelope.jobId,\n                        progress: envelope.progress,\n                        status: envelope.status,\n                        currentStep: envelope.current_step || envelope.currentStep,\n                        totalSteps: envelope.total_steps || envelope.totalSteps,\n                        eta: envelope.eta,\n                        timestamp: envelope.timestamp || Date.now()\n                    };\n                }\n                break;\n                \n            case 'generation_complete':\n            case 'complete':\n                if (this.validateCompleteMessage(envelope)) {\n                    messageInfo.isValid = true;\n                    messageInfo.payload = {\n                        jobId: envelope.job_id || envelope.jobId,\n                        resultId: envelope.result_id || envelope.resultId,\n                        prompt: envelope.prompt,\n                        negativePrompt: envelope.negative_prompt || envelope.negativePrompt,\n                        imageUrl: envelope.image_url || envelope.imageUrl,\n                        thumbnailUrl: envelope.thumbnail_url || envelope.thumbnailUrl,\n                        width: envelope.width,\n                        height: envelope.height,\n                        steps: envelope.steps,\n                        cfgScale: envelope.cfg_scale || envelope.cfgScale,\n                        seed: envelope.seed,\n                        batchCount: envelope.batch_count || envelope.batchCount,\n                        batchSize: envelope.batch_size || envelope.batchSize,\n                        generationTime: envelope.generation_time || envelope.generationTime,\n                        fileSize: envelope.file_size || envelope.fileSize,\n                        modelUsed: envelope.model_used || envelope.modelUsed,\n                        timestamp: envelope.timestamp || Date.now()\n                    };\n                }\n                break;\n                \n            case 'generation_error':\n            case 'error':\n                if (this.validateErrorMessage(envelope)) {\n                    messageInfo.isValid = true;\n                    messageInfo.payload = {\n                        jobId: envelope.job_id || envelope.jobId,\n                        error: envelope.error,\n                        errorCode: envelope.error_code || envelope.errorCode,\n                        details: envelope.details,\n                        timestamp: envelope.timestamp || Date.now()\n                    };\n                }\n                break;\n                \n            case 'queue_update':\n            case 'queue':\n                if (this.validateQueueMessage(envelope)) {\n                    messageInfo.isValid = true;\n                    messageInfo.payload = {\n                        jobs: envelope.jobs,\n                        queueLength: envelope.queue_length || envelope.queueLength,\n                        processingCount: envelope.processing_count || envelope.processingCount,\n                        timestamp: envelope.timestamp || Date.now()\n                    };\n                }\n                break;\n                \n            case 'system_status':\n            case 'status':\n                if (this.validateSystemMessage(envelope)) {\n                    messageInfo.isValid = true;\n                    messageInfo.payload = {\n                        status: envelope.status,\n                        memoryUsage: envelope.memory_usage || envelope.memoryUsage,\n                        gpuUsage: envelope.gpu_usage || envelope.gpuUsage,\n                        queueLength: envelope.queue_length || envelope.queueLength,\n                        activeWorkers: envelope.active_workers || envelope.activeWorkers,\n                        timestamp: envelope.timestamp || Date.now()\n                    };\n                }\n                break;\n                \n            default:\n                this.log('Unknown message type:', msgType);\n        }\n        \n    return messageInfo;\n    },\n    \n    /**\n     * Validates progress message format\n     */\n    validateProgressMessage(data) {\n    return (data.job_id || data.jobId) && \n           (typeof data.progress === 'number' || (!isNaN(Number(data.progress)))) && \n           Number(data.progress) >= 0 && \n           Number(data.progress) <= 100;\n    },\n    \n    /**\n     * Validates completion message format\n     */\n    validateCompleteMessage(data) {\n    return (data.job_id || data.jobId) && \n           (data.result_id || data.resultId) && \n           (data.image_url || data.imageUrl) &&\n           data.prompt;\n    },\n    \n    /**\n     * Validates error message format\n     */\n    validateErrorMessage(data) {\n    return (data.job_id || data.jobId) && data.error;\n    },\n    \n    /**\n     * Validates queue message format\n     */\n    validateQueueMessage(data) {\n    return Array.isArray(data.jobs) && \n           typeof (data.queue_length || data.queueLength) === 'number';\n    },\n    \n    /**\n     * Validates system status message format\n     */\n    validateSystemMessage(data) {\n    return data.status && typeof data.status === 'object';\n    },\n    \n    /**\n     * Sends a message through WebSocket\n     */\n    send(websocket, messageType, payload) {\n        if (!websocket || websocket.readyState !== WebSocket.OPEN) {\n            this.log('WebSocket not available for sending message');\n            return false;\n        }\n        \n        try {\n            const message = {\n                type: messageType,\n                timestamp: Date.now(),\n                ...payload\n            };\n            \n            websocket.send(JSON.stringify(message));\n            return true;\n        } catch (error) {\n            this.log('Failed to send WebSocket message:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Requests job status update\n     */\n    requestJobStatus(websocket, jobId) {\n        return this.send(websocket, 'request_job_status', { job_id: jobId });\n    },\n    \n    /**\n     * Requests queue status\n     */\n    requestQueueStatus(websocket) {\n        return this.send(websocket, 'request_queue_status', {});\n    },\n    \n    /**\n     * Requests system status\n     */\n    requestSystemStatus(websocket) {\n        return this.send(websocket, 'request_system_status', {});\n    },\n    \n    /**\n     * Subscribes to job updates\n     */\n    subscribeToJob(websocket, jobId) {\n        return this.send(websocket, 'subscribe_job', { job_id: jobId });\n    },\n    \n    /**\n     * Unsubscribes from job updates\n     */\n    unsubscribeFromJob(websocket, jobId) {\n        return this.send(websocket, 'unsubscribe_job', { job_id: jobId });\n    },\n    \n    /**\n     * Gets WebSocket connection status\n     */\n    getConnectionStatus(websocket) {\n        if (!websocket) {\n            return { status: 'not_initialized', ready: false };\n        }\n        \n        const statusMap = {\n            [WebSocket.CONNECTING]: { status: 'connecting', ready: false },\n            [WebSocket.OPEN]: { status: 'connected', ready: true },\n            [WebSocket.CLOSING]: { status: 'closing', ready: false },\n            [WebSocket.CLOSED]: { status: 'closed', ready: false }\n        };\n        \n        return statusMap[websocket.readyState] || { status: 'unknown', ready: false };\n    },\n    \n    /**\n     * Closes WebSocket connection gracefully\n     */\n    close(websocket) {\n        if (websocket && websocket.readyState === WebSocket.OPEN) {\n            websocket.close(1000, 'Component cleanup');\n            return true;\n        }\n        return false;\n    },\n    \n    /**\n     * Creates WebSocket connection manager\n     */\n    createConnectionManager(callbacks = {}) {\n        let websocket = null;\n        let reconnectAttempts = 0;\n        const maxReconnectAttempts = 5;\n        let reconnectDelay = 1000; // Start with 1 second\n        let isDestroyed = false;\n        \n        const connect = () => {\n            if (isDestroyed) return null;\n            \n            websocket = this.init({\n                onOpen: (event) => {\n                    reconnectAttempts = 0;\n                    reconnectDelay = 1000;\n                    if (callbacks.onOpen) callbacks.onOpen(event);\n                },\n                \n                onMessage: (messageInfo) => {\n                    if (callbacks.onMessage) callbacks.onMessage(messageInfo);\n                },\n                \n                onClose: (event) => {\n                    if (callbacks.onClose) callbacks.onClose(event);\n                },\n                \n                onError: (error) => {\n                    if (callbacks.onError) callbacks.onError(error);\n                },\n                \n                onReconnect: () => {\n                    if (isDestroyed) return;\n                    \n                    if (reconnectAttempts < maxReconnectAttempts) {\n                        reconnectAttempts++;\n                        reconnectDelay = Math.min(reconnectDelay * 2, 30000); // Cap at 30 seconds\n                        \n                        setTimeout(() => {\n                            if (!isDestroyed) {\n                                this.log(`Reconnection attempt ${reconnectAttempts}/${maxReconnectAttempts}`);\n                                connect();\n                            }\n                        }, reconnectDelay);\n                    } else {\n                        this.log('Max reconnection attempts reached');\n                        if (callbacks.onMaxReconnectAttempts) {\n                            callbacks.onMaxReconnectAttempts();\n                        }\n                    }\n                }\n            });\n            \n            return websocket;\n        };\n        \n        return {\n            connect,\n            // Primary send method\n            send: (messageType, payload) => this.send(websocket, messageType, payload),\n            // Backwards-compatible alias\n            sendMessage: (messageType, payload) => this.send(websocket, messageType, payload),\n            getStatus: () => this.getConnectionStatus(websocket),\n            // Primary close method\n            close: () => this.close(websocket),\n            // Backwards-compatible alias\n            disconnect: () => this.close(websocket),\n            destroy: () => {\n                isDestroyed = true;\n                this.close(websocket);\n                websocket = null;\n            },\n            getWebSocket: () => websocket,\n            isConnected: () => {\n                const status = this.getConnectionStatus(websocket);\n                return status.ready;\n            }\n        };\n    },\n    \n    /**\n     * Logging utility\n     */\n    log(message, ...args) {\n        if (window.DevLogger) {\n            window.DevLogger.info(`[GenerationWebSocket] ${message}`, ...args);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(`[GenerationWebSocket] ${message}`, ...args);\n        }\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { generationWebSocket };\n} else if (typeof window !== 'undefined') {\n    window.generationWebSocket = generationWebSocket;\n}\n"],"mappings":"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","ignoreList":[]}