f35e4cbc236f370eb3329a41e8d0c1b7
/**
 * Unit test for lora selection event mapping
 */

/** @jest-environment jsdom */

const fs = require('fs');
const path = require('path');
// Polyfill TextEncoder/TextDecoder for jsdom in some Node versions
if (typeof global.TextEncoder === 'undefined') {
  const {
    TextEncoder,
    TextDecoder
  } = require('util');
  global.TextEncoder = TextEncoder;
  global.TextDecoder = TextDecoder;
}

// Load loraGallery implementation from template file (extract function body)
const templatePath = path.resolve(__dirname, '../../app/frontend/templates/pages/loras.html');
const template = fs.readFileSync(templatePath, 'utf8');

// Extract the loraGallery function definition from the template
const fnMatch = template.match(/function loraGallery\s*\(\)\s*\{([\s\S]*?)\n\}\n/);
let loraGalleryFnSource = null;
if (fnMatch) {
  loraGalleryFnSource = fnMatch[0];
} else {
  throw new Error('Could not extract loraGallery function from template');
}

// Create a sandboxed function and evaluate it
const {
  JSDOM
} = require('jsdom');
function setupDom() {
  const dom = new JSDOM(`<!doctype html><html><body><div id="lora-root"></div></body></html>`, {
    runScripts: 'outside-only'
  });
  global.document = dom.window.document;
  global.window = dom.window;
  global.HTMLElement = dom.window.HTMLElement;
}
beforeEach(() => {
  setupDom();
});
test('loraGallery updates selectedLoras on lora-selected / lora-deselected events', () => {
  // Evaluate the function in the JSDOM window context
  const vm = new Function('window', 'document', `${loraGalleryFnSource}; return loraGallery;`);
  const loraGallery = vm(global.window, global.document)();

  // Attach to a dummy element to emulate Alpine.$data semantics (not needed here)
  expect(Array.isArray(loraGallery.selectedLoras)).toBe(true);

  // Dispatch lora-selected event
  const selectEvent = new global.window.CustomEvent('lora-selected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(selectEvent);
  // Allow any synchronous handlers to run
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(true);

  // Dispatch lora-deselected
  const deselectEvent = new global.window.CustomEvent('lora-deselected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(deselectEvent);
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(false);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZ2xvYmFsIiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciIsInRlbXBsYXRlUGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJ0ZW1wbGF0ZSIsInJlYWRGaWxlU3luYyIsImZuTWF0Y2giLCJtYXRjaCIsImxvcmFHYWxsZXJ5Rm5Tb3VyY2UiLCJFcnJvciIsIkpTRE9NIiwic2V0dXBEb20iLCJkb20iLCJydW5TY3JpcHRzIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJIVE1MRWxlbWVudCIsImJlZm9yZUVhY2giLCJ0ZXN0Iiwidm0iLCJGdW5jdGlvbiIsImxvcmFHYWxsZXJ5IiwiZXhwZWN0IiwiQXJyYXkiLCJpc0FycmF5Iiwic2VsZWN0ZWRMb3JhcyIsInRvQmUiLCJzZWxlY3RFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiaWQiLCJkaXNwYXRjaEV2ZW50IiwiaW5jbHVkZXMiLCJkZXNlbGVjdEV2ZW50Il0sInNvdXJjZXMiOlsibG9yYS1zZWxlY3Rpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuaXQgdGVzdCBmb3IgbG9yYSBzZWxlY3Rpb24gZXZlbnQgbWFwcGluZ1xuICovXG5cbi8qKiBAamVzdC1lbnZpcm9ubWVudCBqc2RvbSAqL1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuLy8gUG9seWZpbGwgVGV4dEVuY29kZXIvVGV4dERlY29kZXIgZm9yIGpzZG9tIGluIHNvbWUgTm9kZSB2ZXJzaW9uc1xuaWYgKHR5cGVvZiBnbG9iYWwuVGV4dEVuY29kZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gIGNvbnN0IHsgVGV4dEVuY29kZXIsIFRleHREZWNvZGVyIH0gPSByZXF1aXJlKCd1dGlsJyk7XG4gIGdsb2JhbC5UZXh0RW5jb2RlciA9IFRleHRFbmNvZGVyO1xuICBnbG9iYWwuVGV4dERlY29kZXIgPSBUZXh0RGVjb2Rlcjtcbn1cblxuLy8gTG9hZCBsb3JhR2FsbGVyeSBpbXBsZW1lbnRhdGlvbiBmcm9tIHRlbXBsYXRlIGZpbGUgKGV4dHJhY3QgZnVuY3Rpb24gYm9keSlcbmNvbnN0IHRlbXBsYXRlUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi9hcHAvZnJvbnRlbmQvdGVtcGxhdGVzL3BhZ2VzL2xvcmFzLmh0bWwnKTtcbmNvbnN0IHRlbXBsYXRlID0gZnMucmVhZEZpbGVTeW5jKHRlbXBsYXRlUGF0aCwgJ3V0ZjgnKTtcblxuLy8gRXh0cmFjdCB0aGUgbG9yYUdhbGxlcnkgZnVuY3Rpb24gZGVmaW5pdGlvbiBmcm9tIHRoZSB0ZW1wbGF0ZVxuY29uc3QgZm5NYXRjaCA9IHRlbXBsYXRlLm1hdGNoKC9mdW5jdGlvbiBsb3JhR2FsbGVyeVxccypcXChcXClcXHMqXFx7KFtcXHNcXFNdKj8pXFxuXFx9XFxuLyk7XG5sZXQgbG9yYUdhbGxlcnlGblNvdXJjZSA9IG51bGw7XG5pZiAoZm5NYXRjaCkge1xuICBsb3JhR2FsbGVyeUZuU291cmNlID0gZm5NYXRjaFswXTtcbn0gZWxzZSB7XG4gIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGV4dHJhY3QgbG9yYUdhbGxlcnkgZnVuY3Rpb24gZnJvbSB0ZW1wbGF0ZScpO1xufVxuXG4vLyBDcmVhdGUgYSBzYW5kYm94ZWQgZnVuY3Rpb24gYW5kIGV2YWx1YXRlIGl0XG5jb25zdCB7IEpTRE9NIH0gPSByZXF1aXJlKCdqc2RvbScpO1xuXG5mdW5jdGlvbiBzZXR1cERvbSgpIHtcbiAgY29uc3QgZG9tID0gbmV3IEpTRE9NKGA8IWRvY3R5cGUgaHRtbD48aHRtbD48Ym9keT48ZGl2IGlkPVwibG9yYS1yb290XCI+PC9kaXY+PC9ib2R5PjwvaHRtbD5gLCB7IHJ1blNjcmlwdHM6ICdvdXRzaWRlLW9ubHknIH0pO1xuICBnbG9iYWwuZG9jdW1lbnQgPSBkb20ud2luZG93LmRvY3VtZW50O1xuICBnbG9iYWwud2luZG93ID0gZG9tLndpbmRvdztcbiAgZ2xvYmFsLkhUTUxFbGVtZW50ID0gZG9tLndpbmRvdy5IVE1MRWxlbWVudDtcbn1cblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gIHNldHVwRG9tKCk7XG59KTtcblxudGVzdCgnbG9yYUdhbGxlcnkgdXBkYXRlcyBzZWxlY3RlZExvcmFzIG9uIGxvcmEtc2VsZWN0ZWQgLyBsb3JhLWRlc2VsZWN0ZWQgZXZlbnRzJywgKCkgPT4ge1xuICAvLyBFdmFsdWF0ZSB0aGUgZnVuY3Rpb24gaW4gdGhlIEpTRE9NIHdpbmRvdyBjb250ZXh0XG4gIGNvbnN0IHZtID0gbmV3IEZ1bmN0aW9uKCd3aW5kb3cnLCAnZG9jdW1lbnQnLCBgJHtsb3JhR2FsbGVyeUZuU291cmNlfTsgcmV0dXJuIGxvcmFHYWxsZXJ5O2ApO1xuICBjb25zdCBsb3JhR2FsbGVyeSA9IHZtKGdsb2JhbC53aW5kb3csIGdsb2JhbC5kb2N1bWVudCkoKTtcblxuICAvLyBBdHRhY2ggdG8gYSBkdW1teSBlbGVtZW50IHRvIGVtdWxhdGUgQWxwaW5lLiRkYXRhIHNlbWFudGljcyAobm90IG5lZWRlZCBoZXJlKVxuICBleHBlY3QoQXJyYXkuaXNBcnJheShsb3JhR2FsbGVyeS5zZWxlY3RlZExvcmFzKSkudG9CZSh0cnVlKTtcblxuICAvLyBEaXNwYXRjaCBsb3JhLXNlbGVjdGVkIGV2ZW50XG4gIGNvbnN0IHNlbGVjdEV2ZW50ID0gbmV3IGdsb2JhbC53aW5kb3cuQ3VzdG9tRXZlbnQoJ2xvcmEtc2VsZWN0ZWQnLCB7IGRldGFpbDogeyBpZDogJ2FiYy0xJyB9IH0pO1xuICBnbG9iYWwud2luZG93LmRvY3VtZW50LmRpc3BhdGNoRXZlbnQoc2VsZWN0RXZlbnQpO1xuICAvLyBBbGxvdyBhbnkgc3luY2hyb25vdXMgaGFuZGxlcnMgdG8gcnVuXG4gIGV4cGVjdChsb3JhR2FsbGVyeS5zZWxlY3RlZExvcmFzLmluY2x1ZGVzKCdhYmMtMScpKS50b0JlKHRydWUpO1xuXG4gIC8vIERpc3BhdGNoIGxvcmEtZGVzZWxlY3RlZFxuICBjb25zdCBkZXNlbGVjdEV2ZW50ID0gbmV3IGdsb2JhbC53aW5kb3cuQ3VzdG9tRXZlbnQoJ2xvcmEtZGVzZWxlY3RlZCcsIHsgZGV0YWlsOiB7IGlkOiAnYWJjLTEnIH0gfSk7XG4gIGdsb2JhbC53aW5kb3cuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChkZXNlbGVjdEV2ZW50KTtcbiAgZXhwZWN0KGxvcmFHYWxsZXJ5LnNlbGVjdGVkTG9yYXMuaW5jbHVkZXMoJ2FiYy0xJykpLnRvQmUoZmFsc2UpO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBTSxDQUFDO0FBQzVCO0FBQ0EsSUFBSSxPQUFPRSxNQUFNLENBQUNDLFdBQVcsS0FBSyxXQUFXLEVBQUU7RUFDN0MsTUFBTTtJQUFFQSxXQUFXO0lBQUVDO0VBQVksQ0FBQyxHQUFHSixPQUFPLENBQUMsTUFBTSxDQUFDO0VBQ3BERSxNQUFNLENBQUNDLFdBQVcsR0FBR0EsV0FBVztFQUNoQ0QsTUFBTSxDQUFDRSxXQUFXLEdBQUdBLFdBQVc7QUFDbEM7O0FBRUE7QUFDQSxNQUFNQyxZQUFZLEdBQUdKLElBQUksQ0FBQ0ssT0FBTyxDQUFDQyxTQUFTLEVBQUUsK0NBQStDLENBQUM7QUFDN0YsTUFBTUMsUUFBUSxHQUFHVCxFQUFFLENBQUNVLFlBQVksQ0FBQ0osWUFBWSxFQUFFLE1BQU0sQ0FBQzs7QUFFdEQ7QUFDQSxNQUFNSyxPQUFPLEdBQUdGLFFBQVEsQ0FBQ0csS0FBSyxDQUFDLGtEQUFrRCxDQUFDO0FBQ2xGLElBQUlDLG1CQUFtQixHQUFHLElBQUk7QUFDOUIsSUFBSUYsT0FBTyxFQUFFO0VBQ1hFLG1CQUFtQixHQUFHRixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsTUFBTTtFQUNMLE1BQU0sSUFBSUcsS0FBSyxDQUFDLHNEQUFzRCxDQUFDO0FBQ3pFOztBQUVBO0FBQ0EsTUFBTTtFQUFFQztBQUFNLENBQUMsR0FBR2QsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUVsQyxTQUFTZSxRQUFRQSxDQUFBLEVBQUc7RUFDbEIsTUFBTUMsR0FBRyxHQUFHLElBQUlGLEtBQUssQ0FBQyxxRUFBcUUsRUFBRTtJQUFFRyxVQUFVLEVBQUU7RUFBZSxDQUFDLENBQUM7RUFDNUhmLE1BQU0sQ0FBQ2dCLFFBQVEsR0FBR0YsR0FBRyxDQUFDRyxNQUFNLENBQUNELFFBQVE7RUFDckNoQixNQUFNLENBQUNpQixNQUFNLEdBQUdILEdBQUcsQ0FBQ0csTUFBTTtFQUMxQmpCLE1BQU0sQ0FBQ2tCLFdBQVcsR0FBR0osR0FBRyxDQUFDRyxNQUFNLENBQUNDLFdBQVc7QUFDN0M7QUFFQUMsVUFBVSxDQUFDLE1BQU07RUFDZk4sUUFBUSxDQUFDLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRk8sSUFBSSxDQUFDLDZFQUE2RSxFQUFFLE1BQU07RUFDeEY7RUFDQSxNQUFNQyxFQUFFLEdBQUcsSUFBSUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsR0FBR1osbUJBQW1CLHVCQUF1QixDQUFDO0VBQzVGLE1BQU1hLFdBQVcsR0FBR0YsRUFBRSxDQUFDckIsTUFBTSxDQUFDaUIsTUFBTSxFQUFFakIsTUFBTSxDQUFDZ0IsUUFBUSxDQUFDLENBQUMsQ0FBQzs7RUFFeEQ7RUFDQVEsTUFBTSxDQUFDQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0gsV0FBVyxDQUFDSSxhQUFhLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDOztFQUUzRDtFQUNBLE1BQU1DLFdBQVcsR0FBRyxJQUFJN0IsTUFBTSxDQUFDaUIsTUFBTSxDQUFDYSxXQUFXLENBQUMsZUFBZSxFQUFFO0lBQUVDLE1BQU0sRUFBRTtNQUFFQyxFQUFFLEVBQUU7SUFBUTtFQUFFLENBQUMsQ0FBQztFQUMvRmhDLE1BQU0sQ0FBQ2lCLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDaUIsYUFBYSxDQUFDSixXQUFXLENBQUM7RUFDakQ7RUFDQUwsTUFBTSxDQUFDRCxXQUFXLENBQUNJLGFBQWEsQ0FBQ08sUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNOLElBQUksQ0FBQyxJQUFJLENBQUM7O0VBRTlEO0VBQ0EsTUFBTU8sYUFBYSxHQUFHLElBQUluQyxNQUFNLENBQUNpQixNQUFNLENBQUNhLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtJQUFFQyxNQUFNLEVBQUU7TUFBRUMsRUFBRSxFQUFFO0lBQVE7RUFBRSxDQUFDLENBQUM7RUFDbkdoQyxNQUFNLENBQUNpQixNQUFNLENBQUNELFFBQVEsQ0FBQ2lCLGFBQWEsQ0FBQ0UsYUFBYSxDQUFDO0VBQ25EWCxNQUFNLENBQUNELFdBQVcsQ0FBQ0ksYUFBYSxDQUFDTyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQztBQUNqRSxDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=