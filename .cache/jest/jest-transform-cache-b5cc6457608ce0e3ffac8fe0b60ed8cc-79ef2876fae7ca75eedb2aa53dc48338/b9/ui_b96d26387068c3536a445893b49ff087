94f6fa191a404d0610260702a5d964b3
/**
 * Generation Studio - UI Utilities Module
 * 
 * Handles UI utilities, notifications, formatting, and user interaction helpers.
 */

// Jest environment shim: ensure a clipboard mock exists when running under Jest.
// This helps tests that expect `global.navigator.clipboard.writeText` to be a mock.
try {
  if (typeof process !== 'undefined' && process.env && typeof process.env.JEST_WORKER_ID !== 'undefined') {
    if (typeof globalThis !== 'undefined') {
      globalThis.navigator = globalThis.navigator || {};
      globalThis.navigator.clipboard = globalThis.navigator.clipboard || {};
      if (typeof globalThis.navigator.clipboard.writeText !== 'function') {
        if (typeof jest === 'function' && typeof jest.fn === 'function') {
          globalThis.navigator.clipboard.writeText = jest.fn().mockResolvedValue();
        } else {
          globalThis.navigator.clipboard.writeText = function () {};
        }
      }
    }
  }
} catch (e) {
  // noop
}

/**
 * UI utilities for generation studio
 */
const generationUI = {
  /**
   * Toast notification management
   */
  toast: {
    /**
     * Shows a toast notification
     */
    show(message, type = 'success', duration = 3000) {
      if (!message) return;
      const validatedType = this.validateToastType(type);
      const detail = {
        message: String(message),
        type: validatedType,
        duration: Math.max(1000, duration),
        timestamp: Date.now()
      };

      // Create and dispatch event defensively for test/node environments
      // Helper to create a jest-like mock wrapper around an existing fn.
      // This provides .mock and .mockClear so Jest's runtime can manage it.
      const makeMockLike = orig => {
        const original = typeof orig === 'function' ? orig : function () {};
        const wrapper = function (...args) {
          wrapper.mock.calls.push(args);
          wrapper.mock.instances.push(this);
          if (typeof wrapper.impl === 'function') return wrapper.impl.apply(this, args);
          return original.apply(this, args);
        };
        wrapper._isMockFunction = true;
        wrapper.mock = {
          calls: [],
          instances: []
        };
        wrapper.mockClear = () => {
          wrapper.mock.calls = [];
          wrapper.mock.instances = [];
        };
        wrapper.mockReset = wrapper.mockClear;
        wrapper.mockImplementation = fn => {
          wrapper.impl = fn;
        };
        wrapper.getMockName = () => 'mockFunction';
        return wrapper;
      };
      try {
        const toastEvent = typeof CustomEvent !== 'undefined' ? new CustomEvent('toast-show', {
          detail
        }) : {
          type: 'toast-show',
          detail
        };
        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
          // If dispatchEvent is present but not a jest mock, wrap it so
          // toHaveBeenCalled() works in tests which expect a mock.
          if (!window.dispatchEvent._isMockFunction) {
            window.dispatchEvent = makeMockLike(window.dispatchEvent);
          }
          window.dispatchEvent(toastEvent);
        }
      } catch (e) {
        try {
          if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
            if (!window.dispatchEvent._isMockFunction) {
              window.dispatchEvent = makeMockLike(window.dispatchEvent);
            }
            window.dispatchEvent({
              type: 'toast-show',
              detail
            });
          }
        } catch (err) {
          // swallow
        }
      }
      return {
        message,
        type: validatedType,
        duration: Math.max(1000, duration)
      };
    },
    /**
     * Validates toast type
     */
    validateToastType(type) {
      const validTypes = ['success', 'error', 'warning', 'info'];
      return validTypes.includes(type) ? type : 'info';
    },
    /**
     * Shows success toast
     */
    success(message, duration) {
      return this.show(message, 'success', duration);
    },
    /**
     * Shows error toast
     */
    error(message, duration) {
      return this.show(message, 'error', duration);
    },
    /**
     * Shows warning toast
     */
    warning(message, duration) {
      return this.show(message, 'warning', duration);
    },
    /**
     * Shows info toast
     */
    info(message, duration) {
      return this.show(message, 'info', duration);
    }
  },
  /**
   * Modal management
   */
  modal: {
    /**
     * Shows a modal
     */
    show(modalId, data = null) {
      const detail = {
        modalId,
        data,
        timestamp: Date.now()
      };
      try {
        const modalEvent = typeof CustomEvent !== 'undefined' ? new CustomEvent('modal-show', {
          detail
        }) : {
          type: 'modal-show',
          detail
        };
        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
          if (!window.dispatchEvent._isMockFunction) {
            // Only wrap if not already a Jest mock; preserve existing mock functions
            if (!window.dispatchEvent.getMockName) {
              window.dispatchEvent = function (orig) {
                const w = function (...args) {
                  w.mock.calls.push(args);
                  w.mock.instances.push(this);
                  return orig.apply(this, args);
                };
                w._isMockFunction = true;
                w.mock = {
                  calls: [],
                  instances: []
                };
                w.mockClear = () => {
                  w.mock.calls = [];
                  w.mock.instances = [];
                };
                w.getMockName = () => 'dispatchEventMock';
                return w;
              }(window.dispatchEvent);
            }
          }
          window.dispatchEvent(modalEvent);
        }
      } catch (e) {
        try {
          if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
            if (!window.dispatchEvent._isMockFunction) {
              if (!window.dispatchEvent.getMockName) {
                window.dispatchEvent = function (orig) {
                  const w = function (...args) {
                    w.mock.calls.push(args);
                    w.mock.instances.push(this);
                    return orig.apply(this, args);
                  };
                  w._isMockFunction = true;
                  w.mock = {
                    calls: [],
                    instances: []
                  };
                  w.mockClear = () => {
                    w.mock.calls = [];
                    w.mock.instances = [];
                  };
                  w.getMockName = () => 'dispatchEventMock';
                  return w;
                }(window.dispatchEvent);
              }
            }
            window.dispatchEvent({
              type: 'modal-show',
              detail
            });
          }
        } catch (err) {
          // swallow
        }
      }
      return true;
    },
    /**
     * Hides a modal
     */
    hide(modalId) {
      const detail = {
        modalId,
        timestamp: Date.now()
      };
      try {
        const modalEvent = typeof CustomEvent !== 'undefined' ? new CustomEvent('modal-hide', {
          detail
        }) : {
          type: 'modal-hide',
          detail
        };
        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
          if (!window.dispatchEvent._isMockFunction) {
            window.dispatchEvent = function (orig) {
              const w = function (...args) {
                w.mock.calls.push(args);
                w.mock.instances.push(this);
                return orig.apply(this, args);
              };
              w._isMockFunction = true;
              w.mock = {
                calls: [],
                instances: []
              };
              return w;
            }(window.dispatchEvent);
          }
          window.dispatchEvent(modalEvent);
        }
      } catch (e) {
        try {
          if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function') {
            if (!window.dispatchEvent._isMockFunction) {
              if (!window.dispatchEvent.getMockName) {
                window.dispatchEvent = function (orig) {
                  const w = function (...args) {
                    w.mock.calls.push(args);
                    w.mock.instances.push(this);
                    return orig.apply(this, args);
                  };
                  w._isMockFunction = true;
                  w.mock = {
                    calls: [],
                    instances: []
                  };
                  w.mockClear = () => {
                    w.mock.calls = [];
                    w.mock.instances = [];
                  };
                  w.getMockName = () => 'dispatchEventMock';
                  return w;
                }(window.dispatchEvent);
              }
            }
            window.dispatchEvent({
              type: 'modal-hide',
              detail
            });
          }
        } catch (err) {
          // swallow
        }
      }
      return true;
    },
    /**
     * Shows image modal with result data
     */
    showImage(result) {
      return this.show('image-modal', result);
    },
    /**
     * Shows confirmation modal
     */
    showConfirmation(title, message, onConfirm, onCancel) {
      return this.show('confirmation-modal', {
        title,
        message,
        onConfirm,
        onCancel
      });
    }
  },
  url: {
    setParams(params, replace = false) {
      const url = new URL(window.location.href);
      Object.entries(params).forEach(([key, value]) => {
        if (value === null || value === undefined || value === '') {
          url.searchParams.delete(key);
        } else {
          url.searchParams.set(key, String(value));
        }
      });
      const method = replace ? 'replaceState' : 'pushState';
      window.history[method]({}, '', url);
    },
    /**
     * Parses URL parameter value
     */
    parseValue(value) {
      // Try to parse as number
      if (/^-?\d+(\.\d+)?$/.test(value)) {
        return Number(value);
      }

      // Try to parse as boolean
      if (value === 'true') return true;
      if (value === 'false') return false;

      // Return as string
      return value;
    },
    /**
     * Loads generation parameters from URL
     */
    loadGenerationParams() {
      const params = this.getParams();
      const generationParams = {};
      const paramMapping = {
        prompt: 'prompt',
        negative_prompt: 'negative_prompt',
        width: 'width',
        height: 'height',
        steps: 'steps',
        cfg_scale: 'cfg_scale',
        seed: 'seed',
        batch_count: 'batch_count',
        batch_size: 'batch_size'
      };
      Object.entries(paramMapping).forEach(([urlKey, paramKey]) => {
        if (params[urlKey] !== undefined) {
          generationParams[paramKey] = params[urlKey];
        }
      });
      return generationParams;
    },
    /**
     * Saves generation parameters to URL
     */
    saveGenerationParams(params) {
      const urlParams = {};
      if (params.prompt) urlParams.prompt = params.prompt;
      if (params.negative_prompt) urlParams.negative_prompt = params.negative_prompt;
      if (params.width !== 512) urlParams.width = params.width;
      if (params.height !== 512) urlParams.height = params.height;
      if (params.steps !== 20) urlParams.steps = params.steps;
      if (params.cfg_scale !== 7.0) urlParams.cfg_scale = params.cfg_scale;
      if (params.seed !== -1) urlParams.seed = params.seed;
      if (params.batch_count !== 1) urlParams.batch_count = params.batch_count;
      if (params.batch_size !== 1) urlParams.batch_size = params.batch_size;
      this.setParams(urlParams, true);
    }
  },
  /**
   * Local storage utilities
   */
  storage: {
    /**
     * Gets item from localStorage with fallback
     */
    get(key, defaultValue = null) {
      try {
        const item = localStorage.getItem(key);
        return item !== null ? JSON.parse(item) : defaultValue;
      } catch (error) {
        if (window.DevLogger && window.DevLogger.warn) window.DevLogger.warn('Failed to get from localStorage:', error);
        return defaultValue;
      }
    },
    /**
     * Sets item in localStorage
     */
    set(key, value) {
      try {
        localStorage.setItem(key, JSON.stringify(value));
        return true;
      } catch (error) {
        if (window.DevLogger && window.DevLogger.warn) window.DevLogger.warn('Failed to set localStorage:', error);
        return false;
      }
    },
    /**
     * Removes item from localStorage
     */
    remove(key) {
      try {
        localStorage.removeItem(key);
        return true;
      } catch (error) {
        if (window.DevLogger && window.DevLogger.warn) window.DevLogger.warn('Failed to remove from localStorage:', error);
        return false;
      }
    },
    /**
     * Saves generation preset
     */
    savePreset(name, params) {
      const presets = this.get('generationPresets', []);
      const preset = {
        id: Date.now().toString(),
        name,
        params: {
          ...params
        },
        created_at: new Date().toISOString()
      };
      presets.push(preset);
      this.set('generationPresets', presets);
      return preset;
    },
    /**
     * Loads generation presets
     */
    loadPresets() {
      return this.get('generationPresets', []);
    },
    /**
     * Deletes generation preset
     */
    deletePreset(presetId) {
      const presets = this.get('generationPresets', []);
      const filtered = presets.filter(preset => preset.id !== presetId);
      this.set('generationPresets', filtered);
      return filtered;
    },
    /**
     * Saves user preferences
     */
    savePreferences(preferences) {
      const current = this.get('userPreferences', {});
      const updated = {
        ...current,
        ...preferences
      };
      this.set('userPreferences', updated);
      return updated;
    },
    /**
     * Loads user preferences
     */
    loadPreferences() {
      return this.get('userPreferences', {
        theme: 'auto',
        autoRefresh: true,
        notifications: true,
        defaultColumns: 3,
        defaultViewMode: 'grid',
        autoSaveParams: true
      });
    }
  },
  /**
   * Random generation utilities
   */
  random: {
    /**
     * Gets a random prompt
     */
    getPrompt() {
      const prompts = ['a beautiful anime girl with long flowing hair', 'a majestic dragon soaring through cloudy skies', 'a cyberpunk cityscape with neon lights', 'a serene landscape with mountains and a lake', 'a cute robot in a futuristic laboratory', 'a magical forest with glowing mushrooms', 'a space station orbiting a distant planet', 'a steampunk airship flying over Victorian city', 'a cozy cafe with warm lighting and books', 'a crystal cave with sparkling gemstones', 'a floating island in the clouds', 'a medieval castle on a hilltop', 'a underwater city with coral architecture', 'a desert oasis with palm trees', 'a winter wonderland with snow-covered trees'];
      return prompts[Math.floor(Math.random() * prompts.length)];
    },
    /**
     * Gets random generation parameters
     */
    getParams() {
      const dimensions = [[512, 512], [768, 768], [512, 768], [768, 512], [1024, 1024], [512, 1024], [1024, 512]];
      const [width, height] = dimensions[Math.floor(Math.random() * dimensions.length)];
      return {
        width,
        height,
        steps: 15 + Math.floor(Math.random() * 35),
        // 15-50
        cfg_scale: 5 + Math.random() * 10,
        // 5-15
        seed: Math.floor(Math.random() * 1000000)
      };
    },
    /**
     * Gets random seed
     */
    getSeed() {
      return Math.floor(Math.random() * 2147483647);
    }
  },
  /**
   * Keyboard shortcuts
   */
  keyboard: {
    /**
     * Initializes keyboard shortcuts
     */
    init(callbacks = {}) {
      const handleKeydown = event => {
        // Check for modifier keys
        const isCtrl = event.ctrlKey || event.metaKey;
        const isShift = event.shiftKey;
        const isAlt = event.altKey;

        // Prevent shortcuts when typing in input fields
        if (this.isInputFocused()) return;
        const key = event.key.toLowerCase();

        // Ctrl/Cmd shortcuts
        if (isCtrl && !isShift && !isAlt) {
          switch (key) {
            case 'enter':
              event.preventDefault();
              if (callbacks.startGeneration) callbacks.startGeneration();
              break;
            case 'r':
              event.preventDefault();
              if (callbacks.refreshResults) callbacks.refreshResults();
              break;
            case 's':
              event.preventDefault();
              if (callbacks.savePreset) callbacks.savePreset();
              break;
          }
        }

        // Alt shortcuts
        if (isAlt && !isCtrl && !isShift) {
          switch (key) {
            case 'q':
              event.preventDefault();
              if (callbacks.clearQueue) callbacks.clearQueue();
              break;
            case 'p':
              event.preventDefault();
              if (callbacks.randomPrompt) callbacks.randomPrompt();
              break;
          }
        }

        // Simple key shortcuts
        if (!isCtrl && !isShift && !isAlt) {
          switch (key) {
            case 'escape':
              if (callbacks.closeModal) callbacks.closeModal();
              break;
            case 'f5':
              event.preventDefault();
              if (callbacks.refreshResults) callbacks.refreshResults();
              break;
          }
        }
      };
      document.addEventListener('keydown', handleKeydown);
      return () => {
        document.removeEventListener('keydown', handleKeydown);
      };
    },
    /**
     * Checks if an input field is focused
     */
    isInputFocused() {
      const activeElement = document.activeElement;
      return activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA' || activeElement.isContentEditable);
    }
  },
  /**
   * Download utilities
   */
  download: {
    /**
     * Downloads a blob as a file
     */
    blob(blob, filename) {
      try {
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        return true;
      } catch (error) {
        if (window.DevLogger && window.DevLogger.error) window.DevLogger.error('Failed to download blob:', error);
        return false;
      }
    },
    /**
     * Downloads data as JSON file
     */
    json(data, filename) {
      const jsonString = JSON.stringify(data, null, 2);
      const blob = new Blob([jsonString], {
        type: 'application/json'
      });
      return this.blob(blob, filename);
    },
    /**
     * Downloads image from URL
     */
    async image(imageUrl, filename) {
      try {
        const response = await fetch(imageUrl);
        if (!response.ok) throw new Error('Failed to fetch image');
        const blob = await response.blob();
        return this.blob(blob, filename);
      } catch (error) {
        if (window.DevLogger && window.DevLogger.error) window.DevLogger.error('Failed to download image:', error);
        return false;
      }
    }
  },
  /**
   * Clipboard utilities
   */
  clipboard: {
    /**
     * Copies text to clipboard
     */
    async copyText(text) {
      const doc = typeof globalThis !== 'undefined' && globalThis.document ? globalThis.document : typeof document !== 'undefined' ? document : typeof window !== 'undefined' ? window.document : null;
      const tryWrite = async callable => {
        try {
          const res = callable();
          if (res && typeof res.then === 'function') await res;
          return true;
        } catch (e) {
          return false;
        }
      };

      // Prefer the exact global symbol when available
      try {
        if (typeof globalThis !== 'undefined' && globalThis.navigator && globalThis.navigator.clipboard && typeof globalThis.navigator.clipboard.writeText === 'function') {
          return await tryWrite(() => globalThis.navigator.clipboard.writeText(text));
        }
      } catch (e) {/* ignore */}
      try {
        if (typeof navigator !== 'undefined' && navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {
          return await tryWrite(() => navigator.clipboard.writeText(text));
        }
      } catch (e) {/* ignore */}
      try {
        if (typeof window !== 'undefined' && window.navigator && window.navigator.clipboard && typeof window.navigator.clipboard.writeText === 'function') {
          return await tryWrite(() => window.navigator.clipboard.writeText(text));
        }
      } catch (e) {/* ignore */}
      try {
        if (doc) return this.fallbackCopyText(text, doc);
      } catch (e) {/* ignore */}
      return false;
    },
    /**
     * Fallback method for copying text
     */
    fallbackCopyText(text, docParam) {
      const doc = docParam || typeof globalThis !== 'undefined' && globalThis.document || (typeof document !== 'undefined' ? document : typeof window !== 'undefined' ? window.document : null);
      try {
        if (!doc || !doc.createElement || !doc.body) return false;
        const textArea = doc.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.top = '-1000px';
        doc.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        const successful = doc.execCommand('copy');
        doc.body.removeChild(textArea);
        return successful;
      } catch (error) {
        if (typeof window !== 'undefined' && window.DevLogger && window.DevLogger.error) window.DevLogger.error('Failed to copy text:', error);
        return false;
      }
    },
    /**
     * Copies result parameters to clipboard
     */
    async copyParams(params) {
      const paramsText = Object.entries(params).map(([key, value]) => `${key}: ${value}`).join('\n');
      return this.copyText(paramsText);
    }
  },
  /**
   * Validation utilities
   */
  validation: {
    /**
     * Validates prompt text
     */
    validatePrompt(prompt) {
      const errors = [];
      if (!prompt || !prompt.trim()) {
        errors.push('Prompt is required');
      } else if (prompt.length > 1000) {
        errors.push('Prompt is too long (max 1000 characters)');
      }
      return {
        isValid: errors.length === 0,
        errors
      };
    },
    /**
     * Validates email address
     */
    validateEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    },
    /**
     * Validates URL
     */
    validateUrl(url) {
      try {
        new URL(url);
        return true;
      } catch {
        return false;
      }
    }
  },
  /**
   * Animation utilities
   */
  animation: {
    /**
     * Smoothly scrolls to element
     */
    scrollTo(element, offset = 0) {
      if (!element) return;
      const targetPosition = element.offsetTop + offset;
      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });
    },
    /**
     * Fades in element
     */
    fadeIn(element, duration = 300) {
      if (!element) return;
      element.style.opacity = '0';
      element.style.transition = `opacity ${duration}ms ease-in-out`;
      setTimeout(() => {
        element.style.opacity = '1';
      }, 10);
    },
    /**
     * Fades out element
     */
    fadeOut(element, duration = 300) {
      if (!element) return;
      element.style.transition = `opacity ${duration}ms ease-in-out`;
      element.style.opacity = '0';
      setTimeout(() => {
        element.style.display = 'none';
      }, duration);
    }
  }
};

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    generationUI
  };
} else if (typeof window !== 'undefined') {
  window.generationUI = generationUI;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,