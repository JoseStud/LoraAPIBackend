{"version":3,"names":["cov_1z5vesxfv5","actualCoverage","generationProgress","s","updateJobProgress","job","progressData","f","b","validatedProgress","validateProgressData","updatedJob","progress","status","current_step","currentStep","total_steps","totalSteps","start_time","Date","now","eta","calculateETA","speed","calculateGenerationSpeed","end_time","generation_time","calculateTotalTime","error","last_updated","data","validated","Math","max","min","validStatuses","includes","floor","String","currentProgress","elapsed","progressPercent","estimatedTotal","remaining","endTime","formatDuration","seconds","round","minutes","remainingSeconds","hours","formatETA","etaSeconds","ceil","getProgressBarConfig","color","animated","text","config","getProcessingText","parts","push","length","join","getStatusIcon","icons","queued","processing","completed","failed","cancelled","paused","getStatusColorClass","colorClasses","isJobActive","activeStatuses","isJobCompleted","isJobFailed","getJobPriority","statusPriority","basePriority","timePriority","created_at","getTime","sortJobsByPriority","jobs","Array","isArray","sort","a","priorityA","priorityB","getProgressStatistics","total","averageProgress","estimatedTotalTime","stats","totalProgress","totalETA","forEach","createProgressEvent","previousJob","event","jobId","id","timestamp","changes","from","to","step","module","exports","window"],"sources":["progress.js"],"sourcesContent":["/**\n * Generation Studio - Progress Tracking Module\n * \n * Handles job progress updates, ETA calculations, and progress visualization.\n */\n\n/**\n * Progress tracking for generation jobs\n */\nconst generationProgress = {\n    /**\n     * Updates job progress with validation\n     */\n    updateJobProgress(job, progressData) {\n        if (!job || !progressData) {\n            return null;\n        }\n        \n        const validatedProgress = this.validateProgressData(progressData);\n        const updatedJob = { ...job };\n        \n        // Update basic progress info\n        updatedJob.progress = validatedProgress.progress;\n        updatedJob.status = validatedProgress.status;\n        updatedJob.current_step = validatedProgress.currentStep;\n        updatedJob.total_steps = validatedProgress.totalSteps || job.total_steps;\n        \n        // Handle status-specific updates\n        if (validatedProgress.status === 'processing') {\n            updatedJob.start_time = updatedJob.start_time || Date.now();\n            updatedJob.eta = this.calculateETA(updatedJob, validatedProgress.progress);\n            updatedJob.speed = this.calculateGenerationSpeed(updatedJob);\n        } else if (validatedProgress.status === 'completed') {\n            updatedJob.progress = 100;\n            updatedJob.end_time = Date.now();\n            updatedJob.generation_time = this.calculateTotalTime(updatedJob);\n            updatedJob.eta = null;\n        } else if (validatedProgress.status === 'failed' || validatedProgress.status === 'cancelled') {\n            updatedJob.end_time = Date.now();\n            updatedJob.eta = null;\n            updatedJob.error = validatedProgress.error;\n        }\n        \n        // Update timestamp\n        updatedJob.last_updated = Date.now();\n        \n        return updatedJob;\n    },\n    \n    /**\n     * Validates progress data\n     */\n    validateProgressData(data) {\n        const validated = {\n            progress: 0,\n            status: 'unknown',\n            currentStep: 0,\n            totalSteps: null,\n            error: null\n        };\n        \n        // Validate progress percentage\n        if (typeof data.progress === 'number') {\n            validated.progress = Math.max(0, Math.min(100, data.progress));\n        }\n        \n        // Validate status\n        const validStatuses = ['queued', 'processing', 'completed', 'failed', 'cancelled', 'paused'];\n        if (validStatuses.includes(data.status)) {\n            validated.status = data.status;\n        }\n        \n        // Validate current step\n        if (typeof data.currentStep === 'number' && data.currentStep >= 0) {\n            validated.currentStep = Math.floor(data.currentStep);\n        } else if (typeof data.current_step === 'number' && data.current_step >= 0) {\n            validated.currentStep = Math.floor(data.current_step);\n        }\n        \n        // Validate total steps\n        if (typeof data.totalSteps === 'number' && data.totalSteps > 0) {\n            validated.totalSteps = Math.floor(data.totalSteps);\n        } else if (typeof data.total_steps === 'number' && data.total_steps > 0) {\n            validated.totalSteps = Math.floor(data.total_steps);\n        }\n        \n        // Capture error message\n        if (data.error) {\n            validated.error = String(data.error);\n        }\n        \n        return validated;\n    },\n    \n    /**\n     * Calculates estimated time remaining (ETA)\n     */\n    calculateETA(job, currentProgress) {\n        if (!job.start_time || currentProgress <= 0) {\n            return null;\n        }\n        \n        const now = Date.now();\n        const elapsed = (now - job.start_time) / 1000; // seconds\n        \n        if (elapsed < 5) {\n            // Not enough data for reliable ETA\n            return null;\n        }\n        \n        const progressPercent = currentProgress / 100;\n        const estimatedTotal = elapsed / progressPercent;\n        const remaining = estimatedTotal - elapsed;\n        \n        return Math.max(0, remaining);\n    },\n    \n    /**\n     * Calculates generation speed (steps per second)\n     */\n    calculateGenerationSpeed(job) {\n        if (!job.start_time || !job.current_step) {\n            return 0;\n        }\n        \n        const elapsed = (Date.now() - job.start_time) / 1000;\n        if (elapsed <= 0) return 0;\n        \n        return job.current_step / elapsed;\n    },\n    \n    /**\n     * Calculates total generation time\n     */\n    calculateTotalTime(job) {\n        if (!job.start_time) return 0;\n        \n        const endTime = job.end_time || Date.now();\n        return (endTime - job.start_time) / 1000;\n    },\n    \n    /**\n     * Formats time duration for display\n     */\n    formatDuration(seconds) {\n        if (!seconds || seconds <= 0) {\n            return '—';\n        }\n        \n        if (seconds < 60) {\n            return `${Math.round(seconds)}s`;\n        } else if (seconds < 3600) {\n            const minutes = Math.floor(seconds / 60);\n            const remainingSeconds = Math.round(seconds % 60);\n            return `${minutes}m ${remainingSeconds}s`;\n        } else {\n            const hours = Math.floor(seconds / 3600);\n            const minutes = Math.floor((seconds % 3600) / 60);\n            return `${hours}h ${minutes}m`;\n        }\n    },\n    \n    /**\n     * Formats ETA for display\n     */\n    formatETA(etaSeconds) {\n        if (!etaSeconds || etaSeconds <= 0) {\n            return 'Unknown';\n        }\n        \n        if (etaSeconds < 60) {\n            return `~${Math.round(etaSeconds)}s`;\n        } else if (etaSeconds < 3600) {\n            const minutes = Math.ceil(etaSeconds / 60);\n            return `~${minutes}m`;\n        } else {\n            const hours = Math.floor(etaSeconds / 3600);\n            const minutes = Math.ceil((etaSeconds % 3600) / 60);\n            return `~${hours}h ${minutes}m`;\n        }\n    },\n    \n    /**\n     * Gets progress bar configuration\n     */\n    getProgressBarConfig(job) {\n        if (!job) {\n            return {\n                progress: 0,\n                status: 'unknown',\n                color: 'gray',\n                animated: false,\n                text: ''\n            };\n        }\n        \n        const config = {\n            progress: job.progress || 0,\n            status: job.status || 'unknown',\n            animated: false,\n            text: ''\n        };\n        \n        // Set color based on status\n        switch (job.status) {\n            case 'queued':\n                config.color = 'blue';\n                config.text = 'Queued';\n                break;\n            case 'processing':\n                config.color = 'green';\n                config.animated = true;\n                config.text = this.getProcessingText(job);\n                break;\n            case 'completed':\n                config.color = 'green';\n                config.progress = 100;\n                config.text = 'Completed';\n                break;\n            case 'failed':\n                config.color = 'red';\n                config.text = 'Failed';\n                break;\n            case 'cancelled':\n                config.color = 'orange';\n                config.text = 'Cancelled';\n                break;\n            case 'paused':\n                config.color = 'yellow';\n                config.text = 'Paused';\n                break;\n            default:\n                config.color = 'gray';\n                config.text = 'Unknown';\n        }\n        \n        return config;\n    },\n    \n    /**\n     * Gets processing text with step info\n     */\n    getProcessingText(job) {\n        const parts = [];\n        \n        if (job.current_step && job.total_steps) {\n            parts.push(`Step ${job.current_step}/${job.total_steps}`);\n        }\n        \n        if (job.progress) {\n            parts.push(`${Math.round(job.progress)}%`);\n        }\n        \n        if (job.eta) {\n            parts.push(`ETA: ${this.formatETA(job.eta)}`);\n        }\n        \n        return parts.length > 0 ? parts.join(' • ') : 'Processing...';\n    },\n    \n    /**\n     * Gets status icon for job\n     */\n    getStatusIcon(status) {\n        const icons = {\n            queued: '⏳',\n            processing: '⚡',\n            completed: '✅',\n            failed: '❌',\n            cancelled: '⏹️',\n            paused: '⏸️'\n        };\n        \n        return icons[status] || '❓';\n    },\n    \n    /**\n     * Gets status color class\n     */\n    getStatusColorClass(status) {\n        const colorClasses = {\n            queued: 'text-blue-600',\n            processing: 'text-green-600',\n            completed: 'text-green-600',\n            failed: 'text-red-600',\n            cancelled: 'text-orange-600',\n            paused: 'text-yellow-600'\n        };\n        \n        return colorClasses[status] || 'text-gray-600';\n    },\n    \n    /**\n     * Checks if job is active (not in final state)\n     */\n    isJobActive(job) {\n        if (!job) return false;\n        \n        const activeStatuses = ['queued', 'processing', 'paused'];\n        return activeStatuses.includes(job.status);\n    },\n    \n    /**\n     * Checks if job is completed\n     */\n    isJobCompleted(job) {\n        return job && job.status === 'completed';\n    },\n    \n    /**\n     * Checks if job has failed\n     */\n    isJobFailed(job) {\n        return job && (job.status === 'failed' || job.status === 'cancelled');\n    },\n    \n    /**\n     * Gets job priority score (for sorting)\n     */\n    getJobPriority(job) {\n        if (!job) return 0;\n        \n        const statusPriority = {\n            processing: 1000,\n            queued: 500,\n            paused: 100,\n            failed: 10,\n            cancelled: 5,\n            completed: 1\n        };\n        \n        const basePriority = statusPriority[job.status] || 0;\n        const timePriority = job.created_at ? (Date.now() - new Date(job.created_at).getTime()) / 1000 : 0;\n        \n        return basePriority + (timePriority / 1000); // Newer jobs get slightly higher priority\n    },\n    \n    /**\n     * Sorts jobs by priority\n     */\n    sortJobsByPriority(jobs) {\n        if (!Array.isArray(jobs)) return [];\n        \n        return [...jobs].sort((a, b) => {\n            const priorityA = this.getJobPriority(a);\n            const priorityB = this.getJobPriority(b);\n            return priorityB - priorityA; // Higher priority first\n        });\n    },\n    \n    /**\n     * Gets progress statistics for multiple jobs\n     */\n    getProgressStatistics(jobs) {\n        if (!Array.isArray(jobs) || jobs.length === 0) {\n            return {\n                total: 0,\n                queued: 0,\n                processing: 0,\n                completed: 0,\n                failed: 0,\n                cancelled: 0,\n                paused: 0,\n                averageProgress: 0,\n                estimatedTotalTime: 0\n            };\n        }\n        \n        const stats = {\n            total: jobs.length,\n            queued: 0,\n            processing: 0,\n            completed: 0,\n            failed: 0,\n            cancelled: 0,\n            paused: 0,\n            averageProgress: 0,\n            estimatedTotalTime: 0\n        };\n        \n        let totalProgress = 0;\n        let totalETA = 0;\n        \n        jobs.forEach(job => {\n            if (job.status) {\n                stats[job.status] = (stats[job.status] || 0) + 1;\n            }\n            \n            totalProgress += job.progress || 0;\n            \n            if (job.eta && this.isJobActive(job)) {\n                totalETA += job.eta;\n            }\n        });\n        \n        stats.averageProgress = totalProgress / jobs.length;\n        stats.estimatedTotalTime = totalETA;\n        \n        return stats;\n    },\n    \n    /**\n     * Creates progress event data\n     */\n    createProgressEvent(job, previousJob = null) {\n        const event = {\n            jobId: job.id,\n            status: job.status,\n            progress: job.progress,\n            timestamp: Date.now(),\n            changes: {}\n        };\n        \n        if (previousJob) {\n            // Track what changed\n            if (previousJob.status !== job.status) {\n                event.changes.status = { from: previousJob.status, to: job.status };\n            }\n            \n            if (previousJob.progress !== job.progress) {\n                event.changes.progress = { from: previousJob.progress, to: job.progress };\n            }\n            \n            if (previousJob.current_step !== job.current_step) {\n                event.changes.step = { from: previousJob.current_step, to: job.current_step };\n            }\n        }\n        \n        return event;\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { generationProgress };\n} else if (typeof window !== 'undefined') {\n    window.generationProgress = generationProgress;\n}\n"],"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","ignoreList":[]}