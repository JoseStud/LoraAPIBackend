{"version":3,"names":["global","window","DevLogger","debug","jest","fn","warn","error","getCommonStub","registerLazyComponent","require","describe","beforeEach","clearAllMocks","test","stub","expect","toBeInstanceOf","Object","toHaveProperty","init","toBe","undefined","stub1","stub2","not","toThrow","Alpine","data","afterEach","toHaveBeenCalledWith","any","Function","factoryCall","mock","calls","factory","componentName","mockReturnValue"],"sources":["common-stub.test.js"],"sourcesContent":["/**\n * Jest tests for common-stub.js\n */\n\n// Mock DevLogger for tests\nglobal.window = {\n    DevLogger: {\n        debug: jest.fn(),\n        warn: jest.fn(),\n        error: jest.fn()\n    }\n};\n\n// Import the functions we want to test\nconst { getCommonStub, registerLazyComponent } = require('../app/frontend/static/js/lib/common-stub.js');\n\ndescribe('Common Stub Functions', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe('getCommonStub', () => {\n        test('should return an object with init method for any component name', () => {\n            const stub = getCommonStub('testComponent');\n            \n            expect(stub).toBeInstanceOf(Object);\n            expect(stub).toHaveProperty('init');\n            expect(typeof stub.init).toBe('function');\n        });\n\n        test('should return empty object for empty component name', () => {\n            const stub = getCommonStub('');\n            \n            expect(stub).toBeInstanceOf(Object);\n            expect(stub).toHaveProperty('init');\n        });\n\n        test('should handle undefined component name', () => {\n            const stub = getCommonStub(undefined);\n            \n            expect(stub).toBeInstanceOf(Object);\n            expect(stub).toHaveProperty('init');\n        });\n\n        test('should return different objects for different component names', () => {\n            const stub1 = getCommonStub('component1');\n            const stub2 = getCommonStub('component2');\n            \n            expect(stub1).not.toBe(stub2);\n        });\n\n        test('init method should be callable without errors', () => {\n            const stub = getCommonStub('testComponent');\n            \n            expect(() => {\n                stub.init();\n            }).not.toThrow();\n        });\n    });\n\n    describe('registerLazyComponent', () => {\n        // Mock global Alpine\n        beforeEach(() => {\n            global.window.Alpine = {\n                data: jest.fn()\n            };\n            global.window.getCommonStub = getCommonStub;\n        });\n\n        afterEach(() => {\n            delete global.window.Alpine;\n        });\n\n        test('should register component with Alpine when Alpine is available', () => {\n            registerLazyComponent('testComponent');\n            \n            expect(global.window.Alpine.data).toHaveBeenCalledWith('testComponent', expect.any(Function));\n        });\n\n        test('should not throw when Alpine is not available', () => {\n            delete global.window.Alpine;\n            \n            expect(() => {\n                registerLazyComponent('testComponent');\n            }).not.toThrow();\n        });\n\n        test('should register factory that returns valid stub', () => {\n            registerLazyComponent('testComponent');\n            \n            // Get the factory function passed to Alpine.data\n            const factoryCall = global.window.Alpine.data.mock.calls[0];\n            const factory = factoryCall[1];\n            \n            const stub = factory();\n            expect(stub).toHaveProperty('init');\n            expect(typeof stub.init).toBe('function');\n        });\n\n        test('should handle component names with special characters', () => {\n            const componentName = 'test-component_with.special@chars';\n            \n            expect(() => {\n                registerLazyComponent(componentName);\n            }).not.toThrow();\n            \n            expect(global.window.Alpine.data).toHaveBeenCalledWith(componentName, expect.any(Function));\n        });\n    });\n\n    describe('Integration tests', () => {\n        test('lazy component should use getCommonStub internally', () => {\n            global.window.Alpine = { data: jest.fn() };\n            global.window.getCommonStub = jest.fn().mockReturnValue({ init: jest.fn() });\n            \n            registerLazyComponent('testComponent');\n            \n            // Get and execute the factory\n            const factory = global.window.Alpine.data.mock.calls[0][1];\n            factory();\n            \n            expect(global.window.getCommonStub).toHaveBeenCalledWith('testComponent');\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}