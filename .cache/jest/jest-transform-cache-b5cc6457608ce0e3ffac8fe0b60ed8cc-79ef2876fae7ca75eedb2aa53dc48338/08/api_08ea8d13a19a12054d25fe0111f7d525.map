{"version":3,"names":["cov_11mhqwgeop","actualCoverage","SystemAdminAPI","constructor","f","s","baseUrl","request","endpoint","options","b","url","response","fetch","headers","ok","errorData","text","Error","status","contentType","get","includes","json","error","window","DevLogger","getSystemStatus","getSystemStats","getSystemMetrics","getWorkers","controlWorkers","action","method","restartAllWorkers","restartWorker","workerId","stopWorker","getDatabaseStats","createBackup","restoreBackup","backupId","body","JSON","stringify","backup_id","downloadBackup","blob","deleteBackup","optimizeDatabase","rebuildIndexes","cleanupOrphaned","validateDatabase","getConfiguration","updateConfiguration","config","getLogs","params","URLSearchParams","limit","append","level","source","queryString","toString","getRecentBackups","getHealthReport","checkComponentHealth","component","systemAdminAPI","module","exports"],"sources":["api.js"],"sourcesContent":["/**\n * System Administration API Module\n * \n * Handles all HTTP requests to the admin API endpoints.\n * Provides a clean interface for system monitoring, configuration, and maintenance operations.\n */\n\n/**\n * API client for system administration endpoints\n */\nclass SystemAdminAPI {\n    constructor() {\n        this.baseUrl = '/api/v1/admin';\n    }\n\n    /**\n     * Make a generic API request with error handling\n     * @param {string} endpoint - API endpoint relative to baseUrl\n     * @param {Object} options - Fetch options\n     * @returns {Promise<Object>} Response data\n     */\n    async request(endpoint, options = {}) {\n        const url = `${this.baseUrl}${endpoint}`;\n        \n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers\n                },\n                ...options\n            });\n\n            if (!response.ok) {\n                const errorData = await response.text();\n                throw new Error(`HTTP ${response.status}: ${errorData}`);\n            }\n\n            // Handle empty responses\n            const contentType = response.headers.get('content-type');\n            if (contentType && contentType.includes('application/json')) {\n                return await response.json();\n            } else {\n                return await response.text();\n            }\n        } catch (error) {\n            if (window.DevLogger && window.DevLogger.error) {\n                window.DevLogger.error(`API request failed: ${endpoint}`, error);\n            }\n            throw error;\n        }\n    }\n\n    // System Status and Stats\n    /**\n     * Get system status\n     * @returns {Promise<Object>} System status data\n     */\n    async getSystemStatus() {\n        return await this.request('/system/status');\n    }\n\n    /**\n     * Get system statistics\n     * @returns {Promise<Object>} System stats data\n     */\n    async getSystemStats() {\n        return await this.request('/system/stats');\n    }\n\n    /**\n     * Get real-time system metrics\n     * @returns {Promise<Object>} System metrics data\n     */\n    async getSystemMetrics() {\n        return await this.request('/system/metrics');\n    }\n\n    // Workers Management\n    /**\n     * Get all workers\n     * @returns {Promise<Array>} Array of worker objects\n     */\n    async getWorkers() {\n        return await this.request('/workers');\n    }\n\n    /**\n     * Start or stop workers\n     * @param {string} action - 'start' or 'stop'\n     * @returns {Promise<Object>} Operation result\n     */\n    async controlWorkers(action) {\n        const endpoint = action === 'start' ? '/workers/start' : '/workers/stop';\n        return await this.request(endpoint, { method: 'POST' });\n    }\n\n    /**\n     * Restart all workers\n     * @returns {Promise<Object>} Operation result\n     */\n    async restartAllWorkers() {\n        return await this.request('/workers/restart-all', { method: 'POST' });\n    }\n\n    /**\n     * Restart a specific worker\n     * @param {string} workerId - Worker ID to restart\n     * @returns {Promise<Object>} Operation result\n     */\n    async restartWorker(workerId) {\n        return await this.request(`/workers/${workerId}/restart`, { method: 'POST' });\n    }\n\n    /**\n     * Stop a specific worker\n     * @param {string} workerId - Worker ID to stop\n     * @returns {Promise<Object>} Operation result\n     */\n    async stopWorker(workerId) {\n        return await this.request(`/workers/${workerId}/stop`, { method: 'POST' });\n    }\n\n    // Database Management\n    /**\n     * Get database statistics\n     * @returns {Promise<Object>} Database stats\n     */\n    async getDatabaseStats() {\n        return await this.request('/database/stats');\n    }\n\n    /**\n     * Create database backup\n     * @returns {Promise<Object>} Backup operation result\n     */\n    async createBackup() {\n        return await this.request('/database/backup', { method: 'POST' });\n    }\n\n    /**\n     * Restore database from backup\n     * @param {string} backupId - Backup ID to restore\n     * @returns {Promise<Object>} Restore operation result\n     */\n    async restoreBackup(backupId) {\n        return await this.request('/database/restore', {\n            method: 'POST',\n            body: JSON.stringify({ backup_id: backupId })\n        });\n    }\n\n    /**\n     * Download backup file\n     * @param {string} backupId - Backup ID to download\n     * @returns {Promise<Blob>} Backup file blob\n     */\n    async downloadBackup(backupId) {\n        const response = await fetch(`${this.baseUrl}/backups/${backupId}/download`);\n        if (!response.ok) {\n            throw new Error(`Failed to download backup: ${response.status}`);\n        }\n        return await response.blob();\n    }\n\n    /**\n     * Delete a backup\n     * @param {string} backupId - Backup ID to delete\n     * @returns {Promise<Object>} Delete operation result\n     */\n    async deleteBackup(backupId) {\n        return await this.request(`/backups/${backupId}`, { method: 'DELETE' });\n    }\n\n    /**\n     * Optimize database\n     * @returns {Promise<Object>} Optimization result\n     */\n    async optimizeDatabase() {\n        return await this.request('/database/optimize', { method: 'POST' });\n    }\n\n    /**\n     * Rebuild database indexes\n     * @returns {Promise<Object>} Rebuild operation result\n     */\n    async rebuildIndexes() {\n        return await this.request('/database/rebuild-indexes', { method: 'POST' });\n    }\n\n    /**\n     * Cleanup orphaned records\n     * @returns {Promise<Object>} Cleanup operation result\n     */\n    async cleanupOrphaned() {\n        return await this.request('/database/cleanup-orphaned', { method: 'POST' });\n    }\n\n    /**\n     * Validate database integrity\n     * @returns {Promise<Object>} Validation result\n     */\n    async validateDatabase() {\n        return await this.request('/database/validate', { method: 'POST' });\n    }\n\n    // Configuration Management\n    /**\n     * Get system configuration\n     * @returns {Promise<Object>} Configuration data\n     */\n    async getConfiguration() {\n        return await this.request('/config');\n    }\n\n    /**\n     * Update system configuration\n     * @param {Object} config - Configuration object to update\n     * @returns {Promise<Object>} Update result\n     */\n    async updateConfiguration(config) {\n        return await this.request('/config', {\n            method: 'PUT',\n            body: JSON.stringify(config)\n        });\n    }\n\n    // Logs Management\n    /**\n     * Get system logs\n     * @param {Object} options - Query options (limit, level, source)\n     * @returns {Promise<Array>} Array of log entries\n     */\n    async getLogs(options = {}) {\n        const params = new URLSearchParams();\n        \n        if (options.limit) params.append('limit', options.limit);\n        if (options.level && options.level !== 'all') params.append('level', options.level);\n        if (options.source && options.source !== 'all') params.append('source', options.source);\n        \n        const queryString = params.toString();\n        const endpoint = queryString ? `/logs?${queryString}` : '/logs';\n        \n        return await this.request(endpoint);\n    }\n\n    // Backup Management\n    /**\n     * Get recent backups\n     * @returns {Promise<Array>} Array of backup objects\n     */\n    async getRecentBackups() {\n        return await this.request('/backups');\n    }\n\n    // Health and Monitoring\n    /**\n     * Get comprehensive health report\n     * @returns {Promise<Object>} Health report data\n     */\n    async getHealthReport() {\n        return await this.request('/health/report');\n    }\n\n    /**\n     * Check specific system component health\n     * @param {string} component - Component to check (database, workers, storage, etc.)\n     * @returns {Promise<Object>} Component health status\n     */\n    async checkComponentHealth(component) {\n        return await this.request(`/health/${component}`);\n    }\n}\n\n// Export singleton instance\nconst systemAdminAPI = new SystemAdminAPI();\n\n// Make available globally and for module export\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { SystemAdminAPI, systemAdminAPI };\n} else if (typeof window !== 'undefined') {\n    window.systemAdminAPI = systemAdminAPI;\n    window.SystemAdminAPI = SystemAdminAPI;\n}\n"],"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","ignoreList":[]}