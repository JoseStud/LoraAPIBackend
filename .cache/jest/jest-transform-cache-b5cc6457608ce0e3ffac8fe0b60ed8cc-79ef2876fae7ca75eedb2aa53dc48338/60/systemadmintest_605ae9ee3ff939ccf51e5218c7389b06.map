{"version":3,"names":["describe","component","mockFetch","beforeEach","jest","fn","global","fetch","Chart","register","update","destroy","Notification","permission","requestPermission","mockResolvedValue","activeTab","isLoading","error","overview","systemInfo","cpuUsage","memoryUsage","diskUsage","gpuInfo","workers","active","inactive","logs","database","stats","backups","migrations","entries","filters","level","timeRange","settings","system","security","init","loadOverview","loadWorkers","loadDatabase","loadLogs","loadSettings","switchTab","startWorker","stopWorker","restartWorker","createBackup","restoreBackup","runMigration","updateSettings","resetSettings","afterEach","clearAllMocks","test","expect","toBe","toHaveBeenCalled","tab","toHaveBeenCalledWith","mockLoadData","ok","json","Promise","resolve","data","response","mockRejectedValue","Error","message","workerId","method","backupId","result","newSettings","maxWorkers","section","headers","body","JSON","stringify","mockWebSocket","onopen","onmessage","onclose","onerror","send","close","WebSocket","initWebSocket","ws","event","parse","handleRealtimeUpdate","type","cpu","memory","mockEvent","showNotification","notification","timestamp","Date","now","toBeDefined","console","consoleSpy","spyOn","mockImplementation","mockRestore","trackPerformance","operation","start","performance","end","duration","tracker","toBeGreaterThanOrEqual"],"sources":["system-admin.test.js"],"sourcesContent":["/**\n * Unit Tests for System Administration Component\n */\n\ndescribe('System Administration Component', () => {\n    let component;\n    let mockFetch;\n    \n    beforeEach(() => {\n        // Mock fetch\n        mockFetch = jest.fn();\n        global.fetch = mockFetch;\n        \n        // Mock Chart.js\n        global.Chart = {\n            register: jest.fn(),\n            Chart: jest.fn(() => ({\n                update: jest.fn(),\n                destroy: jest.fn()\n            }))\n        };\n        \n        // Mock Notification API\n        global.Notification = {\n            permission: 'granted',\n            requestPermission: jest.fn().mockResolvedValue('granted')\n        };\n        \n        // Setup component data structure similar to system-admin.js\n        component = {\n            activeTab: 'overview',\n            isLoading: false,\n            error: null,\n            \n            // Overview data\n            overview: {\n                systemInfo: {},\n                cpuUsage: 0,\n                memoryUsage: 0,\n                diskUsage: 0,\n                gpuInfo: []\n            },\n            \n            // Workers data\n            workers: {\n                active: [],\n                inactive: [],\n                logs: []\n            },\n            \n            // Database data\n            database: {\n                stats: {},\n                backups: [],\n                migrations: []\n            },\n            \n            // Logs data\n            logs: {\n                entries: [],\n                filters: {\n                    level: 'all',\n                    component: 'all',\n                    timeRange: '1h'\n                }\n            },\n            \n            // Settings data\n            settings: {\n                system: {},\n                workers: {},\n                database: {},\n                security: {}\n            },\n            \n            // Methods\n            init: jest.fn(),\n            loadOverview: jest.fn(),\n            loadWorkers: jest.fn(),\n            loadDatabase: jest.fn(),\n            loadLogs: jest.fn(),\n            loadSettings: jest.fn(),\n            switchTab: jest.fn(),\n            \n            // Worker methods\n            startWorker: jest.fn(),\n            stopWorker: jest.fn(),\n            restartWorker: jest.fn(),\n            \n            // Database methods\n            createBackup: jest.fn(),\n            restoreBackup: jest.fn(),\n            runMigration: jest.fn(),\n            \n            // Settings methods\n            updateSettings: jest.fn(),\n            resetSettings: jest.fn()\n        };\n    });\n    \n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n    \n    describe('Component Initialization', () => {\n        test('should initialize with default state', () => {\n            expect(component.activeTab).toBe('overview');\n            expect(component.isLoading).toBe(false);\n            expect(component.error).toBe(null);\n        });\n        \n        test('should call init method on component creation', () => {\n            component.init();\n            expect(component.init).toHaveBeenCalled();\n        });\n    });\n    \n    describe('Tab Navigation', () => {\n        test('should switch active tab', () => {\n            component.switchTab = jest.fn((tab) => {\n                component.activeTab = tab;\n            });\n            \n            component.switchTab('workers');\n            expect(component.activeTab).toBe('workers');\n            expect(component.switchTab).toHaveBeenCalledWith('workers');\n        });\n        \n        test('should load data when switching tabs', () => {\n            const mockLoadData = jest.fn();\n            component.switchTab = jest.fn((tab) => {\n                component.activeTab = tab;\n                if (tab === 'workers') mockLoadData();\n            });\n            \n            component.switchTab('workers');\n            expect(mockLoadData).toHaveBeenCalled();\n        });\n    });\n    \n    describe('Data Loading', () => {\n        beforeEach(() => {\n            mockFetch.mockResolvedValue({\n                ok: true,\n                json: () => Promise.resolve({\n                    data: { test: 'data' }\n                })\n            });\n        });\n        \n        test('should load overview data', async () => {\n            component.loadOverview = jest.fn(async () => {\n                const response = await fetch('/api/v1/admin/overview');\n                const data = await response.json();\n                component.overview = data;\n            });\n            \n            await component.loadOverview();\n            \n            expect(mockFetch).toHaveBeenCalledWith('/api/v1/admin/overview');\n            expect(component.loadOverview).toHaveBeenCalled();\n        });\n        \n        test('should load workers data', async () => {\n            component.loadWorkers = jest.fn(async () => {\n                const response = await fetch('/api/v1/admin/workers');\n                const data = await response.json();\n                component.workers = data;\n            });\n            \n            await component.loadWorkers();\n            \n            expect(mockFetch).toHaveBeenCalledWith('/api/v1/admin/workers');\n            expect(component.loadWorkers).toHaveBeenCalled();\n        });\n        \n        test('should handle API errors gracefully', async () => {\n            mockFetch.mockRejectedValue(new Error('Network error'));\n            \n            component.loadOverview = jest.fn(async () => {\n                try {\n                    await fetch('/api/v1/admin/overview');\n                } catch (error) {\n                    component.error = error.message;\n                }\n            });\n            \n            await component.loadOverview();\n            \n            expect(component.error).toBe('Network error');\n        });\n    });\n    \n    describe('Worker Management', () => {\n        test('should start worker', async () => {\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.startWorker = jest.fn(async (workerId) => {\n                await fetch(`/api/v1/admin/workers/${workerId}/start`, {\n                    method: 'POST'\n                });\n            });\n            \n            await component.startWorker('test-worker');\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/workers/test-worker/start',\n                { method: 'POST' }\n            );\n        });\n        \n        test('should stop worker', async () => {\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.stopWorker = jest.fn(async (workerId) => {\n                await fetch(`/api/v1/admin/workers/${workerId}/stop`, {\n                    method: 'POST'\n                });\n            });\n            \n            await component.stopWorker('test-worker');\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/workers/test-worker/stop',\n                { method: 'POST' }\n            );\n        });\n        \n        test('should restart worker', async () => {\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.restartWorker = jest.fn(async (workerId) => {\n                await fetch(`/api/v1/admin/workers/${workerId}/restart`, {\n                    method: 'POST'\n                });\n            });\n            \n            await component.restartWorker('test-worker');\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/workers/test-worker/restart',\n                { method: 'POST' }\n            );\n        });\n    });\n    \n    describe('Database Management', () => {\n        test('should create backup', async () => {\n            mockFetch.mockResolvedValue({\n                ok: true,\n                json: () => Promise.resolve({ backupId: 'backup-123' })\n            });\n            \n            component.createBackup = jest.fn(async () => {\n                const response = await fetch('/api/v1/admin/database/backup', {\n                    method: 'POST'\n                });\n                return response.json();\n            });\n            \n            const result = await component.createBackup();\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/database/backup',\n                { method: 'POST' }\n            );\n            expect(result.backupId).toBe('backup-123');\n        });\n        \n        test('should restore backup', async () => {\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.restoreBackup = jest.fn(async (backupId) => {\n                await fetch(`/api/v1/admin/database/restore/${backupId}`, {\n                    method: 'POST'\n                });\n            });\n            \n            await component.restoreBackup('backup-123');\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/database/restore/backup-123',\n                { method: 'POST' }\n            );\n        });\n    });\n    \n    describe('Settings Management', () => {\n        test('should update settings', async () => {\n            const newSettings = { maxWorkers: 5 };\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.updateSettings = jest.fn(async (section, settings) => {\n                await fetch(`/api/v1/admin/settings/${section}`, {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(settings)\n                });\n            });\n            \n            await component.updateSettings('workers', newSettings);\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/settings/workers',\n                {\n                    method: 'PUT',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(newSettings)\n                }\n            );\n        });\n        \n        test('should reset settings to defaults', async () => {\n            mockFetch.mockResolvedValue({ ok: true });\n            \n            component.resetSettings = jest.fn(async (section) => {\n                await fetch(`/api/v1/admin/settings/${section}/reset`, {\n                    method: 'POST'\n                });\n            });\n            \n            await component.resetSettings('system');\n            \n            expect(mockFetch).toHaveBeenCalledWith(\n                '/api/v1/admin/settings/system/reset',\n                { method: 'POST' }\n            );\n        });\n    });\n    \n    describe('Real-time Updates', () => {\n        test('should handle websocket connections', () => {\n            const mockWebSocket = {\n                onopen: null,\n                onmessage: null,\n                onclose: null,\n                onerror: null,\n                send: jest.fn(),\n                close: jest.fn()\n            };\n            \n            global.WebSocket = jest.fn(() => mockWebSocket);\n            \n            component.initWebSocket = jest.fn(() => {\n                const ws = new WebSocket('ws://localhost:8000/ws/admin');\n                ws.onmessage = (event) => {\n                    const data = JSON.parse(event.data);\n                    component.handleRealtimeUpdate(data);\n                };\n                return ws;\n            });\n            \n            component.handleRealtimeUpdate = jest.fn((data) => {\n                if (data.type === 'system_metrics') {\n                    component.overview.cpuUsage = data.cpu;\n                    component.overview.memoryUsage = data.memory;\n                }\n            });\n            \n            const ws = component.initWebSocket();\n            expect(WebSocket).toHaveBeenCalledWith('ws://localhost:8000/ws/admin');\n            \n            // Simulate incoming message\n            const mockEvent = {\n                data: JSON.stringify({\n                    type: 'system_metrics',\n                    cpu: 45,\n                    memory: 67\n                })\n            };\n            \n            ws.onmessage(mockEvent);\n            \n            expect(component.handleRealtimeUpdate).toHaveBeenCalledWith({\n                type: 'system_metrics',\n                cpu: 45,\n                memory: 67\n            });\n        });\n    });\n    \n    describe('Notifications', () => {\n        test('should show success notifications', () => {\n            component.showNotification = jest.fn((message, type) => {\n                const notification = {\n                    message,\n                    type,\n                    timestamp: Date.now()\n                };\n                return notification;\n            });\n            \n            const result = component.showNotification('Operation successful', 'success');\n            \n            expect(result.message).toBe('Operation successful');\n            expect(result.type).toBe('success');\n            expect(result.timestamp).toBeDefined();\n        });\n        \n        test('should show error notifications', () => {\n            component.showNotification = jest.fn((message, type) => {\n                if (type === 'error') {\n                    console.error('Admin Error:', message);\n                }\n                return { message, type };\n            });\n            \n            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n            \n            component.showNotification('Operation failed', 'error');\n            \n            expect(consoleSpy).toHaveBeenCalledWith('Admin Error:', 'Operation failed');\n            \n            consoleSpy.mockRestore();\n        });\n    });\n    \n    describe('Performance Monitoring', () => {\n        test('should track performance metrics', () => {\n            component.trackPerformance = jest.fn((operation) => {\n                const start = performance.now();\n                return {\n                    end: () => {\n                        const duration = performance.now() - start;\n                        return { operation, duration };\n                    }\n                };\n            });\n            \n            const tracker = component.trackPerformance('loadOverview');\n            const result = tracker.end();\n            \n            expect(result.operation).toBe('loadOverview');\n            expect(result.duration).toBeGreaterThanOrEqual(0);\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}