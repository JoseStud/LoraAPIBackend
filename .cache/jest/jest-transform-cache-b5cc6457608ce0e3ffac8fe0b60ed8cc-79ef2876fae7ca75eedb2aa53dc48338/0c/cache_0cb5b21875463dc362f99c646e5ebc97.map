{"version":3,"names":["pwaCache","getCacheStatus","registration","active","Error","response","postMessageToSW","type","status","caches","error","message","clearAllCaches","success","clearSpecificCache","cacheName","getCacheSize","totalSize","preloadCriticalResources","resources","getCacheStatistics","hitRate","missRate","totalRequests","cacheHits","cacheMisses","lastUpdated","updateCacheStrategy","strategy","validStrategies","includes","forceCacheUpdate","getCachedResources","getStorageEstimate","navigator","storage","quota","usage","available","percent","estimate","usageDetails","requestPersistentStorage","granted","reason","persist","isStoragePersistent","persisted","getCachePerformance","stats","storageInfo","isPersistent","efficiency","storageUsage","recommendations","generateCacheRecommendations","push","action","optimizeCache","performance","results","optimizations","errors","recommendation","clearOldCaches","getCriticalResources","persistent","clearedCaches","timeout","Promise","resolve","reject","messageChannel","MessageChannel","timeoutId","setTimeout","port1","onmessage","event","clearTimeout","data","postMessage","port2","startCacheMonitoring","interval","monitoringData","samples","startTime","Date","now","monitor","timestamp","length","shift","window","dispatchEvent","CustomEvent","detail","DevLogger","intervalId","setInterval","stop","clearInterval","getData","reset","formatCacheSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","calculateCacheHealth","score","max","min","module","exports"],"sources":["cache.js"],"sourcesContent":["/**\n * PWA Manager - Cache Management Module\n * \n * Handles cache operations, status monitoring, and cache strategies.\n */\n\n/**\n * Cache management operations for PWA\n */\nconst pwaCache = {\n    /**\n     * Gets cache status from service worker\n     */\n    async getCacheStatus(registration) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { type: 'GET_CACHE_STATUS' });\n            return response || { status: 'unknown', caches: [] };\n        } catch (error) {\n            throw new Error(`Failed to get cache status: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Clears all caches\n     */\n    async clearAllCaches(registration) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { type: 'CLEAR_CACHE' });\n            return response?.success || false;\n        } catch (error) {\n            throw new Error(`Failed to clear caches: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Clears specific cache\n     */\n    async clearSpecificCache(registration, cacheName) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { \n                type: 'CLEAR_SPECIFIC_CACHE',\n                cacheName \n            });\n            return response?.success || false;\n        } catch (error) {\n            throw new Error(`Failed to clear cache ${cacheName}: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Gets cache size information\n     */\n    async getCacheSize(registration) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { type: 'GET_CACHE_SIZE' });\n            return response || { totalSize: 0, caches: [] };\n        } catch (error) {\n            throw new Error(`Failed to get cache size: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Preloads critical resources\n     */\n    async preloadCriticalResources(registration, resources = []) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { \n                type: 'PRELOAD_RESOURCES',\n                resources \n            });\n            return response?.success || false;\n        } catch (error) {\n            throw new Error(`Failed to preload resources: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Gets cache statistics\n     */\n    async getCacheStatistics(registration) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { type: 'GET_CACHE_STATS' });\n            return response || {\n                hitRate: 0,\n                missRate: 0,\n                totalRequests: 0,\n                cacheHits: 0,\n                cacheMisses: 0,\n                lastUpdated: null\n            };\n        } catch (error) {\n            throw new Error(`Failed to get cache statistics: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Updates cache strategy\n     */\n    async updateCacheStrategy(registration, strategy) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        const validStrategies = ['cache-first', 'network-first', 'stale-while-revalidate', 'network-only', 'cache-only'];\n        if (!validStrategies.includes(strategy)) {\n            throw new Error(`Invalid cache strategy: ${strategy}`);\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { \n                type: 'UPDATE_CACHE_STRATEGY',\n                strategy \n            });\n            return response?.success || false;\n        } catch (error) {\n            throw new Error(`Failed to update cache strategy: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Forces cache update for specific resources\n     */\n    async forceCacheUpdate(registration, resources = []) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { \n                type: 'FORCE_CACHE_UPDATE',\n                resources \n            });\n            return response?.success || false;\n        } catch (error) {\n            throw new Error(`Failed to force cache update: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Gets cached resources list\n     */\n    async getCachedResources(registration, cacheName = null) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { \n                type: 'GET_CACHED_RESOURCES',\n                cacheName \n            });\n            return response?.resources || [];\n        } catch (error) {\n            throw new Error(`Failed to get cached resources: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Estimates storage quota usage\n     */\n    async getStorageEstimate() {\n        if (!('storage' in navigator) || !('estimate' in navigator.storage)) {\n            return { quota: 0, usage: 0, available: 0, percent: 0 };\n        }\n        \n        try {\n            const estimate = await navigator.storage.estimate();\n            const quota = estimate.quota || 0;\n            const usage = estimate.usage || 0;\n            const available = quota - usage;\n            const percent = quota > 0 ? (usage / quota) * 100 : 0;\n            \n            return {\n                quota,\n                usage,\n                available,\n                percent,\n                usageDetails: estimate.usageDetails || {}\n            };\n        } catch (error) {\n            return { quota: 0, usage: 0, available: 0, percent: 0, error: error.message };\n        }\n    },\n    \n    /**\n     * Requests persistent storage\n     */\n    async requestPersistentStorage() {\n        if (!('storage' in navigator) || !('persist' in navigator.storage)) {\n            return { granted: false, reason: 'API not supported' };\n        }\n        \n        try {\n            const granted = await navigator.storage.persist();\n            return { granted, reason: granted ? 'Permission granted' : 'Permission denied' };\n        } catch (error) {\n            return { granted: false, reason: error.message };\n        }\n    },\n    \n    /**\n     * Checks if storage is persistent\n     */\n    async isStoragePersistent() {\n        if (!('storage' in navigator) || !('persisted' in navigator.storage)) {\n            return false;\n        }\n        \n        try {\n            return await navigator.storage.persisted();\n        } catch (error) {\n            return false;\n        }\n    },\n    \n    /**\n     * Gets cache performance metrics\n     */\n    async getCachePerformance(registration) {\n        const stats = await this.getCacheStatistics(registration);\n        const storageInfo = await this.getStorageEstimate();\n        const isPersistent = await this.isStoragePersistent();\n        \n        return {\n            hitRate: stats.hitRate,\n            missRate: stats.missRate,\n            efficiency: stats.totalRequests > 0 ? (stats.cacheHits / stats.totalRequests) * 100 : 0,\n            storageUsage: storageInfo.percent,\n            isPersistent,\n            recommendations: this.generateCacheRecommendations(stats, storageInfo)\n        };\n    },\n    \n    /**\n     * Generates cache optimization recommendations\n     */\n    generateCacheRecommendations(stats, storageInfo) {\n        const recommendations = [];\n        \n        if (stats.hitRate < 50) {\n            recommendations.push({\n                type: 'performance',\n                message: 'Low cache hit rate. Consider preloading more critical resources.',\n                action: 'preload-critical'\n            });\n        }\n        \n        if (storageInfo.percent > 80) {\n            recommendations.push({\n                type: 'storage',\n                message: 'High storage usage. Consider clearing old cache data.',\n                action: 'clear-old-caches'\n            });\n        }\n        \n        if (storageInfo.percent < 20) {\n            recommendations.push({\n                type: 'optimization',\n                message: 'Low storage usage. Consider caching more resources for better performance.',\n                action: 'increase-caching'\n            });\n        }\n        \n        if (!storageInfo.isPersistent) {\n            recommendations.push({\n                type: 'reliability',\n                message: 'Storage is not persistent. Request persistent storage for better reliability.',\n                action: 'request-persistent'\n            });\n        }\n        \n        return recommendations;\n    },\n    \n    /**\n     * Optimizes cache based on usage patterns\n     */\n    async optimizeCache(registration) {\n        const performance = await this.getCachePerformance(registration);\n        const results = { optimizations: [], errors: [] };\n        \n        for (const recommendation of performance.recommendations) {\n            try {\n                switch (recommendation.action) {\n                    case 'clear-old-caches':\n                        await this.clearOldCaches(registration);\n                        results.optimizations.push('Cleared old caches');\n                        break;\n                        \n                    case 'preload-critical':\n                        await this.preloadCriticalResources(registration, this.getCriticalResources());\n                        results.optimizations.push('Preloaded critical resources');\n                        break;\n                        \n                    case 'request-persistent': {\n                        const persistent = await this.requestPersistentStorage();\n                        if (persistent.granted) {\n                            results.optimizations.push('Enabled persistent storage');\n                        }\n                        break;\n                    }\n                        \n                    default:\n                        break;\n                }\n            } catch (error) {\n                results.errors.push(`Failed to ${recommendation.action}: ${error.message}`);\n            }\n        }\n        \n        return results;\n    },\n    \n    /**\n     * Clears old/unused caches\n     */\n    async clearOldCaches(registration) {\n        if (!registration?.active) {\n            throw new Error('No active service worker');\n        }\n        \n        try {\n            const response = await this.postMessageToSW(registration, { type: 'CLEAR_OLD_CACHES' });\n            return response?.clearedCaches || [];\n        } catch (error) {\n            throw new Error(`Failed to clear old caches: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Gets list of critical resources to cache\n     */\n    getCriticalResources() {\n        return [\n            '/',\n            '/static/css/main.css',\n            '/static/js/main.js',\n            '/static/js/components/app.js',\n            '/static/icons/icon-192x192.png',\n            '/static/icons/icon-512x512.png'\n        ];\n    },\n    \n    /**\n     * Posts message to service worker with response\n     */\n    async postMessageToSW(registration, message, timeout = 5000) {\n        return new Promise((resolve, reject) => {\n            const messageChannel = new MessageChannel();\n            const timeoutId = setTimeout(() => {\n                reject(new Error('Service Worker response timeout'));\n            }, timeout);\n            \n            messageChannel.port1.onmessage = (event) => {\n                clearTimeout(timeoutId);\n                resolve(event.data);\n            };\n            \n            try {\n                registration.active.postMessage(message, [messageChannel.port2]);\n            } catch (error) {\n                clearTimeout(timeoutId);\n                reject(error);\n            }\n        });\n    },\n    \n    /**\n     * Monitors cache usage over time\n     */\n    startCacheMonitoring(registration, interval = 60000) {\n        let monitoringData = {\n            samples: [],\n            startTime: Date.now()\n        };\n        \n        const monitor = async () => {\n            try {\n                const stats = await this.getCacheStatistics(registration);\n                const storage = await this.getStorageEstimate();\n                \n                monitoringData.samples.push({\n                    timestamp: Date.now(),\n                    hitRate: stats.hitRate,\n                    storageUsage: storage.percent,\n                    totalRequests: stats.totalRequests\n                });\n                \n                // Keep only last 100 samples\n                if (monitoringData.samples.length > 100) {\n                    monitoringData.samples.shift();\n                }\n                \n                // Dispatch monitoring event\n                window.dispatchEvent(new CustomEvent('pwa-cache-monitoring', {\n                    detail: monitoringData\n                }));\n                \n            } catch (error) {\n                if (window.DevLogger?.error) {\n                    window.DevLogger.error('[PWA] Cache monitoring error:', error);\n                }\n            }\n        };\n        \n        const intervalId = setInterval(monitor, interval);\n        \n        // Initial sample\n        monitor();\n        \n        return {\n            stop: () => {\n                clearInterval(intervalId);\n            },\n            getData: () => monitoringData,\n            reset: () => {\n                monitoringData = { samples: [], startTime: Date.now() };\n            }\n        };\n    },\n    \n    /**\n     * Formats cache size for display\n     */\n    formatCacheSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        \n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        \n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    \n    /**\n     * Gets cache health score\n     */\n    calculateCacheHealth(stats, storageInfo) {\n        let score = 100;\n        \n        // Reduce score for low hit rate\n        if (stats.hitRate < 50) score -= 30;\n        else if (stats.hitRate < 70) score -= 15;\n        \n        // Reduce score for high storage usage\n        if (storageInfo.percent > 90) score -= 25;\n        else if (storageInfo.percent > 80) score -= 10;\n        \n        // Reduce score for no persistent storage\n        if (!storageInfo.isPersistent) score -= 10;\n        \n        return Math.max(0, Math.min(100, score));\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { pwaCache };\n} else if (typeof window !== 'undefined') {\n    window.pwaCache = pwaCache;\n}\n"],"mappings":"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","ignoreList":[]}