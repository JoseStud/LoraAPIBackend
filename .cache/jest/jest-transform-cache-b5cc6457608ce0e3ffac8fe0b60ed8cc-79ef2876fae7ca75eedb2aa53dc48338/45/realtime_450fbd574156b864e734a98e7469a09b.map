{"version":3,"names":["cov_1tekisf36q","actualCoverage","performanceRealtime","s","websocket","refreshInterval","defaultRefreshInterval","startAutoRefresh","refreshCallback","interval","b","f","stopAutoRefresh","setInterval","clearInterval","connectWebSocket","updateCallback","errorCallback","disconnectWebSocket","protocol","window","location","wsUrl","host","WebSocket","onopen","sendMessage","type","channel","onmessage","event","data","JSON","parse","handleWebSocketMessage","parseError","onerror","error","onclose","setTimeout","kpis","generation","metrics","usage","message","readyState","OPEN","send","stringify","close","isWebSocketConnected","updateLiveChartData","charts","newDataPoint","chartType","chart","maxDataPoints","labels","push","formatTimestamp","timestamp","length","shift","datasets","forEach","dataset","index","dataKey","getDataKeyForDataset","undefined","update","datasetIndex","dataKeyMappings","volume","performance","systemMetrics","keys","Date","toLocaleTimeString","hour","minute","setupRealTimeMonitoring","options","enableAutoRefresh","enableWebSocket","monitoringStatus","autoRefresh","webSocket","tearDownRealTimeMonitoring","getMonitoringStatus","websocketState","handleVisibilityChange","isVisible","pauseCallback","resumeCallback","setupVisibilityHandling","document","addEventListener","hidden","module","exports"],"sources":["realtime.js"],"sourcesContent":["/**\n * Performance Analytics - Real-time Operations Module\n * \n * Handles auto-refresh, WebSocket connections, and real-time updates.\n */\n\n/**\n * Real-time operations for performance analytics\n */\nconst performanceRealtime = {\n    /**\n     * WebSocket connection for real-time updates\n     */\n    websocket: null,\n    \n    /**\n     * Auto-refresh interval ID\n     */\n    refreshInterval: null,\n    \n    /**\n     * Default refresh interval in milliseconds\n     */\n    defaultRefreshInterval: 30000, // 30 seconds\n    \n    /**\n     * Starts auto-refresh with specified interval\n     */\n    startAutoRefresh(refreshCallback, interval = null) {\n        this.stopAutoRefresh(); // Clear any existing interval\n        \n        const refreshInterval = interval || this.defaultRefreshInterval;\n        \n        this.refreshInterval = setInterval(() => {\n            if (typeof refreshCallback === 'function') {\n                refreshCallback();\n            }\n        }, refreshInterval);\n        \n        return this.refreshInterval;\n    },\n    \n    /**\n     * Stops auto-refresh\n     */\n    stopAutoRefresh() {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = null;\n        }\n    },\n    \n    /**\n     * Establishes WebSocket connection for real-time updates\n     */\n    connectWebSocket(updateCallback, errorCallback = null) {\n        try {\n            // Close existing connection if any\n            this.disconnectWebSocket();\n            \n            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n            const wsUrl = `${protocol}//${window.location.host}/ws/analytics`;\n            \n            this.websocket = new WebSocket(wsUrl);\n            \n            this.websocket.onopen = () => {\n                // WebSocket connection opened\n                this.sendMessage({ type: 'subscribe', channel: 'analytics' });\n            };\n            \n            this.websocket.onmessage = (event) => {\n                try {\n                    const data = JSON.parse(event.data);\n                    this.handleWebSocketMessage(data, updateCallback);\n                } catch (parseError) {\n                    if (errorCallback) {\n                        errorCallback('Failed to parse WebSocket message', parseError);\n                    }\n                }\n            };\n            \n            this.websocket.onerror = (error) => {\n                if (errorCallback) {\n                    errorCallback('WebSocket error', error);\n                }\n            };\n            \n            this.websocket.onclose = () => {\n                // Attempt to reconnect after a delay\n                setTimeout(() => {\n                    if (updateCallback) {\n                        this.connectWebSocket(updateCallback, errorCallback);\n                    }\n                }, 5000);\n            };\n            \n            return this.websocket;\n            \n        } catch (error) {\n            if (errorCallback) {\n                errorCallback('Failed to establish WebSocket connection', error);\n            }\n            return null;\n        }\n    },\n    \n    /**\n     * Handles incoming WebSocket messages\n     */\n    handleWebSocketMessage(data, updateCallback) {\n        if (!data || !data.type) return;\n        \n        switch (data.type) {\n            case 'kpi_update':\n                if (updateCallback && data.kpis) {\n                    updateCallback('kpis', data.kpis);\n                }\n                break;\n                \n            case 'new_generation':\n                if (updateCallback && data.generation) {\n                    updateCallback('generation', data.generation);\n                }\n                break;\n                \n            case 'system_metrics':\n                if (updateCallback && data.metrics) {\n                    updateCallback('system_metrics', data.metrics);\n                }\n                break;\n                \n            case 'error_occurred':\n                if (updateCallback && data.error) {\n                    updateCallback('error', data.error);\n                }\n                break;\n                \n            case 'lora_usage_update':\n                if (updateCallback && data.usage) {\n                    updateCallback('lora_usage', data.usage);\n                }\n                break;\n                \n            default:\n                // Unknown message type - pass through to callback\n                if (updateCallback) {\n                    updateCallback('unknown', data);\n                }\n        }\n    },\n    \n    /**\n     * Sends message through WebSocket\n     */\n    sendMessage(message) {\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(JSON.stringify(message));\n            return true;\n        }\n        return false;\n    },\n    \n    /**\n     * Disconnects WebSocket\n     */\n    disconnectWebSocket() {\n        if (this.websocket) {\n            this.websocket.close();\n            this.websocket = null;\n        }\n    },\n    \n    /**\n     * Checks WebSocket connection status\n     */\n    isWebSocketConnected() {\n        return this.websocket && this.websocket.readyState === WebSocket.OPEN;\n    },\n    \n    /**\n     * Manages live data updates for charts\n     */\n    updateLiveChartData(charts, newDataPoint, chartType) {\n        const chart = charts[chartType];\n        if (!chart || !newDataPoint) return;\n        \n        const maxDataPoints = 50; // Limit data points for performance\n        \n        // Add new data point\n        if (chart.data.labels) {\n            chart.data.labels.push(this.formatTimestamp(newDataPoint.timestamp));\n            \n            // Remove old data points if exceeding limit\n            if (chart.data.labels.length > maxDataPoints) {\n                chart.data.labels.shift();\n            }\n        }\n        \n        // Update datasets\n        chart.data.datasets.forEach((dataset, index) => {\n            const dataKey = this.getDataKeyForDataset(chartType, index);\n            if (dataKey && newDataPoint[dataKey] !== undefined) {\n                dataset.data.push(newDataPoint[dataKey]);\n                \n                // Remove old data points\n                if (dataset.data.length > maxDataPoints) {\n                    dataset.data.shift();\n                }\n            }\n        });\n        \n        // Update chart with animation disabled for performance\n        chart.update('none');\n    },\n    \n    /**\n     * Gets data key for chart dataset\n     */\n    getDataKeyForDataset(chartType, datasetIndex) {\n        const dataKeyMappings = {\n            volume: ['count'],\n            performance: ['avg_time', 'success_rate'],\n            systemMetrics: ['cpu', 'memory', 'gpu']\n        };\n        \n        const keys = dataKeyMappings[chartType];\n        return keys && keys[datasetIndex] ? keys[datasetIndex] : null;\n    },\n    \n    /**\n     * Formats timestamp for chart labels\n     */\n    formatTimestamp(timestamp) {\n        return new Date(timestamp).toLocaleTimeString([], { \n            hour: '2-digit', \n            minute: '2-digit' \n        });\n    },\n    \n    /**\n     * Sets up real-time monitoring\n     */\n    setupRealTimeMonitoring(options = {}) {\n        const {\n            enableAutoRefresh = true,\n            enableWebSocket = true,\n            refreshInterval = null,\n            updateCallback = null,\n            errorCallback = null\n        } = options;\n        \n        const monitoringStatus = {\n            autoRefresh: false,\n            webSocket: false\n        };\n        \n        // Setup auto-refresh\n        if (enableAutoRefresh && updateCallback) {\n            this.startAutoRefresh(updateCallback, refreshInterval);\n            monitoringStatus.autoRefresh = true;\n        }\n        \n        // Setup WebSocket\n        if (enableWebSocket && updateCallback) {\n            this.connectWebSocket(updateCallback, errorCallback);\n            monitoringStatus.webSocket = true;\n        }\n        \n        return monitoringStatus;\n    },\n    \n    /**\n     * Tears down real-time monitoring\n     */\n    tearDownRealTimeMonitoring() {\n        this.stopAutoRefresh();\n        this.disconnectWebSocket();\n    },\n    \n    /**\n     * Gets real-time monitoring status\n     */\n    getMonitoringStatus() {\n        return {\n            autoRefresh: this.refreshInterval !== null,\n            webSocket: this.isWebSocketConnected(),\n            refreshInterval: this.refreshInterval,\n            websocketState: this.websocket ? this.websocket.readyState : null\n        };\n    },\n    \n    /**\n     * Handles visibility change (tab switching)\n     */\n    handleVisibilityChange(isVisible, pauseCallback, resumeCallback) {\n        if (isVisible) {\n            // Resume monitoring when tab becomes visible\n            if (resumeCallback) resumeCallback();\n        } else {\n            // Pause monitoring when tab is hidden to save resources\n            if (pauseCallback) pauseCallback();\n        }\n    },\n    \n    /**\n     * Sets up visibility change handling\n     */\n    setupVisibilityHandling(pauseCallback, resumeCallback) {\n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange(\n                !document.hidden,\n                pauseCallback,\n                resumeCallback\n            );\n        });\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { performanceRealtime };\n} else if (typeof window !== 'undefined') {\n    window.performanceRealtime = performanceRealtime;\n}\n"],"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","ignoreList":[]}