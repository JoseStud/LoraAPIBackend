{"version":3,"names":["pwaServiceWorker","register","swPath","scope","navigator","Error","registration","serviceWorker","window","DevLogger","debug","error","message","setupEventListeners","callbacks","handleUpdateFound","newWorker","installing","handleStateChange","state","controller","onUpdateAvailable","addEventListener","handleControllerChange","onControllerChange","location","reload","removeEventListener","checkForUpdates","update","activateWaiting","waiting","postMessage","type","getState","hasUpdate","active","Boolean","updateViaCache","unregister","result","postMessageWithResponse","timeout","Promise","resolve","reject","messageChannel","MessageChannel","timeoutId","setTimeout","port1","onmessage","event","clearTimeout","data","port2","getAllRegistrations","getRegistrations","isSupported","getCapabilities","pushManager","notification","backgroundSync","ServiceWorkerRegistration","prototype","backgroundFetch","periodicBackgroundSync","handleError","context","errorMessage","dispatchEvent","CustomEvent","detail","validateScript","response","fetch","cache","ok","getPerformanceMetrics","metrics","registrationTime","scriptURL","Date","now","performance","getEntriesByType","navigationEntries","length","entry","pageLoadTime","loadEventEnd","loadEventStart","domContentLoadedTime","domContentLoadedEventEnd","domContentLoadedEventStart","module","exports"],"sources":["service-worker.js"],"sourcesContent":["/**\n * PWA Manager - Service Worker Module\n * \n * Handles service worker registration, lifecycle management, and updates.\n */\n\n/**\n * Service Worker management operations\n */\nconst pwaServiceWorker = {\n    /**\n     * Registers the service worker\n     */\n    async register(swPath = '/sw.js', scope = '/') {\n        if (!('serviceWorker' in navigator)) {\n            throw new Error('Service Worker not supported');\n        }\n        \n        try {\n            const registration = await navigator.serviceWorker.register(swPath, { scope });\n            \n            if (window.DevLogger?.debug) {\n                window.DevLogger.debug('[PWA] Service Worker registered:', registration);\n            }\n            \n            return registration;\n            \n        } catch (error) {\n            if (window.DevLogger?.debug) {\n                window.DevLogger.debug('[PWA] Service Worker registration failed:', error);\n            }\n            throw new Error(`Service Worker registration failed: ${error.message}`);\n        }\n    },\n    \n    /**\n     * Sets up service worker event listeners\n     */\n    setupEventListeners(registration, callbacks = {}) {\n        if (!registration) return () => {};\n        \n        // Handle updates\n        const handleUpdateFound = () => {\n            const newWorker = registration.installing;\n            if (!newWorker) return;\n            \n            const handleStateChange = () => {\n                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                    if (callbacks.onUpdateAvailable) {\n                        callbacks.onUpdateAvailable(newWorker);\n                    }\n                }\n            };\n            \n            newWorker.addEventListener('statechange', handleStateChange);\n        };\n        \n        // Handle controller changes\n        const handleControllerChange = () => {\n            if (callbacks.onControllerChange) {\n                callbacks.onControllerChange();\n            } else {\n                window.location.reload();\n            }\n        };\n        \n        registration.addEventListener('updatefound', handleUpdateFound);\n        navigator.serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        \n        // Return cleanup function\n        return () => {\n            registration.removeEventListener('updatefound', handleUpdateFound);\n            navigator.serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n        };\n    },\n    \n    /**\n     * Checks for service worker updates\n     */\n    async checkForUpdates(registration) {\n        if (!registration) return false;\n        \n        try {\n            await registration.update();\n            return true;\n        } catch (error) {\n            if (window.DevLogger?.debug) {\n                window.DevLogger.debug('[PWA] Update check failed:', error);\n            }\n            return false;\n        }\n    },\n    \n    /**\n     * Activates a waiting service worker\n     */\n    activateWaiting(registration) {\n        if (registration?.waiting) {\n            registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n            return true;\n        }\n        return false;\n    },\n    \n    /**\n     * Gets the current service worker state\n     */\n    getState(registration) {\n        if (!registration) {\n            return { state: 'not_registered', hasUpdate: false };\n        }\n        \n        return {\n            state: registration.active ? 'active' : 'inactive',\n            hasUpdate: Boolean(registration.waiting),\n            installing: Boolean(registration.installing),\n            scope: registration.scope,\n            updateViaCache: registration.updateViaCache\n        };\n    },\n    \n    /**\n     * Unregisters the service worker\n     */\n    async unregister(registration) {\n        if (!registration) return false;\n        \n        try {\n            const result = await registration.unregister();\n            if (window.DevLogger?.debug) {\n                window.DevLogger.debug('[PWA] Service Worker unregistered:', result);\n            }\n            return result;\n        } catch (error) {\n            if (window.DevLogger?.debug) {\n                window.DevLogger.debug('[PWA] Service Worker unregistration failed:', error);\n            }\n            return false;\n        }\n    },\n    \n    /**\n     * Posts a message to the service worker\n     */\n    postMessage(registration, message) {\n        if (registration?.active) {\n            registration.active.postMessage(message);\n            return true;\n        }\n        return false;\n    },\n    \n    /**\n     * Posts a message to service worker with response\n     */\n    postMessageWithResponse(registration, message, timeout = 5000) {\n        return new Promise((resolve, reject) => {\n            if (!registration?.active) {\n                reject(new Error('No active service worker'));\n                return;\n            }\n            \n            const messageChannel = new MessageChannel();\n            const timeoutId = setTimeout(() => {\n                reject(new Error('Service Worker response timeout'));\n            }, timeout);\n            \n            messageChannel.port1.onmessage = (event) => {\n                clearTimeout(timeoutId);\n                resolve(event.data);\n            };\n            \n            try {\n                registration.active.postMessage(message, [messageChannel.port2]);\n            } catch (error) {\n                clearTimeout(timeoutId);\n                reject(error);\n            }\n        });\n    },\n    \n    /**\n     * Gets all service worker registrations\n     */\n    async getAllRegistrations() {\n        if (!('serviceWorker' in navigator)) return [];\n        \n        try {\n            return await navigator.serviceWorker.getRegistrations();\n        } catch (error) {\n            return [];\n        }\n    },\n    \n    /**\n     * Checks if service worker is supported\n     */\n    isSupported() {\n        return 'serviceWorker' in navigator;\n    },\n    \n    /**\n     * Gets service worker capabilities\n     */\n    getCapabilities() {\n        return {\n            serviceWorker: 'serviceWorker' in navigator,\n            pushManager: 'PushManager' in window,\n            notification: 'Notification' in window,\n            backgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype,\n            backgroundFetch: 'serviceWorker' in navigator && 'BackgroundFetch' in window,\n            periodicBackgroundSync: 'serviceWorker' in navigator && 'periodicSync' in window.ServiceWorkerRegistration.prototype\n        };\n    },\n    \n    /**\n     * Handles service worker errors\n     */\n    handleError(error, context = 'unknown') {\n        const errorMessage = `Service Worker error in ${context}: ${error.message}`;\n        \n        if (window.DevLogger?.error) {\n            window.DevLogger.error('[PWA]', errorMessage, error);\n        }\n        \n        // Could dispatch custom event for error handling\n        window.dispatchEvent(new CustomEvent('sw-error', {\n            detail: { error, context, message: errorMessage }\n        }));\n        \n        return errorMessage;\n    },\n    \n    /**\n     * Validates service worker script\n     */\n    async validateScript(swPath) {\n        try {\n            const response = await fetch(swPath, { cache: 'no-cache' });\n            return response.ok;\n        } catch (error) {\n            return false;\n        }\n    },\n    \n    /**\n     * Gets service worker performance metrics\n     */\n    getPerformanceMetrics(registration) {\n        if (!registration) return null;\n        \n        const metrics = {\n            registrationTime: registration.installing?.scriptURL ? Date.now() : null,\n            scope: registration.scope,\n            updateViaCache: registration.updateViaCache\n        };\n        \n        // Add navigation API timing if available\n        if (window.performance?.getEntriesByType) {\n            const navigationEntries = window.performance.getEntriesByType('navigation');\n            if (navigationEntries.length > 0) {\n                const entry = navigationEntries[0];\n                metrics.pageLoadTime = entry.loadEventEnd - entry.loadEventStart;\n                metrics.domContentLoadedTime = entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart;\n            }\n        }\n        \n        return metrics;\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { pwaServiceWorker };\n} else if (typeof window !== 'undefined') {\n    window.pwaServiceWorker = pwaServiceWorker;\n}\n"],"mappings":"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","ignoreList":[]}