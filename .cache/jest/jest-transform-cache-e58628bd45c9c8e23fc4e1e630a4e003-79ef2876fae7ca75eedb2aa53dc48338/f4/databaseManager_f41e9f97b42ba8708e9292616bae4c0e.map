{"version":3,"names":["cov_2i49m607a3","actualCoverage","createDatabaseManagerComponent","f","s","isBackingUp","isOptimizing","recentBackups","api","init","b","window","systemAdminAPI","createFallbackAPI","loadRecentBackups","import","meta","env","DEV","console","log","createBackup","Promise","resolve","setTimeout","success","backup_id","Date","now","filename","optimizeDatabase","getRecentBackups","backups","id","created_at","toISOString","size","response","error","showToast","newBackup","status","unshift","length","slice","Error","message","downloadBackup","backupId","backup","find","deleteBackup","filter","formatDate","dateString","date","toLocaleDateString","toLocaleTimeString","formatSize","bytes","sizes","i","Math","floor","round","pow","type","$dispatch"],"sources":["databaseManager.js"],"sourcesContent":["/**\n * Database Manager Component for System Admin\n * \n * Handles all database-related operations including backups and optimization\n */\n\nexport function createDatabaseManagerComponent() {\n    return {\n        // State\n        isBackingUp: false,\n        isOptimizing: false,\n        recentBackups: [],\n        \n        // API instance (will be set in init)\n        api: null,\n\n        init() {\n            // Initialize API if available\n            this.api = window.systemAdminAPI || this.createFallbackAPI();\n            \n            // Load initial backup data\n            this.loadRecentBackups();\n            \n            if (import.meta.env.DEV) {\n                // eslint-disable-next-line no-console\n                console.log('üóÑÔ∏è Database Manager Initialized');\n            }\n        },\n\n        createFallbackAPI() {\n            return {\n                createBackup: async () => {\n                    if (import.meta.env.DEV) {\n                        // eslint-disable-next-line no-console\n                        console.log('Fallback: Creating backup...');\n                    }\n                    await new Promise(resolve => setTimeout(resolve, 2000));\n                    return { success: true, backup_id: Date.now(), filename: `backup-${Date.now()}.zip` };\n                },\n                optimizeDatabase: async () => {\n                    if (import.meta.env.DEV) {\n                        // eslint-disable-next-line no-console\n                        console.log('Fallback: Optimizing database...');\n                    }\n                    await new Promise(resolve => setTimeout(resolve, 3000));\n                    return { success: true };\n                },\n                getRecentBackups: async () => {\n                    return {\n                        success: true,\n                        backups: [\n                            { id: 1, filename: 'backup-2025-09-08.zip', created_at: new Date().toISOString(), size: 15728640 },\n                            { id: 2, filename: 'backup-2025-09-07.zip', created_at: new Date(Date.now() - 86400000).toISOString(), size: 14598432 }\n                        ]\n                    };\n                }\n            };\n        },\n\n        async loadRecentBackups() {\n            try {\n                const response = await this.api.getRecentBackups();\n                if (response.success) {\n                    this.recentBackups = response.backups || [];\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('Failed to load recent backups:', error);\n                this.showToast('Failed to load backup history', 'error');\n            }\n        },\n\n        async createBackup() {\n            if (this.isBackingUp) return;\n            \n            this.isBackingUp = true;\n            try {\n                if (import.meta.env.DEV) {\n                    // eslint-disable-next-line no-console\n                    console.log('üîÑ Starting database backup...');\n                }\n                \n                const response = await this.api.createBackup();\n                \n                if (response.success) {\n                    // Add the new backup to the list\n                    const newBackup = {\n                        id: response.backup_id,\n                        filename: response.filename,\n                        created_at: new Date().toISOString(),\n                        size: response.size || 0,\n                        status: 'completed'\n                    };\n                    \n                    this.recentBackups.unshift(newBackup);\n                    \n                    // Keep only the last 10 backups in the UI\n                    if (this.recentBackups.length > 10) {\n                        this.recentBackups = this.recentBackups.slice(0, 10);\n                    }\n                    \n                    this.showToast('Database backup created successfully!', 'success');\n                    if (import.meta.env.DEV) {\n                        // eslint-disable-next-line no-console\n                        console.log('‚úÖ Backup completed:', response.filename);\n                    }\n                } else {\n                    throw new Error(response.error || 'Backup failed');\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('‚ùå Backup failed:', error);\n                this.showToast(`Backup failed: ${error.message}`, 'error');\n            } finally {\n                this.isBackingUp = false;\n            }\n        },\n\n        async optimizeDatabase() {\n            if (this.isOptimizing) return;\n            \n            this.isOptimizing = true;\n            try {\n                if (import.meta.env.DEV) {\n                    // eslint-disable-next-line no-console\n                    console.log('üîÑ Starting database optimization...');\n                }\n                \n                const response = await this.api.optimizeDatabase();\n                \n                if (response.success) {\n                    this.showToast('Database optimized successfully!', 'success');\n                    if (import.meta.env.DEV) {\n                        // eslint-disable-next-line no-console\n                        console.log('‚úÖ Database optimization completed');\n                    }\n                } else {\n                    throw new Error(response.error || 'Optimization failed');\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('‚ùå Optimization failed:', error);\n                this.showToast(`Optimization failed: ${error.message}`, 'error');\n            } finally {\n                this.isOptimizing = false;\n            }\n        },\n\n        async downloadBackup(backupId) {\n            try {\n                if (import.meta.env.DEV) {\n                    // eslint-disable-next-line no-console\n                    console.log('üì• Downloading backup:', backupId);\n                }\n                \n                if (this.api.downloadBackup) {\n                    await this.api.downloadBackup(backupId);\n                } else {\n                    // Fallback: create a download link\n                    const backup = this.recentBackups.find(b => b.id === backupId);\n                    if (backup) {\n                        this.showToast(`Download started: ${backup.filename}`, 'info');\n                    }\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('‚ùå Download failed:', error);\n                this.showToast(`Download failed: ${error.message}`, 'error');\n            }\n        },\n\n        async deleteBackup(backupId) {\n            try {\n                if (import.meta.env.DEV) {\n                    // eslint-disable-next-line no-console\n                    console.log('üóëÔ∏è Deleting backup:', backupId);\n                }\n                \n                if (this.api.deleteBackup) {\n                    const response = await this.api.deleteBackup(backupId);\n                    if (response.success) {\n                        // Remove from local list\n                        this.recentBackups = this.recentBackups.filter(b => b.id !== backupId);\n                        this.showToast('Backup deleted successfully', 'success');\n                    } else {\n                        throw new Error(response.error || 'Delete failed');\n                    }\n                } else {\n                    // Fallback: just remove from UI\n                    this.recentBackups = this.recentBackups.filter(b => b.id !== backupId);\n                    this.showToast('Backup removed from list', 'info');\n                }\n            } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('‚ùå Delete failed:', error);\n                this.showToast(`Delete failed: ${error.message}`, 'error');\n            }\n        },\n\n        formatDate(dateString) {\n            const date = new Date(dateString);\n            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n        },\n\n        formatSize(bytes) {\n            if (!bytes) return 'Unknown size';\n            \n            const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n            const i = Math.floor(Math.log(bytes) / Math.log(1024));\n            return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n        },\n\n        showToast(message, type = 'info') {\n            // Dispatch a custom event that the parent systemAdmin can listen to\n            this.$dispatch('toast', { \n                message: message, \n                type: type \n            });\n        }\n    };\n}\n"],"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","ignoreList":[]}