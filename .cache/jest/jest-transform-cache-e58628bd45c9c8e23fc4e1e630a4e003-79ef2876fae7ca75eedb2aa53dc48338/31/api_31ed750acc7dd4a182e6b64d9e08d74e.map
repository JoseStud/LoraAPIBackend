{"version":3,"names":["cov_25dzc1jo5x","actualCoverage","fetchData","url","options","b","f","s","defaultOptions","headers","response","fetch","ok","Error","status","contentType","get","includes","json","text","error","console","postData","data","method","body","JSON","stringify","putData","deleteData","uploadFile","formData","onProgress","Promise","resolve","reject","xhr","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentComplete","loaded","total","parse","responseText","open","send"],"sources":["api.js"],"sourcesContent":["/**\n * API Utilities\n * \n * Functions for handling HTTP requests, API communication,\n * and data fetching operations.\n */\n\n/**\n * Fetch data from an API endpoint with error handling\n * @param {string} url - The API endpoint URL\n * @param {object} options - Fetch options (method, headers, body, etc.)\n * @returns {Promise<any>} The response data\n */\nexport async function fetchData(url, options = {}) {\n    try {\n        const defaultOptions = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            }\n        };\n\n        const response = await fetch(url, { ...defaultOptions, ...options });\n        \n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n            return await response.json();\n        } else {\n            return await response.text();\n        }\n    } catch (error) {\n        console.error('API request failed:', error);\n        throw error;\n    }\n}\n\n/**\n * POST data to an API endpoint\n * @param {string} url - The API endpoint URL\n * @param {any} data - The data to send\n * @param {object} options - Additional fetch options\n * @returns {Promise<any>} The response data\n */\nexport async function postData(url, data, options = {}) {\n    return fetchData(url, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        ...options\n    });\n}\n\n/**\n * PUT data to an API endpoint\n * @param {string} url - The API endpoint URL\n * @param {any} data - The data to send\n * @param {object} options - Additional fetch options\n * @returns {Promise<any>} The response data\n */\nexport async function putData(url, data, options = {}) {\n    return fetchData(url, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        ...options\n    });\n}\n\n/**\n * DELETE from an API endpoint\n * @param {string} url - The API endpoint URL\n * @param {object} options - Additional fetch options\n * @returns {Promise<any>} The response data\n */\nexport async function deleteData(url, options = {}) {\n    return fetchData(url, {\n        method: 'DELETE',\n        ...options\n    });\n}\n\n/**\n * Upload a file to an API endpoint\n * @param {string} url - The API endpoint URL\n * @param {FormData} formData - The form data containing the file\n * @param {function} onProgress - Progress callback function\n * @returns {Promise<any>} The response data\n */\nexport async function uploadFile(url, formData, onProgress = null) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        \n        if (onProgress) {\n            xhr.upload.addEventListener('progress', (event) => {\n                if (event.lengthComputable) {\n                    const percentComplete = (event.loaded / event.total) * 100;\n                    onProgress(percentComplete);\n                }\n            });\n        }\n        \n        xhr.addEventListener('load', () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n                try {\n                    const response = JSON.parse(xhr.responseText);\n                    resolve(response);\n                } catch {\n                    resolve(xhr.responseText);\n                }\n            } else {\n                reject(new Error(`Upload failed with status: ${xhr.status}`));\n            }\n        });\n        \n        xhr.addEventListener('error', () => {\n            reject(new Error('Upload failed'));\n        });\n        \n        xhr.open('POST', url);\n        xhr.send(formData);\n    });\n}\n"],"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","ignoreList":[]}