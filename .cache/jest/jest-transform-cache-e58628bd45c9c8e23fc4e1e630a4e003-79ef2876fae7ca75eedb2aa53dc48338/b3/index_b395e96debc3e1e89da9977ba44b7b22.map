{"version":3,"names":["cov_cwymdj42k","actualCoverage","createJobQueueComponent","f","s","isInitialized","expanded","pollingInterval","isPolling","apiAvailable","init","startPolling","b","console","log","setInterval","clearInterval","updateJobStatuses","error","response","fetch","window","BACKEND_URL","ok","jobs","json","forEach","apiJob","storeJob","$store","app","activeJobs","find","j","jobId","id","updateJob","status","progress","message","result","addResult","removeJob","addNotification","cancelJob","job","method","clearCompleted","completedJobs","filter","formatDuration","startTime","now","Date","start","diffMs","diffSecs","Math","floor","diffMins","diffHours","getStatusColor","hasJobs","length","runningJobs","destroy"],"sources":["index.js"],"sourcesContent":["/**\n * Job Queue Component\n * \n * Displays and manages active generation jobs.\n * Uses the global store for job data.\n */\n\nexport function createJobQueueComponent() {\n    return {\n        isInitialized: false,\n        \n        // Local UI state\n        expanded: true,\n        pollingInterval: null,\n        isPolling: false, // ✅ Guard to prevent overlapping requests\n        apiAvailable: true, // Flag to disable polling after 404\n        \n        init() {\n            this.startPolling();\n            this.isInitialized = true;\n        },\n        \n        // Poll for job updates with robust guarding\n        startPolling() {\n            if (!this.apiAvailable) {\n                console.log('[JobQueue] API not available, skipping polling setup');\n                return;\n            }\n            \n            if (this.pollingInterval) {\n                console.log('[JobQueue] Polling already active, skipping setup');\n                return;\n            }\n            \n            console.log('[JobQueue] Starting job polling every 2 seconds');\n            \n            this.pollingInterval = setInterval(async () => {\n                // ✅ Check the guard before running\n                if (this.isPolling) {\n                    console.log('[JobQueue] Polling in progress, skipping new request');\n                    return;\n                }\n                \n                if (!this.apiAvailable) {\n                    clearInterval(this.pollingInterval);\n                    this.pollingInterval = null;\n                    console.log('[JobQueue] API unavailable, stopping polling');\n                    return;\n                }\n                \n                try {\n                    this.isPolling = true; // ✅ Set the guard\n                    await this.updateJobStatuses();\n                } catch (error) {\n                    console.error('[JobQueue] Job status update failed:', error);\n                } finally {\n                    this.isPolling = false; // ✅ Always release the guard\n                }\n            }, 2000);\n        },\n        \n        // Update job statuses from API\n        async updateJobStatuses() {\n            try {\n                const response = await fetch((window?.BACKEND_URL || '') + '/jobs/status');\n                if (response.ok) {\n                    const jobs = await response.json();\n                    \n                    // Update each job in the store\n                    jobs.forEach(apiJob => {\n                        const storeJob = this.$store.app.activeJobs.find(j => j.jobId === apiJob.id);\n                        if (storeJob) {\n                            this.$store.app.updateJob(storeJob.id, {\n                                status: apiJob.status,\n                                progress: apiJob.progress || 0,\n                                message: apiJob.message\n                            });\n                            \n                            // If job is complete, move to results\n                            if (apiJob.status === 'completed' && apiJob.result) {\n                                this.$store.app.addResult(apiJob.result);\n                                this.$store.app.removeJob(storeJob.id);\n                                this.$store.app.addNotification('Generation completed!', 'success');\n                            } else if (apiJob.status === 'failed') {\n                                this.$store.app.removeJob(storeJob.id);\n                                this.$store.app.addNotification(`Generation failed: ${apiJob.error}`, 'error');\n                            }\n                        }\n                    });\n                } else if (response.status === 404) {\n                    // API endpoint not implemented yet, stop polling\n                    this.apiAvailable = false;\n                    clearInterval(this.pollingInterval);\n                    this.pollingInterval = null;\n                }\n            } catch (error) {\n                // Silently handle polling errors\n            }\n        },\n        \n        // Cancel a job\n        async cancelJob(jobId) {\n            try {\n                const job = this.$store.app.activeJobs.find(j => j.id === jobId);\n                if (job && job.jobId) {\n                    const response = await fetch((window?.BACKEND_URL || '') + `/jobs/${job.jobId}/cancel`, {\n                        method: 'POST'\n                    });\n                    \n                    if (response.ok) {\n                        this.$store.app.removeJob(jobId);\n                        this.$store.app.addNotification('Job cancelled', 'info');\n                    }\n                }\n            } catch (error) {\n                this.$store.app.addNotification('Failed to cancel job', 'error');\n            }\n        },\n        \n        // Clear completed jobs\n        clearCompleted() {\n            const completedJobs = this.$store.app.activeJobs.filter(job => \n                job.status === 'completed' || job.status === 'failed'\n            );\n            \n            completedJobs.forEach(job => {\n                this.$store.app.removeJob(job.id);\n            });\n        },\n        \n        // Format duration\n        formatDuration(startTime) {\n            const now = new Date();\n            const start = new Date(startTime);\n            const diffMs = now - start;\n            const diffSecs = Math.floor(diffMs / 1000);\n            \n            if (diffSecs < 60) return `${diffSecs}s`;\n            const diffMins = Math.floor(diffSecs / 60);\n            if (diffMins < 60) return `${diffMins}m ${diffSecs % 60}s`;\n            const diffHours = Math.floor(diffMins / 60);\n            return `${diffHours}h ${diffMins % 60}m`;\n        },\n        \n        // Get status color\n        getStatusColor(status) {\n            switch (status) {\n                case 'running': return 'text-blue-600';\n                case 'completed': return 'text-green-600';\n                case 'failed': return 'text-red-600';\n                case 'cancelled': return 'text-gray-600';\n                default: return 'text-yellow-600';\n            }\n        },\n        \n        // Computed properties\n        get jobs() {\n            return this.$store.app.activeJobs;\n        },\n        \n        get hasJobs() {\n            return this.jobs.length > 0;\n        },\n        \n        get runningJobs() {\n            return this.jobs.filter(job => job.status === 'running' || job.status === 'starting');\n        },\n        \n        // ✅ Cleanup intervals and resources on component destruction\n        destroy() {\n            console.log('[JobQueue] Component destroying, cleaning up resources');\n            \n            // ✅ Stop polling interval\n            if (this.pollingInterval) {\n                clearInterval(this.pollingInterval);\n                this.pollingInterval = null;\n                console.log('[JobQueue] Polling interval cleared');\n            }\n            \n            // ✅ Reset polling state\n            this.isPolling = false;\n            \n            console.log('[JobQueue] Component cleanup completed');\n        }\n    };\n}\n"],"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","ignoreList":[]}