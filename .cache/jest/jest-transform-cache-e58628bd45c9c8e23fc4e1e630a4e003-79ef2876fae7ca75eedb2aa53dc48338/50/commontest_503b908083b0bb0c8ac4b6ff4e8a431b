769ec77b540d5a3489cc1feed9421a77
/**
 * Tests for common.js functions (LoRAManager)
 */

// Mock the global window object and required API utilities
const mockPostData = jest.fn();
const mockDevLogger = {
  error: jest.fn()
};

// Set up global mocks
global.window = {
  postData: mockPostData,
  DevLogger: mockDevLogger,
  BACKEND_URL: 'http://test-backend'
};

// Mock document for event dispatching
global.document = {
  body: {
    dispatchEvent: jest.fn()
  }
};

// Mock CustomEvent
global.CustomEvent = jest.fn();

// Load the common.js functionality
// Since common.js adds to window.LoRAManager, we need to simulate that
const mockLoRAManager = {
  async toggleLoraActive(loraId, isActive) {
    try {
      const endpoint = isActive ? 'deactivate' : 'activate';
      const url = (window?.BACKEND_URL || '') + `/adapters/${loraId}/${endpoint}`;

      // Use postData utility from utils/api.js for centralized error handling
      await window.postData(url, {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      // Dispatch event for other components to update
      const event = new CustomEvent('lora-status-changed', {
        detail: {
          loraId,
          isActive: !isActive
        }
      });
      document.body.dispatchEvent(event);
      return true;
    } catch (error) {
      window.DevLogger && window.DevLogger.error && window.DevLogger.error('Error updating LoRA status:', error);
      this.showError('Error: ' + error.message);
      return false;
    }
  },
  showError(message) {
    // Mock implementation
    console.error(message);
  }
};
describe('LoRAManager', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  describe('toggleLoraActive', () => {
    it('should successfully activate a LoRA', async () => {
      // Mock successful API response
      mockPostData.mockResolvedValue({});
      const result = await mockLoRAManager.toggleLoraActive('test-lora-id', false);
      expect(result).toBe(true);
      expect(mockPostData).toHaveBeenCalledWith('http://test-backend/adapters/test-lora-id/activate', {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(CustomEvent).toHaveBeenCalledWith('lora-status-changed', {
        detail: {
          loraId: 'test-lora-id',
          isActive: true
        }
      });
      expect(document.body.dispatchEvent).toHaveBeenCalled();
    });
    it('should successfully deactivate a LoRA', async () => {
      // Mock successful API response
      mockPostData.mockResolvedValue({});
      const result = await mockLoRAManager.toggleLoraActive('test-lora-id', true);
      expect(result).toBe(true);
      expect(mockPostData).toHaveBeenCalledWith('http://test-backend/adapters/test-lora-id/deactivate', {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(CustomEvent).toHaveBeenCalledWith('lora-status-changed', {
        detail: {
          loraId: 'test-lora-id',
          isActive: false
        }
      });
    });
    it('should handle API errors gracefully', async () => {
      // Mock API error
      const apiError = new Error('Network error');
      mockPostData.mockRejectedValue(apiError);
      const showErrorSpy = jest.spyOn(mockLoRAManager, 'showError');
      const result = await mockLoRAManager.toggleLoraActive('test-lora-id', false);
      expect(result).toBe(false);
      expect(mockDevLogger.error).toHaveBeenCalledWith('Error updating LoRA status:', apiError);
      expect(showErrorSpy).toHaveBeenCalledWith('Error: Network error');
    });
    it('should use correct endpoint URLs', async () => {
      mockPostData.mockResolvedValue({});

      // Test activate endpoint
      await mockLoRAManager.toggleLoraActive('lora-123', false);
      expect(mockPostData).toHaveBeenCalledWith('http://test-backend/adapters/lora-123/activate', expect.any(Object), expect.any(Object));

      // Test deactivate endpoint
      await mockLoRAManager.toggleLoraActive('lora-456', true);
      expect(mockPostData).toHaveBeenCalledWith('http://test-backend/adapters/lora-456/deactivate', expect.any(Object), expect.any(Object));
    });
    it('should preserve Content-Type header', async () => {
      mockPostData.mockResolvedValue({});
      await mockLoRAManager.toggleLoraActive('test-lora-id', false);
      expect(mockPostData).toHaveBeenCalledWith(expect.any(String), {}, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,