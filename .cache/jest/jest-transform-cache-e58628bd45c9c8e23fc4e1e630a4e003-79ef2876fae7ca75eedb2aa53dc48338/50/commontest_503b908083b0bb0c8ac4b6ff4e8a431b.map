{"version":3,"names":["mockPostData","jest","fn","mockDevLogger","error","global","window","postData","DevLogger","BACKEND_URL","document","body","dispatchEvent","CustomEvent","mockLoRAManager","toggleLoraActive","loraId","isActive","endpoint","url","headers","event","detail","showError","message","console","describe","beforeEach","clearAllMocks","it","mockResolvedValue","result","expect","toBe","toHaveBeenCalledWith","toHaveBeenCalled","apiError","Error","mockRejectedValue","showErrorSpy","spyOn","any","Object","String"],"sources":["common.test.js"],"sourcesContent":["/**\n * Tests for common.js functions (LoRAManager)\n */\n\n// Mock the global window object and required API utilities\nconst mockPostData = jest.fn();\nconst mockDevLogger = {\n    error: jest.fn()\n};\n\n// Set up global mocks\nglobal.window = {\n    postData: mockPostData,\n    DevLogger: mockDevLogger,\n    BACKEND_URL: 'http://test-backend'\n};\n\n// Mock document for event dispatching\nglobal.document = {\n    body: {\n        dispatchEvent: jest.fn()\n    }\n};\n\n// Mock CustomEvent\nglobal.CustomEvent = jest.fn();\n\n// Load the common.js functionality\n// Since common.js adds to window.LoRAManager, we need to simulate that\nconst mockLoRAManager = {\n    async toggleLoraActive(loraId, isActive) {\n        try {\n            const endpoint = isActive ? 'deactivate' : 'activate';\n            const url = (window?.BACKEND_URL || '') + `/adapters/${loraId}/${endpoint}`;\n            \n            // Use postData utility from utils/api.js for centralized error handling\n            await window.postData(url, {}, {\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            // Dispatch event for other components to update\n            const event = new CustomEvent('lora-status-changed', { \n                detail: { loraId, isActive: !isActive }\n            });\n            document.body.dispatchEvent(event);\n            return true;\n        } catch (error) {\n            window.DevLogger && window.DevLogger.error && window.DevLogger.error('Error updating LoRA status:', error);\n            this.showError('Error: ' + error.message);\n            return false;\n        }\n    },\n    \n    showError(message) {\n        // Mock implementation\n        console.error(message);\n    }\n};\n\ndescribe('LoRAManager', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n    });\n\n    describe('toggleLoraActive', () => {\n        it('should successfully activate a LoRA', async () => {\n            // Mock successful API response\n            mockPostData.mockResolvedValue({});\n\n            const result = await mockLoRAManager.toggleLoraActive('test-lora-id', false);\n\n            expect(result).toBe(true);\n            expect(mockPostData).toHaveBeenCalledWith(\n                'http://test-backend/adapters/test-lora-id/activate',\n                {},\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n            expect(CustomEvent).toHaveBeenCalledWith('lora-status-changed', {\n                detail: { loraId: 'test-lora-id', isActive: true }\n            });\n            expect(document.body.dispatchEvent).toHaveBeenCalled();\n        });\n\n        it('should successfully deactivate a LoRA', async () => {\n            // Mock successful API response\n            mockPostData.mockResolvedValue({});\n\n            const result = await mockLoRAManager.toggleLoraActive('test-lora-id', true);\n\n            expect(result).toBe(true);\n            expect(mockPostData).toHaveBeenCalledWith(\n                'http://test-backend/adapters/test-lora-id/deactivate',\n                {},\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n            expect(CustomEvent).toHaveBeenCalledWith('lora-status-changed', {\n                detail: { loraId: 'test-lora-id', isActive: false }\n            });\n        });\n\n        it('should handle API errors gracefully', async () => {\n            // Mock API error\n            const apiError = new Error('Network error');\n            mockPostData.mockRejectedValue(apiError);\n\n            const showErrorSpy = jest.spyOn(mockLoRAManager, 'showError');\n\n            const result = await mockLoRAManager.toggleLoraActive('test-lora-id', false);\n\n            expect(result).toBe(false);\n            expect(mockDevLogger.error).toHaveBeenCalledWith('Error updating LoRA status:', apiError);\n            expect(showErrorSpy).toHaveBeenCalledWith('Error: Network error');\n        });\n\n        it('should use correct endpoint URLs', async () => {\n            mockPostData.mockResolvedValue({});\n\n            // Test activate endpoint\n            await mockLoRAManager.toggleLoraActive('lora-123', false);\n            expect(mockPostData).toHaveBeenCalledWith(\n                'http://test-backend/adapters/lora-123/activate',\n                expect.any(Object),\n                expect.any(Object)\n            );\n\n            // Test deactivate endpoint\n            await mockLoRAManager.toggleLoraActive('lora-456', true);\n            expect(mockPostData).toHaveBeenCalledWith(\n                'http://test-backend/adapters/lora-456/deactivate',\n                expect.any(Object),\n                expect.any(Object)\n            );\n        });\n\n        it('should preserve Content-Type header', async () => {\n            mockPostData.mockResolvedValue({});\n\n            await mockLoRAManager.toggleLoraActive('test-lora-id', false);\n\n            expect(mockPostData).toHaveBeenCalledWith(\n                expect.any(String),\n                {},\n                {\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }\n            );\n        });\n    });\n});"],"mappings":"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","ignoreList":[]}