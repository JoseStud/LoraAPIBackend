{"version":3,"names":["cov_b7m6fnlto","actualCoverage","performanceMetrics","s","loadKPIs","timeRange","f","response","fetch","b","window","BACKEND_URL","ok","Error","data","json","error","console","generateMockKPIs","total_generations","generation_growth","avg_generation_time","time_improvement","success_rate","total_failed","active_loras","total_loras","loadTopLoras","generateMockTopLoras","id","name","version","usage_count","avg_time","loadErrorAnalysis","generateMockErrorAnalysis","error_type","count","percentage","trend","loadPerformanceInsights","generateMockInsights","type","title","description","impact","recommendation","loadChartData","generateMockChartData","hours","now","Date","generationVolume","Array","from","length","_","i","time","getTime","timestamp","toISOString","Math","floor","random","performance","loraUsage","usage","resourceUsage","cpu","memory","gpu","calculateDerivedMetrics","chartData","kpis","derived","avgResponseTime","reduce","sum","item","errorRate","toFixed","uptimeData","filter","uptimePercentage","loadAllData","topLoras","errorAnalysis","insights","Promise","all","derivedMetrics","module","exports"],"sources":["metrics.js"],"sourcesContent":["/**\n * Performance Analytics - Metrics Operations Module\n * \n * Handles data loading, KPI calculations, and analytics data processing.\n */\n\n/**\n * Metrics operations for performance analytics\n */\nconst performanceMetrics = {\n    /**\n     * Loads key performance indicators\n     */\n    async loadKPIs(timeRange) {\n        try {\n            const response = await fetch((window?.BACKEND_URL || '') + `/analytics/kpis?timeRange=${timeRange}`);\n            if (!response.ok) throw new Error('Failed to load KPIs');\n            \n            const data = await response.json();\n            return data;\n            \n        } catch (error) {\n            console.error('Error loading KPIs:', error);\n            // Return mock data for development\n            return this.generateMockKPIs();\n        }\n    },\n    \n    /**\n     * Generates mock KPI data for development\n     */\n    generateMockKPIs() {\n        return {\n            total_generations: 15847,\n            generation_growth: 12.3,\n            avg_generation_time: 42.7,\n            time_improvement: -8.5,\n            success_rate: 94.3,\n            total_failed: 71,\n            active_loras: 34,\n            total_loras: 127\n        };\n    },\n    \n    /**\n     * Loads top performing LoRAs\n     */\n    async loadTopLoras(timeRange) {\n        try {\n            const response = await fetch((window?.BACKEND_URL || '') + `/analytics/top-loras?timeRange=${timeRange}`);\n            if (!response.ok) throw new Error('Failed to load top LoRAs');\n            \n            const data = await response.json();\n            return data;\n            \n        } catch (error) {\n            console.error('Error loading top LoRAs:', error);\n            return this.generateMockTopLoras();\n        }\n    },\n    \n    /**\n     * Generates mock top LoRAs data\n     */\n    generateMockTopLoras() {\n        return [\n            {\n                id: 1,\n                name: \"Anime Style v2.1\",\n                version: \"v2.1\",\n                usage_count: 342,\n                success_rate: 96.8,\n                avg_time: 42.3\n            },\n            {\n                id: 2,\n                name: \"Realistic Portrait\",\n                version: \"v1.5\",\n                usage_count: 289,\n                success_rate: 94.2,\n                avg_time: 38.7\n            },\n            {\n                id: 3,\n                name: \"Fantasy Art\",\n                version: \"v3.0\",\n                usage_count: 267,\n                success_rate: 92.1,\n                avg_time: 51.2\n            },\n            {\n                id: 4,\n                name: \"Cyberpunk Style\",\n                version: \"v1.8\",\n                usage_count: 234,\n                success_rate: 91.5,\n                avg_time: 47.8\n            },\n            {\n                id: 5,\n                name: \"Oil Painting\",\n                version: \"v2.0\",\n                usage_count: 198,\n                success_rate: 89.3,\n                avg_time: 55.1\n            }\n        ];\n    },\n    \n    /**\n     * Loads error analysis data\n     */\n    async loadErrorAnalysis(timeRange) {\n        try {\n            const response = await fetch((window?.BACKEND_URL || '') + `/analytics/errors?timeRange=${timeRange}`);\n            if (!response.ok) throw new Error('Failed to load error analysis');\n            \n            const data = await response.json();\n            return data;\n            \n        } catch (error) {\n            console.error('Error loading error analysis:', error);\n            return this.generateMockErrorAnalysis();\n        }\n    },\n    \n    /**\n     * Generates mock error analysis data\n     */\n    generateMockErrorAnalysis() {\n        return [\n            {\n                error_type: \"Out of Memory\",\n                count: 23,\n                percentage: 32.4,\n                trend: \"decreasing\"\n            },\n            {\n                error_type: \"Model Loading Failed\",\n                count: 18,\n                percentage: 25.4,\n                trend: \"stable\"\n            },\n            {\n                error_type: \"Invalid Parameters\",\n                count: 15,\n                percentage: 21.1,\n                trend: \"increasing\"\n            },\n            {\n                error_type: \"Timeout\",\n                count: 12,\n                percentage: 16.9,\n                trend: \"decreasing\"\n            },\n            {\n                error_type: \"Other\",\n                count: 3,\n                percentage: 4.2,\n                trend: \"stable\"\n            }\n        ];\n    },\n    \n    /**\n     * Loads performance insights\n     */\n    async loadPerformanceInsights(timeRange) {\n        try {\n            const response = await fetch((window?.BACKEND_URL || '') + `/analytics/insights?timeRange=${timeRange}`);\n            if (!response.ok) throw new Error('Failed to load performance insights');\n            \n            const data = await response.json();\n            return data;\n            \n        } catch (error) {\n            console.error('Error loading performance insights:', error);\n            return this.generateMockInsights();\n        }\n    },\n    \n    /**\n     * Generates mock performance insights\n     */\n    generateMockInsights() {\n        return [\n            {\n                type: \"optimization\",\n                title: \"GPU Memory Optimization Opportunity\",\n                description: \"Consider batch processing smaller images to improve GPU memory usage\",\n                impact: \"high\",\n                recommendation: \"enable_batch_processing\"\n            },\n            {\n                type: \"scaling\",\n                title: \"Peak Usage Hours Identified\",\n                description: \"Usage peaks between 2-4 PM daily. Consider auto-scaling during these hours\",\n                impact: \"medium\",\n                recommendation: \"implement_auto_scaling\"\n            },\n            {\n                type: \"maintenance\",\n                title: \"Unused LoRAs Detected\",\n                description: \"12 LoRAs haven't been used in the last 30 days\",\n                impact: \"low\",\n                recommendation: \"archive_unused_loras\"\n            }\n        ];\n    },\n    \n    /**\n     * Loads chart data for all visualizations\n     */\n    async loadChartData(timeRange) {\n        try {\n            const response = await fetch((window?.BACKEND_URL || '') + `/analytics/charts?timeRange=${timeRange}`);\n            if (!response.ok) throw new Error('Failed to load chart data');\n            \n            const data = await response.json();\n            return data;\n            \n        } catch (error) {\n            console.error('Error loading chart data:', error);\n            return this.generateMockChartData();\n        }\n    },\n    \n    /**\n     * Generates mock chart data for development\n     */\n    generateMockChartData() {\n        const hours = 24;\n        const now = new Date();\n        \n        // Generation volume data\n        const generationVolume = Array.from({ length: hours }, (_, i) => {\n            const time = new Date(now.getTime() - (hours - i - 1) * 60 * 60 * 1000);\n            return {\n                timestamp: time.toISOString(),\n                count: Math.floor(Math.random() * 50) + 10\n            };\n        });\n        \n        // Performance data\n        const performance = Array.from({ length: hours }, (_, i) => {\n            const time = new Date(now.getTime() - (hours - i - 1) * 60 * 60 * 1000);\n            return {\n                timestamp: time.toISOString(),\n                avg_time: Math.random() * 30 + 30,\n                success_rate: Math.random() * 10 + 90\n            };\n        });\n        \n        // LoRA usage data\n        const loraUsage = Array.from({ length: 10 }, (_, i) => ({\n            name: `LoRA ${i + 1}`,\n            usage: Math.floor(Math.random() * 100) + 50\n        }));\n        \n        // Resource usage data\n        const resourceUsage = Array.from({ length: hours }, (_, i) => {\n            const time = new Date(now.getTime() - (hours - i - 1) * 60 * 60 * 1000);\n            return {\n                timestamp: time.toISOString(),\n                cpu: Math.random() * 40 + 30,\n                memory: Math.random() * 30 + 50,\n                gpu: Math.random() * 50 + 40\n            };\n        });\n        \n        return {\n            generationVolume,\n            performance,\n            loraUsage,\n            resourceUsage\n        };\n    },\n    \n    /**\n     * Calculates derived metrics from raw data\n     */\n    calculateDerivedMetrics(chartData, kpis) {\n        const derived = {};\n        \n        // Calculate average response time from chart data\n        if (chartData.performance && chartData.performance.length > 0) {\n            const avgResponseTime = chartData.performance.reduce((sum, item) => sum + item.avg_time, 0) / chartData.performance.length;\n            derived.avgResponseTime = avgResponseTime;\n        }\n        \n        // Calculate error rate\n        if (kpis.total_generations && kpis.total_failed) {\n            derived.errorRate = (kpis.total_failed / kpis.total_generations * 100).toFixed(2);\n        }\n        \n        // Calculate uptime percentage\n        if (chartData.performance && chartData.performance.length > 0) {\n            const uptimeData = chartData.performance.filter(item => item.success_rate > 0);\n            derived.uptimePercentage = ((uptimeData.length / chartData.performance.length) * 100).toFixed(2);\n        }\n        \n        return derived;\n    },\n    \n    /**\n     * Loads all analytics data\n     */\n    async loadAllData(timeRange) {\n        try {\n            const [kpis, topLoras, errorAnalysis, insights, chartData] = await Promise.all([\n                this.loadKPIs(timeRange),\n                this.loadTopLoras(timeRange),\n                this.loadErrorAnalysis(timeRange),\n                this.loadPerformanceInsights(timeRange),\n                this.loadChartData(timeRange)\n            ]);\n            \n            const derivedMetrics = this.calculateDerivedMetrics(chartData, kpis);\n            \n            return {\n                kpis,\n                topLoras,\n                errorAnalysis,\n                insights,\n                chartData,\n                derivedMetrics\n            };\n            \n        } catch (error) {\n            console.error('Error loading analytics data:', error);\n            throw error;\n        }\n    }\n};\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { performanceMetrics };\n} else if (typeof window !== 'undefined') {\n    window.performanceMetrics = performanceMetrics;\n}\n"],"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","ignoreList":[]}