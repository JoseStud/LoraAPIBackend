{"version":3,"names":["_getJestObj","mock","fetchData","mockFetchData","jest","require","fn","describe","mockWindow","beforeEach","clearAllMocks","BACKEND_URL","DevLogger","error","debug","global","window","test","mockResponse","tags","mockResolvedValue","component","availableTags","loadAvailableTags","data","expect","toHaveBeenCalledWith","toEqual","mockError","Error","mockRejectedValue","stats","total_loras","system_health","status","systemHealth","refreshData","e","jobs","id","activeJobs","loadActiveJobs"],"sources":["component-loader-api.test.js"],"sourcesContent":["/**\n * Unit Tests for Component Loader API Integration\n * Tests the refactor from direct fetch to utils/api.js\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock the utils/api module\nconst mockFetchData = jest.fn();\njest.mock('../../app/frontend/static/js/utils/api.js', () => ({\n    fetchData: mockFetchData\n}));\n\ndescribe('Component Loader API Integration', () => {\n    let mockWindow;\n    \n    beforeEach(() => {\n        jest.clearAllMocks();\n        \n        // Mock window object with BACKEND_URL\n        mockWindow = {\n            BACKEND_URL: 'http://localhost:8000/api',\n            DevLogger: {\n                error: jest.fn(),\n                debug: jest.fn()\n            }\n        };\n        global.window = mockWindow;\n    });\n\n    describe('loadAvailableTags', () => {\n        test('should use fetchData with correct URL', async () => {\n            const mockResponse = { tags: ['tag1', 'tag2'] };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            // Create a mock component with the loadAvailableTags method\n            const component = {\n                availableTags: [],\n                async loadAvailableTags() {\n                    try {\n                        const { fetchData } = await import('../../app/frontend/static/js/utils/api.js');\n                        const data = await fetchData((window?.BACKEND_URL || '') + '/adapters/tags');\n                        this.availableTags = data.tags || [];\n                    } catch (error) {\n                        window.DevLogger?.error?.('[ComponentLoader] Failed to load tags:', error);\n                    }\n                }\n            };\n\n            await component.loadAvailableTags();\n\n            expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/adapters/tags');\n            expect(component.availableTags).toEqual(['tag1', 'tag2']);\n        });\n\n        test('should handle errors gracefully', async () => {\n            const mockError = new Error('Network error');\n            mockFetchData.mockRejectedValue(mockError);\n\n            const component = {\n                availableTags: [],\n                async loadAvailableTags() {\n                    try {\n                        const { fetchData } = await import('../../app/frontend/static/js/utils/api.js');\n                        const data = await fetchData((window?.BACKEND_URL || '') + '/adapters/tags');\n                        this.availableTags = data.tags || [];\n                    } catch (error) {\n                        window.DevLogger?.error?.('[ComponentLoader] Failed to load tags:', error);\n                    }\n                }\n            };\n\n            await component.loadAvailableTags();\n\n            expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/adapters/tags');\n            expect(mockWindow.DevLogger.error).toHaveBeenCalledWith('[ComponentLoader] Failed to load tags:', mockError);\n            expect(component.availableTags).toEqual([]);\n        });\n    });\n\n    describe('refreshData', () => {\n        test('should use fetchData with correct URL for dashboard stats', async () => {\n            const mockResponse = {\n                stats: { total_loras: 10 },\n                system_health: { status: 'healthy' }\n            };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            const component = {\n                stats: {},\n                systemHealth: {},\n                async refreshData() {\n                    try {\n                        const { fetchData } = await import('../../app/frontend/static/js/utils/api.js');\n                        const data = await fetchData((window?.BACKEND_URL || '') + '/dashboard/stats');\n                        this.stats = data.stats || this.stats;\n                        this.systemHealth = data.system_health || this.systemHealth;\n                    } catch (e) {\n                        window.DevLogger?.debug?.('[ComponentLoader] Dashboard data not available');\n                    }\n                }\n            };\n\n            await component.refreshData();\n\n            expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/dashboard/stats');\n            expect(component.stats).toEqual({ total_loras: 10 });\n            expect(component.systemHealth).toEqual({ status: 'healthy' });\n        });\n    });\n\n    describe('loadActiveJobs', () => {\n        test('should use fetchData with correct URL for active jobs', async () => {\n            const mockResponse = { jobs: [{ id: 1, status: 'running' }] };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            const component = {\n                activeJobs: [],\n                async loadActiveJobs() {\n                    try {\n                        const { fetchData } = await import('../../app/frontend/static/js/utils/api.js');\n                        const jobs = await fetchData((window?.BACKEND_URL || '') + '/jobs/active');\n                        this.activeJobs = jobs.jobs || [];\n                    } catch (error) {\n                        window.DevLogger?.error?.('[ComponentLoader] Failed to load active jobs:', error);\n                    }\n                }\n            };\n\n            await component.loadActiveJobs();\n\n            expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/jobs/active');\n            expect(component.activeJobs).toEqual([{ id: 1, status: 'running' }]);\n        });\n    });\n});"],"mappings":"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","ignoreList":[]}