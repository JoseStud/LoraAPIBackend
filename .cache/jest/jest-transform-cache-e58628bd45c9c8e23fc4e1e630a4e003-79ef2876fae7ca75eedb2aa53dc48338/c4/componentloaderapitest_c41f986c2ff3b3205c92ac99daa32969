f03c55950745b0afaaa9882aeb16762d
_getJestObj().mock('../../app/frontend/static/js/utils/api.js', () => ({
  fetchData: mockFetchData
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Unit Tests for Component Loader API Integration
 * Tests the refactor from direct fetch to utils/api.js
 */

import { jest } from '@jest/globals';

// Mock the utils/api module
const mockFetchData = jest.fn();
describe('Component Loader API Integration', () => {
  let mockWindow;
  beforeEach(() => {
    jest.clearAllMocks();

    // Mock window object with BACKEND_URL
    mockWindow = {
      BACKEND_URL: 'http://localhost:8000/api',
      DevLogger: {
        error: jest.fn(),
        debug: jest.fn()
      }
    };
    global.window = mockWindow;
  });
  describe('loadAvailableTags', () => {
    test('should use fetchData with correct URL', async () => {
      const mockResponse = {
        tags: ['tag1', 'tag2']
      };
      mockFetchData.mockResolvedValue(mockResponse);

      // Create a mock component with the loadAvailableTags method
      const component = {
        availableTags: [],
        async loadAvailableTags() {
          try {
            const {
              fetchData
            } = await import('../../app/frontend/static/js/utils/api.js');
            const data = await fetchData((window?.BACKEND_URL || '') + '/adapters/tags');
            this.availableTags = data.tags || [];
          } catch (error) {
            window.DevLogger?.error?.('[ComponentLoader] Failed to load tags:', error);
          }
        }
      };
      await component.loadAvailableTags();
      expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/adapters/tags');
      expect(component.availableTags).toEqual(['tag1', 'tag2']);
    });
    test('should handle errors gracefully', async () => {
      const mockError = new Error('Network error');
      mockFetchData.mockRejectedValue(mockError);
      const component = {
        availableTags: [],
        async loadAvailableTags() {
          try {
            const {
              fetchData
            } = await import('../../app/frontend/static/js/utils/api.js');
            const data = await fetchData((window?.BACKEND_URL || '') + '/adapters/tags');
            this.availableTags = data.tags || [];
          } catch (error) {
            window.DevLogger?.error?.('[ComponentLoader] Failed to load tags:', error);
          }
        }
      };
      await component.loadAvailableTags();
      expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/adapters/tags');
      expect(mockWindow.DevLogger.error).toHaveBeenCalledWith('[ComponentLoader] Failed to load tags:', mockError);
      expect(component.availableTags).toEqual([]);
    });
  });
  describe('refreshData', () => {
    test('should use fetchData with correct URL for dashboard stats', async () => {
      const mockResponse = {
        stats: {
          total_loras: 10
        },
        system_health: {
          status: 'healthy'
        }
      };
      mockFetchData.mockResolvedValue(mockResponse);
      const component = {
        stats: {},
        systemHealth: {},
        async refreshData() {
          try {
            const {
              fetchData
            } = await import('../../app/frontend/static/js/utils/api.js');
            const data = await fetchData((window?.BACKEND_URL || '') + '/dashboard/stats');
            this.stats = data.stats || this.stats;
            this.systemHealth = data.system_health || this.systemHealth;
          } catch (e) {
            window.DevLogger?.debug?.('[ComponentLoader] Dashboard data not available');
          }
        }
      };
      await component.refreshData();
      expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/dashboard/stats');
      expect(component.stats).toEqual({
        total_loras: 10
      });
      expect(component.systemHealth).toEqual({
        status: 'healthy'
      });
    });
  });
  describe('loadActiveJobs', () => {
    test('should use fetchData with correct URL for active jobs', async () => {
      const mockResponse = {
        jobs: [{
          id: 1,
          status: 'running'
        }]
      };
      mockFetchData.mockResolvedValue(mockResponse);
      const component = {
        activeJobs: [],
        async loadActiveJobs() {
          try {
            const {
              fetchData
            } = await import('../../app/frontend/static/js/utils/api.js');
            const jobs = await fetchData((window?.BACKEND_URL || '') + '/jobs/active');
            this.activeJobs = jobs.jobs || [];
          } catch (error) {
            window.DevLogger?.error?.('[ComponentLoader] Failed to load active jobs:', error);
          }
        }
      };
      await component.loadActiveJobs();
      expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/api/jobs/active');
      expect(component.activeJobs).toEqual([{
        id: 1,
        status: 'running'
      }]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,