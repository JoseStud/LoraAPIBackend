{"version":3,"names":["cov_nzc1g7a2s","actualCoverage","createDashboardComponent","f","s","loading","isInitialized","stats","total_loras","active_loras","embeddings_coverage","recent_activities_count","recent_imports","systemHealth","status","gpu_status","init","loadInitialData","refreshData","error","b","response","fetch","ok","data","json","system_health","formatNumber","num","undefined","toFixed","toString","getStatusColor","getStatusIconColor"],"sources":["index.js"],"sourcesContent":["/**\n * Dashboard Component for LoRA Manager\n * \n * This component handles the main dashboard functionality,\n * including stats display, system health monitoring, and data refresh.\n */\n\nexport function createDashboardComponent() {\n    return {\n        // Page-local loading state used by dashboard header actions\n        loading: false,\n        isInitialized: false,\n        \n        // Dashboard statistics\n        stats: {\n            total_loras: 0,\n            active_loras: 0,\n            embeddings_coverage: 0,\n            recent_activities_count: 0,\n            recent_imports: 0\n        },\n        \n        // System health monitoring\n        systemHealth: {\n            status: 'unknown',\n            gpu_status: '-' \n        },\n        \n        // Initialize the dashboard\n        init() {\n            this.loadInitialData();\n            this.isInitialized = true;\n        },\n        \n        // Load initial dashboard data\n        async loadInitialData() {\n            try {\n                await this.refreshData();\n            } catch (error) {\n                // Silently handle errors - backend may be offline\n                // Keep default values\n            }\n        },\n        \n        // Refresh dashboard data\n        async refreshData() {\n            if (this.loading) return;\n            \n            this.loading = true;\n            \n            try {\n                const response = await fetch('/api/dashboard/stats');\n                \n                if (response.ok) {\n                    const data = await response.json();\n                    \n                    // Update stats if provided\n                    if (data.stats) {\n                        this.stats = { ...this.stats, ...data.stats };\n                    }\n                    \n                    // Update system health if provided\n                    if (data.system_health) {\n                        this.systemHealth = { ...this.systemHealth, ...data.system_health };\n                    }\n                }\n            } catch (error) {\n                // Handle network errors gracefully\n                // Keep existing data, don't show error to user\n            } finally {\n                this.loading = false;\n            }\n        },\n        \n        // Format numbers for display\n        formatNumber(num) {\n            if (num === null || num === undefined) return '-';\n            if (num >= 1000) {\n                return (num / 1000).toFixed(1) + 'k';\n            }\n            return num.toString();\n        },\n        \n        // Get status color class\n        getStatusColor(status) {\n            switch (status) {\n                case 'healthy': return 'text-green-600';\n                case 'warning': return 'text-yellow-600';\n                case 'error': return 'text-red-600';\n                default: return 'text-gray-600';\n            }\n        },\n        \n        // Get status icon class\n        getStatusIconColor(status) {\n            switch (status) {\n                case 'healthy': return 'bg-green-100';\n                case 'warning': return 'bg-yellow-100';\n                case 'error': return 'bg-red-100';\n                default: return 'bg-gray-100';\n            }\n        }\n    };\n}\n"],"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","ignoreList":[]}