{"version":3,"names":["global","fetch","jest","fn","WebSocket","mockImplementation","url","close","send","addEventListener","removeEventListener","dispatchEvent","readyState","onopen","onclose","onmessage","onerror","mockData","loras","id","name","description","tags","type","file_size","created_at","updated_at","recommendations","lora_id","score","reason","analytics","kpis","total_loras","active_users","average_response_time","uptime_percentage","error_rate","usage_stats","downloads_today","uploads_today","api_calls_today","performance_metrics","timestamp","response_time","memory_usage","admin","overview","systemInfo","version","uptime","cpu_usage","disk_usage","status","workers","active","idle","failed","task","apiMocks","urlObj","URL","page","parseInt","searchParams","get","limit","filteredLoras","tagArray","split","filter","lora","some","tag","includes","start","end","paginatedLoras","slice","pagination","total","length","pages","Math","ceil","pop","find","l","Error","POST /api/loras/upload","options","hasFormData","body","FormData","isEmpty","entries","Array","from","message","DELETE /api/loras/:id","POST /api/recommendations/feedback","timeRange","format","GET /api/admin/overview","GET /api/admin/workers","POST /api/admin/workers/:id/restart","POST /api/export","Blob","POST /api/import","job_id","mockFetch","method","path","pathname","exactKey","patternKey","replace","mockFn","Promise","resolve","ok","json","error","text","headers","Map","console","log","data","isBlob","reject","JSON","stringify","blob","beforeEach","afterEach","mockClear","module","exports"],"sources":["api-mocks.js"],"sourcesContent":["/**\n * API Mocks for Integration Tests\n * Provides realistic mock responses for all API endpoints\n */\n\n// Mock fetch globally for all tests\nglobal.fetch = jest.fn();\n\n// Mock WebSocket\nglobal.WebSocket = jest.fn().mockImplementation((url) => {\n    return {\n        close: jest.fn(),\n        send: jest.fn(),\n        addEventListener: jest.fn(),\n        removeEventListener: jest.fn(),\n        dispatchEvent: jest.fn(),\n        readyState: 1, // OPEN\n        url: url,\n        onopen: null,\n        onclose: null,\n        onmessage: null,\n        onerror: null\n    };\n});\n\n// Sample data for mocking\nconst mockData = {\n    loras: [\n        {\n            id: 'test-lora-1',\n            name: 'Anime Character LoRA',\n            description: 'High-quality anime character style',\n            tags: ['anime', 'character'],\n            type: 'character',\n            file_size: 1024000,\n            created_at: '2024-01-01T00:00:00Z',\n            updated_at: '2024-01-01T00:00:00Z'\n        },\n        {\n            id: 'test-lora-2',\n            name: 'Landscape LoRA',\n            description: 'Beautiful landscape generation',\n            tags: ['landscape', 'nature'],\n            type: 'style',\n            file_size: 2048000,\n            created_at: '2024-01-02T00:00:00Z',\n            updated_at: '2024-01-02T00:00:00Z'\n        }\n    ],\n    recommendations: [\n        {\n            id: 'rec-1',\n            lora_id: 'test-lora-1',\n            score: 0.95,\n            reason: 'Based on your usage patterns'\n        }\n    ],\n    analytics: {\n        kpis: {\n            total_loras: 42,\n            active_users: 15,\n            average_response_time: 250,\n            uptime_percentage: 99.5,\n            error_rate: 0.01\n        },\n        usage_stats: {\n            downloads_today: 125,\n            uploads_today: 8,\n            api_calls_today: 1500\n        },\n        performance_metrics: [\n            { timestamp: '2024-01-01T00:00:00Z', response_time: 245, memory_usage: 75.2 },\n            { timestamp: '2024-01-01T01:00:00Z', response_time: 260, memory_usage: 78.1 }\n        ]\n    },\n    admin: {\n        overview: {\n            systemInfo: {\n                version: '2.1.0',\n                uptime: '7 days, 12 hours',\n                memory_usage: '2.1 GB',\n                cpu_usage: '15%',\n                disk_usage: '45%'\n            },\n            status: 'healthy'\n        },\n        workers: {\n            active: 3,\n            idle: 1,\n            failed: 0,\n            workers: [\n                { id: 'worker-1', status: 'active', task: 'processing_upload' },\n                { id: 'worker-2', status: 'idle', task: null },\n                { id: 'worker-3', status: 'active', task: 'generating_recommendations' }\n            ]\n        }\n    }\n};\n\n// API Mock Functions\nconst apiMocks = {\n    // LoRA Management\n    'GET /api/loras': (url) => {\n        const urlObj = new URL(url, 'http://localhost');\n        const page = parseInt(urlObj.searchParams.get('page')) || 1;\n        const limit = parseInt(urlObj.searchParams.get('limit')) || 10;\n        const tags = urlObj.searchParams.get('tags');\n        const type = urlObj.searchParams.get('type');\n        \n        let filteredLoras = [...mockData.loras];\n        \n        if (tags) {\n            const tagArray = tags.split(',');\n            filteredLoras = filteredLoras.filter(lora => \n                tagArray.some(tag => lora.tags.includes(tag))\n            );\n        }\n        \n        if (type) {\n            filteredLoras = filteredLoras.filter(lora => lora.type === type);\n        }\n        \n        const start = (page - 1) * limit;\n        const end = start + limit;\n        const paginatedLoras = filteredLoras.slice(start, end);\n        \n        return {\n            loras: paginatedLoras,\n            pagination: {\n                page,\n                limit,\n                total: filteredLoras.length,\n                pages: Math.ceil(filteredLoras.length / limit)\n            }\n        };\n    },\n    \n    'GET /api/loras/:id': (url) => {\n        const id = url.split('/').pop();\n        const lora = mockData.loras.find(l => l.id === id);\n        \n        if (!lora) {\n            throw new Error('LoRA not found');\n        }\n        \n        return lora;\n    },\n    \n    'POST /api/loras/upload': (url, options) => {\n        // Check if proper form data was sent\n        const hasFormData = options.body instanceof FormData;\n        \n        if (!hasFormData) {\n            throw new Error('File is required');\n        }\n        \n        // In a real scenario, we'd check if formData has file\n        // For mocking, we assume empty FormData means no file\n        const isEmpty = options.body.entries ? !Array.from(options.body.entries()).length : false;\n        \n        if (isEmpty) {\n            throw new Error('File is required');\n        }\n        \n        return {\n            id: 'new-lora-id',\n            name: 'Test LoRA', // Extract from form data in real implementation\n            message: 'LoRA uploaded successfully',\n            status: 'processing'\n        };\n    },\n    \n    'DELETE /api/loras/:id': () => ({\n        message: 'LoRA deleted successfully'\n    }),\n    \n    // Recommendations\n    'GET /api/recommendations': (url) => {\n        const urlObj = new URL(url, 'http://localhost');\n        const limit = parseInt(urlObj.searchParams.get('limit')) || 10;\n        \n        return {\n            recommendations: mockData.recommendations.slice(0, limit)\n        };\n    },\n    \n    'POST /api/recommendations/feedback': () => ({\n        message: 'Feedback recorded successfully'\n    }),\n    \n    // Analytics\n    'GET /api/analytics': (url) => {\n        const urlObj = new URL(url, 'http://localhost');\n        const timeRange = urlObj.searchParams.get('timeRange') || '24h';\n        \n        return {\n            ...mockData.analytics,\n            timeRange\n        };\n    },\n    \n    'GET /api/analytics/export': (url) => {\n        const urlObj = new URL(url, 'http://localhost');\n        const format = urlObj.searchParams.get('format') || 'json';\n        \n        if (format === 'csv') {\n            return 'timestamp,response_time,memory_usage\\n2024-01-01T00:00:00Z,245,75.2';\n        }\n        \n        return mockData.analytics;\n    },\n    \n    // Admin\n    'GET /api/admin/overview': () => mockData.admin.overview,\n    \n    'GET /api/admin/workers': () => mockData.admin.workers,\n    \n    'POST /api/admin/workers/:id/restart': () => ({\n        message: 'Worker restarted successfully'\n    }),\n    \n    // Import/Export\n    'POST /api/export': () => new Blob(['mock export data'], { type: 'application/json' }),\n    \n    'POST /api/import': () => ({\n        message: 'Import started successfully',\n        job_id: 'import-job-123'\n    })\n};\n\n// Mock fetch implementation\nconst mockFetch = (url, options = {}) => {\n    const method = options.method || 'GET';\n    \n    // Extract the path from the full URL\n    let path;\n    try {\n        const urlObj = new URL(url);\n        path = urlObj.pathname;\n    } catch {\n        // If URL parsing fails, assume it's already a path\n        path = url;\n    }\n    \n    // Create keys for exact and pattern matching\n    const exactKey = `${method} ${path}`;\n    const patternKey = `${method} ${path.replace(/\\/[^/]+$/, '/:id')}`;\n    \n    // Try exact match first, then pattern match\n    const mockFn = apiMocks[exactKey] || apiMocks[patternKey];\n    \n    if (!mockFn) {\n        // Handle unknown endpoints\n        if (url.includes('nonexistent')) {\n            return Promise.resolve({\n                ok: false,\n                status: 404,\n                json: () => Promise.resolve({ error: 'Not found' }),\n                text: () => Promise.resolve('Not found'),\n                headers: new Map([['content-type', 'application/json']])\n            });\n        }\n        \n        console.log(`No mock found for: ${method} ${path} (tried: ${exactKey}, ${patternKey})`);\n        \n        return Promise.resolve({\n            ok: false,\n            status: 500,\n            json: () => Promise.resolve({ error: 'Internal server error' }),\n            text: () => Promise.resolve('Internal server error')\n        });\n    }\n    \n    try {\n        const data = mockFn(url, options);\n        const isBlob = data instanceof Blob;\n        \n        return Promise.resolve({\n            ok: true,\n            status: 200,\n            json: () => isBlob ? Promise.reject(new Error('Cannot parse blob as JSON')) : Promise.resolve(data),\n            text: () => isBlob ? data.text() : Promise.resolve(typeof data === 'string' ? data : JSON.stringify(data)),\n            blob: () => isBlob ? Promise.resolve(data) : Promise.resolve(new Blob([JSON.stringify(data)])),\n            headers: new Map([\n                ['content-type', isBlob ? 'application/octet-stream' : 'application/json']\n            ])\n        });\n    } catch (error) {\n        // Handle validation errors with 400 status\n        if (error.message.includes('required') || error.message.includes('validation')) {\n            return Promise.resolve({\n                ok: false,\n                status: 400,\n                json: () => Promise.resolve({ error: error.message }),\n                text: () => Promise.resolve(error.message)\n            });\n        }\n        \n        // Handle not found errors with 404 status\n        if (error.message.includes('not found')) {\n            return Promise.resolve({\n                ok: false,\n                status: 404,\n                json: () => Promise.resolve({ error: error.message }),\n                text: () => Promise.resolve(error.message)\n            });\n        }\n        \n        // Default to 500 for other errors\n        return Promise.resolve({\n            ok: false,\n            status: 500,\n            json: () => Promise.resolve({ error: error.message }),\n            text: () => Promise.resolve(error.message)\n        });\n    }\n};\n\n// Set up fetch mock\nbeforeEach(() => {\n    fetch.mockImplementation(mockFetch);\n});\n\nafterEach(() => {\n    fetch.mockClear();\n});\n\nmodule.exports = {\n    mockFetch,\n    mockData,\n    apiMocks\n};\n"],"mappings":"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","ignoreList":[]}