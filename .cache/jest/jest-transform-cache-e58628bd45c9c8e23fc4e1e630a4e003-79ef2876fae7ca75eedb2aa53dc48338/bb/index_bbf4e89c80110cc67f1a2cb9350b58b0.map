{"version":3,"names":["cov_23xfk5e46c","actualCoverage","createSystemStatusComponent","f","s","isInitialized","expanded","lastUpdate","statusInterval","apiAvailable","init","loadSystemStatus","startStatusPolling","response","fetch","b","window","BACKEND_URL","ok","status","json","$store","app","updateSystemStatus","Date","gpu_status","memory_used","memory_total","clearInterval","error","setInterval","toggleExpanded","getStatusIcon","getGpuStatusColor","gpuStatus","toLowerCase","includes","formatMemory","used","total","usedGB","toFixed","totalGB","percentage","formatLastUpdate","now","diffSecs","Math","floor","diffMins","diffHours","systemStatus","isHealthy","gpuAvailable","gpu_available","queueLength","queue_length","destroy"],"sources":["index.js"],"sourcesContent":["/**\n * System Status Component\n * \n * Displays system health and GPU status.\n * Uses the global store for system data.\n */\n\nexport function createSystemStatusComponent() {\n    return {\n        isInitialized: false,\n        \n        // Local UI state\n        expanded: false,\n        lastUpdate: null,\n        statusInterval: null,\n        apiAvailable: true, // Flag to disable polling after 404\n        \n        init() {\n            this.loadSystemStatus();\n            this.startStatusPolling();\n            this.isInitialized = true;\n        },\n        \n        // Load initial system status\n        async loadSystemStatus() {\n            try {\n                const response = await fetch((window?.BACKEND_URL || '') + '/system/status');\n                if (response.ok) {\n                    const status = await response.json();\n                    this.$store.app.updateSystemStatus(status);\n                    this.lastUpdate = new Date();\n                } else if (response.status === 404) {\n                    // API endpoint not implemented yet, use default status and stop polling\n                    this.apiAvailable = false;\n                    this.$store.app.updateSystemStatus({\n                        gpu_status: 'Available',\n                        memory_used: 2048,\n                        memory_total: 8192,\n                        status: 'Ready'\n                    });\n                    if (this.statusInterval) {\n                        clearInterval(this.statusInterval);\n                        this.statusInterval = null;\n                    }\n                }\n            } catch (error) {\n                // Handle error silently, show in UI\n                this.$store.app.updateSystemStatus({\n                    status: 'error',\n                    gpu_status: 'Unknown'\n                });\n            }\n        },\n        \n        // Start polling for status updates\n        startStatusPolling() {\n            if (!this.apiAvailable) return; // Skip if API is not available\n            \n            const statusInterval = setInterval(async () => {\n                if (!this.apiAvailable) {\n                    clearInterval(statusInterval);\n                    return;\n                }\n                await this.loadSystemStatus();\n            }, 10000); // Every 10 seconds\n            \n            this.statusInterval = statusInterval;\n        },\n        \n        // Toggle expanded view\n        toggleExpanded() {\n            this.expanded = !this.expanded;\n        },\n        \n        // Get status icon\n        getStatusIcon(status) {\n            switch (status) {\n                case 'healthy': return '✅';\n                case 'warning': return '⚠️';\n                case 'error': return '❌';\n                default: return '❓';\n            }\n        },\n        \n        // Get GPU status color\n        getGpuStatusColor(gpuStatus) {\n            if (gpuStatus && gpuStatus.toLowerCase().includes('available')) {\n                return 'text-green-600';\n            } else if (gpuStatus && gpuStatus.toLowerCase().includes('busy')) {\n                return 'text-yellow-600';\n            } else {\n                return 'text-red-600';\n            }\n        },\n        \n        // Format memory usage\n        formatMemory(used, total) {\n            if (!used || !total) return 'N/A';\n            const usedGB = (used / 1024).toFixed(1);\n            const totalGB = (total / 1024).toFixed(1);\n            const percentage = ((used / total) * 100).toFixed(0);\n            return `${usedGB}GB / ${totalGB}GB (${percentage}%)`;\n        },\n        \n        // Format last update time\n        formatLastUpdate() {\n            if (!this.lastUpdate) return 'Never';\n            const now = new Date();\n            const diffSecs = Math.floor((now - this.lastUpdate) / 1000);\n            \n            if (diffSecs < 60) return `${diffSecs}s ago`;\n            const diffMins = Math.floor(diffSecs / 60);\n            if (diffMins < 60) return `${diffMins}m ago`;\n            const diffHours = Math.floor(diffMins / 60);\n            return `${diffHours}h ago`;\n        },\n        \n        // Computed properties\n        get systemStatus() {\n            return this.$store.app.systemStatus;\n        },\n        \n        get isHealthy() {\n            return this.systemStatus.status === 'healthy';\n        },\n        \n        get gpuAvailable() {\n            return this.systemStatus.gpu_available;\n        },\n        \n        get queueLength() {\n            return this.systemStatus.queue_length || 0;\n        },\n        \n        // Cleanup\n        destroy() {\n            if (this.statusInterval) {\n                clearInterval(this.statusInterval);\n            }\n        }\n    };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}