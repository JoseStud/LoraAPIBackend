{"version":3,"names":["_getJestObj","mock","fetchData","mockFetchData","jest","require","fn","createDashboardComponent","describe","dashboard","beforeEach","clearAllMocks","test","expect","loading","toBe","isInitialized","stats","toEqual","total_loras","active_loras","embeddings_coverage","recent_activities_count","recent_imports","systemHealth","status","gpu_status","init","loadInitialData","refreshData","formatNumber","getStatusColor","getStatusIconColor","mockResponse","system_health","mockResolvedValue","toHaveBeenCalledTimes","toHaveBeenCalledWith","mockRejectedValue","Error","originalStats","originalSystemHealth","resolvePromise","delayedPromise","Promise","resolve","mockReturnValue","refreshPromise","not","toHaveBeenCalled","undefined"],"sources":["dashboard.test.js"],"sourcesContent":["/**\n * Dashboard Component Tests\n * Tests for dashboard functionality after refactoring to use utils/api.js\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock the utils/api module\nconst mockFetchData = jest.fn();\njest.mock('../../../app/frontend/static/js/utils/api.js', () => ({\n    fetchData: mockFetchData\n}));\n\n// Import dashboard component after mocking\nconst { createDashboardComponent } = await import('../../../app/frontend/static/js/components/dashboard/index.js');\n\ndescribe('Dashboard Component', () => {\n    let dashboard;\n\n    beforeEach(() => {\n        // Reset mocks\n        jest.clearAllMocks();\n        \n        // Create fresh dashboard instance\n        dashboard = createDashboardComponent();\n    });\n\n    describe('Component Initialization', () => {\n        test('should initialize with default values', () => {\n            expect(dashboard.loading).toBe(false);\n            expect(dashboard.isInitialized).toBe(false);\n            expect(dashboard.stats).toEqual({\n                total_loras: 0,\n                active_loras: 0,\n                embeddings_coverage: 0,\n                recent_activities_count: 0,\n                recent_imports: 0\n            });\n            expect(dashboard.systemHealth).toEqual({\n                status: 'unknown',\n                gpu_status: '-'\n            });\n        });\n\n        test('should have all required methods', () => {\n            expect(typeof dashboard.init).toBe('function');\n            expect(typeof dashboard.loadInitialData).toBe('function');\n            expect(typeof dashboard.refreshData).toBe('function');\n            expect(typeof dashboard.formatNumber).toBe('function');\n            expect(typeof dashboard.getStatusColor).toBe('function');\n            expect(typeof dashboard.getStatusIconColor).toBe('function');\n        });\n    });\n\n    describe('Data Fetching', () => {\n        test('should call fetchData with correct endpoint', async () => {\n            // Mock successful API response\n            const mockResponse = {\n                stats: {\n                    total_loras: 10,\n                    active_loras: 5\n                },\n                system_health: {\n                    status: 'healthy',\n                    gpu_status: 'available'\n                }\n            };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            await dashboard.refreshData();\n\n            // Verify fetchData was called with correct endpoint\n            expect(mockFetchData).toHaveBeenCalledTimes(1);\n            expect(mockFetchData).toHaveBeenCalledWith('/api/dashboard/stats');\n        });\n\n        test('should update stats when API returns data', async () => {\n            const mockResponse = {\n                stats: {\n                    total_loras: 15,\n                    active_loras: 8,\n                    embeddings_coverage: 75\n                },\n                system_health: {\n                    status: 'healthy',\n                    gpu_status: 'available'\n                }\n            };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            await dashboard.refreshData();\n\n            // Verify stats were updated\n            expect(dashboard.stats.total_loras).toBe(15);\n            expect(dashboard.stats.active_loras).toBe(8);\n            expect(dashboard.stats.embeddings_coverage).toBe(75);\n            \n            // Verify system health was updated\n            expect(dashboard.systemHealth.status).toBe('healthy');\n            expect(dashboard.systemHealth.gpu_status).toBe('available');\n        });\n\n        test('should handle API errors gracefully', async () => {\n            // Mock API error\n            mockFetchData.mockRejectedValue(new Error('Network error'));\n\n            const originalStats = { ...dashboard.stats };\n            const originalSystemHealth = { ...dashboard.systemHealth };\n\n            await dashboard.refreshData();\n\n            // Verify stats remain unchanged on error\n            expect(dashboard.stats).toEqual(originalStats);\n            expect(dashboard.systemHealth).toEqual(originalSystemHealth);\n            expect(dashboard.loading).toBe(false);\n        });\n\n        test('should handle partial data updates', async () => {\n            // Mock response with only stats (no system_health)\n            const mockResponse = {\n                stats: {\n                    total_loras: 20\n                }\n            };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            await dashboard.refreshData();\n\n            // Verify only stats were updated, system health unchanged\n            expect(dashboard.stats.total_loras).toBe(20);\n            expect(dashboard.systemHealth.status).toBe('unknown'); // original value\n        });\n\n        test('should manage loading state correctly', async () => {\n            // Mock delayed response\n            let resolvePromise;\n            const delayedPromise = new Promise(resolve => {\n                resolvePromise = resolve;\n            });\n            mockFetchData.mockReturnValue(delayedPromise);\n\n            // Start refresh\n            const refreshPromise = dashboard.refreshData();\n\n            // Verify loading state is set\n            expect(dashboard.loading).toBe(true);\n\n            // Resolve the promise\n            resolvePromise({ stats: {}, system_health: {} });\n            await refreshPromise;\n\n            // Verify loading state is cleared\n            expect(dashboard.loading).toBe(false);\n        });\n\n        test('should prevent concurrent refreshes', async () => {\n            dashboard.loading = true;\n\n            await dashboard.refreshData();\n\n            // Verify fetchData was not called when already loading\n            expect(mockFetchData).not.toHaveBeenCalled();\n        });\n    });\n\n    describe('Data Formatting', () => {\n        test('should format numbers correctly', () => {\n            expect(dashboard.formatNumber(null)).toBe('-');\n            expect(dashboard.formatNumber(undefined)).toBe('-');\n            expect(dashboard.formatNumber(0)).toBe('0');\n            expect(dashboard.formatNumber(500)).toBe('500');\n            expect(dashboard.formatNumber(1000)).toBe('1.0k');\n            expect(dashboard.formatNumber(1500)).toBe('1.5k');\n            expect(dashboard.formatNumber(10000)).toBe('10.0k');\n        });\n\n        test('should return correct status colors', () => {\n            expect(dashboard.getStatusColor('healthy')).toBe('text-green-600');\n            expect(dashboard.getStatusColor('warning')).toBe('text-yellow-600');\n            expect(dashboard.getStatusColor('error')).toBe('text-red-600');\n            expect(dashboard.getStatusColor('unknown')).toBe('text-gray-600');\n            expect(dashboard.getStatusColor('invalid')).toBe('text-gray-600');\n        });\n\n        test('should return correct status icon colors', () => {\n            expect(dashboard.getStatusIconColor('healthy')).toBe('bg-green-100');\n            expect(dashboard.getStatusIconColor('warning')).toBe('bg-yellow-100');\n            expect(dashboard.getStatusIconColor('error')).toBe('bg-red-100');\n            expect(dashboard.getStatusIconColor('unknown')).toBe('bg-gray-100');\n            expect(dashboard.getStatusIconColor('invalid')).toBe('bg-gray-100');\n        });\n    });\n\n    describe('Initialization Flow', () => {\n        test('should load initial data on init', async () => {\n            const mockResponse = { stats: {}, system_health: {} };\n            mockFetchData.mockResolvedValue(mockResponse);\n\n            await dashboard.init();\n\n            expect(dashboard.isInitialized).toBe(true);\n            expect(mockFetchData).toHaveBeenCalledWith('/api/dashboard/stats');\n        });\n\n        test('should handle initialization errors gracefully', async () => {\n            mockFetchData.mockRejectedValue(new Error('Init error'));\n\n            await dashboard.init();\n\n            // Should still be marked as initialized even if data load fails\n            expect(dashboard.isInitialized).toBe(true);\n        });\n    });\n});"],"mappings":"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","ignoreList":[]}