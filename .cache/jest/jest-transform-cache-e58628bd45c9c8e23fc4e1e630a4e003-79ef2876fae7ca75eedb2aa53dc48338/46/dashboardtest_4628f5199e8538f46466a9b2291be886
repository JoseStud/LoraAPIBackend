5ccba6a9d0151ef4b1ffacbeb59e7904
_getJestObj().mock('../../../app/frontend/static/js/utils/api.js', () => ({
  fetchData: mockFetchData
}));

// Import dashboard component after mocking
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Dashboard Component Tests
 * Tests for dashboard functionality after refactoring to use utils/api.js
 */

import { jest } from '@jest/globals';

// Mock the utils/api module
const mockFetchData = jest.fn();
const {
  createDashboardComponent
} = await import('../../../app/frontend/static/js/components/dashboard/index.js');
describe('Dashboard Component', () => {
  let dashboard;
  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();

    // Create fresh dashboard instance
    dashboard = createDashboardComponent();
  });
  describe('Component Initialization', () => {
    test('should initialize with default values', () => {
      expect(dashboard.loading).toBe(false);
      expect(dashboard.isInitialized).toBe(false);
      expect(dashboard.stats).toEqual({
        total_loras: 0,
        active_loras: 0,
        embeddings_coverage: 0,
        recent_activities_count: 0,
        recent_imports: 0
      });
      expect(dashboard.systemHealth).toEqual({
        status: 'unknown',
        gpu_status: '-'
      });
    });
    test('should have all required methods', () => {
      expect(typeof dashboard.init).toBe('function');
      expect(typeof dashboard.loadInitialData).toBe('function');
      expect(typeof dashboard.refreshData).toBe('function');
      expect(typeof dashboard.formatNumber).toBe('function');
      expect(typeof dashboard.getStatusColor).toBe('function');
      expect(typeof dashboard.getStatusIconColor).toBe('function');
    });
  });
  describe('Data Fetching', () => {
    test('should call fetchData with correct endpoint', async () => {
      // Mock successful API response
      const mockResponse = {
        stats: {
          total_loras: 10,
          active_loras: 5
        },
        system_health: {
          status: 'healthy',
          gpu_status: 'available'
        }
      };
      mockFetchData.mockResolvedValue(mockResponse);
      await dashboard.refreshData();

      // Verify fetchData was called with correct endpoint
      expect(mockFetchData).toHaveBeenCalledTimes(1);
      expect(mockFetchData).toHaveBeenCalledWith('/api/dashboard/stats');
    });
    test('should update stats when API returns data', async () => {
      const mockResponse = {
        stats: {
          total_loras: 15,
          active_loras: 8,
          embeddings_coverage: 75
        },
        system_health: {
          status: 'healthy',
          gpu_status: 'available'
        }
      };
      mockFetchData.mockResolvedValue(mockResponse);
      await dashboard.refreshData();

      // Verify stats were updated
      expect(dashboard.stats.total_loras).toBe(15);
      expect(dashboard.stats.active_loras).toBe(8);
      expect(dashboard.stats.embeddings_coverage).toBe(75);

      // Verify system health was updated
      expect(dashboard.systemHealth.status).toBe('healthy');
      expect(dashboard.systemHealth.gpu_status).toBe('available');
    });
    test('should handle API errors gracefully', async () => {
      // Mock API error
      mockFetchData.mockRejectedValue(new Error('Network error'));
      const originalStats = {
        ...dashboard.stats
      };
      const originalSystemHealth = {
        ...dashboard.systemHealth
      };
      await dashboard.refreshData();

      // Verify stats remain unchanged on error
      expect(dashboard.stats).toEqual(originalStats);
      expect(dashboard.systemHealth).toEqual(originalSystemHealth);
      expect(dashboard.loading).toBe(false);
    });
    test('should handle partial data updates', async () => {
      // Mock response with only stats (no system_health)
      const mockResponse = {
        stats: {
          total_loras: 20
        }
      };
      mockFetchData.mockResolvedValue(mockResponse);
      await dashboard.refreshData();

      // Verify only stats were updated, system health unchanged
      expect(dashboard.stats.total_loras).toBe(20);
      expect(dashboard.systemHealth.status).toBe('unknown'); // original value
    });
    test('should manage loading state correctly', async () => {
      // Mock delayed response
      let resolvePromise;
      const delayedPromise = new Promise(resolve => {
        resolvePromise = resolve;
      });
      mockFetchData.mockReturnValue(delayedPromise);

      // Start refresh
      const refreshPromise = dashboard.refreshData();

      // Verify loading state is set
      expect(dashboard.loading).toBe(true);

      // Resolve the promise
      resolvePromise({
        stats: {},
        system_health: {}
      });
      await refreshPromise;

      // Verify loading state is cleared
      expect(dashboard.loading).toBe(false);
    });
    test('should prevent concurrent refreshes', async () => {
      dashboard.loading = true;
      await dashboard.refreshData();

      // Verify fetchData was not called when already loading
      expect(mockFetchData).not.toHaveBeenCalled();
    });
  });
  describe('Data Formatting', () => {
    test('should format numbers correctly', () => {
      expect(dashboard.formatNumber(null)).toBe('-');
      expect(dashboard.formatNumber(undefined)).toBe('-');
      expect(dashboard.formatNumber(0)).toBe('0');
      expect(dashboard.formatNumber(500)).toBe('500');
      expect(dashboard.formatNumber(1000)).toBe('1.0k');
      expect(dashboard.formatNumber(1500)).toBe('1.5k');
      expect(dashboard.formatNumber(10000)).toBe('10.0k');
    });
    test('should return correct status colors', () => {
      expect(dashboard.getStatusColor('healthy')).toBe('text-green-600');
      expect(dashboard.getStatusColor('warning')).toBe('text-yellow-600');
      expect(dashboard.getStatusColor('error')).toBe('text-red-600');
      expect(dashboard.getStatusColor('unknown')).toBe('text-gray-600');
      expect(dashboard.getStatusColor('invalid')).toBe('text-gray-600');
    });
    test('should return correct status icon colors', () => {
      expect(dashboard.getStatusIconColor('healthy')).toBe('bg-green-100');
      expect(dashboard.getStatusIconColor('warning')).toBe('bg-yellow-100');
      expect(dashboard.getStatusIconColor('error')).toBe('bg-red-100');
      expect(dashboard.getStatusIconColor('unknown')).toBe('bg-gray-100');
      expect(dashboard.getStatusIconColor('invalid')).toBe('bg-gray-100');
    });
  });
  describe('Initialization Flow', () => {
    test('should load initial data on init', async () => {
      const mockResponse = {
        stats: {},
        system_health: {}
      };
      mockFetchData.mockResolvedValue(mockResponse);
      await dashboard.init();
      expect(dashboard.isInitialized).toBe(true);
      expect(mockFetchData).toHaveBeenCalledWith('/api/dashboard/stats');
    });
    test('should handle initialization errors gracefully', async () => {
      mockFetchData.mockRejectedValue(new Error('Init error'));
      await dashboard.init();

      // Should still be marked as initialized even if data load fails
      expect(dashboard.isInitialized).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,