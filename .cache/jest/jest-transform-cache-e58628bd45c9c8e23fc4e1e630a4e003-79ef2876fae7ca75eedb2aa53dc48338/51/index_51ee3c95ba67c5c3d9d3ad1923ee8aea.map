{"version":3,"names":["cov_1egac4n9s7","actualCoverage","createGenerationFormComponent","f","s","isInitialized","params","prompt","negative_prompt","width","height","steps","cfg_scale","seed","batch_count","batch_size","validation","isValid","errors","isGenerating","init","loadSavedParams","saved","localStorage","getItem","b","parsed","JSON","parse","Object","assign","error","saveParams","setItem","stringify","validateForm","trim","push","length","startGeneration","jobId","job","id","Date","now","name","substring","status","$store","app","addJob","response","fetch","window","BACKEND_URL","method","headers","body","ok","result","json","updateJob","job_id","addNotification","Error","removeJob","message","clearPrompt","randomSeed","Math","floor","random","canGenerate","hasActiveJobs","activeJobs"],"sources":["index.js"],"sourcesContent":["/**\n * Generation Form Component\n * \n * Handles only the generation parameters and starting generations.\n * Uses the global store for shared state like activeJobs.\n */\n\nexport function createGenerationFormComponent() {\n    return {\n        // Component initialization\n        isInitialized: false,\n        \n        // Form-specific state only\n        params: {\n            prompt: '',\n            negative_prompt: '',\n            width: 512,\n            height: 512,\n            steps: 20,\n            cfg_scale: 7.0,\n            seed: -1,\n            batch_count: 1,\n            batch_size: 1\n        },\n        \n        // Form validation\n        validation: {\n            isValid: true,\n            errors: []\n        },\n        \n        // Local UI state\n        isGenerating: false,\n        \n        init() {\n            this.loadSavedParams();\n            this.isInitialized = true;\n        },\n        \n        // Load saved parameters from localStorage\n        loadSavedParams() {\n            try {\n                const saved = localStorage.getItem('generation_params');\n                if (saved) {\n                    const parsed = JSON.parse(saved);\n                    Object.assign(this.params, parsed);\n                }\n            } catch (error) {\n                // Ignore invalid saved data\n            }\n        },\n        \n        // Save parameters to localStorage\n        saveParams() {\n            localStorage.setItem('generation_params', JSON.stringify(this.params));\n        },\n        \n        // Validate the form\n        validateForm() {\n            this.validation.errors = [];\n            \n            if (!this.params.prompt.trim()) {\n                this.validation.errors.push('Prompt is required');\n            }\n            \n            if (this.params.width < 128 || this.params.width > 2048) {\n                this.validation.errors.push('Width must be between 128 and 2048');\n            }\n            \n            if (this.params.height < 128 || this.params.height > 2048) {\n                this.validation.errors.push('Height must be between 128 and 2048');\n            }\n            \n            this.validation.isValid = this.validation.errors.length === 0;\n            return this.validation.isValid;\n        },\n        \n        // Start generation (uses global store)\n        async startGeneration() {\n            if (this.isGenerating || !this.validateForm()) {\n                return;\n            }\n            \n            this.isGenerating = true;\n            let jobId = null;\n            \n            try {\n                // Save params for next time\n                this.saveParams();\n                \n                // Create job object\n                const job = {\n                    id: `gen_${Date.now()}`,\n                    name: `Generate: ${this.params.prompt.substring(0, 30)}...`,\n                    params: { ...this.params },\n                    status: 'starting'\n                };\n                \n                jobId = job.id;\n                \n                // Add to global store\n                this.$store.app.addJob(job);\n                \n                // Make API call\n                const response = await fetch((window?.BACKEND_URL || '') + '/generation/generate', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(this.params)\n                });\n                \n                if (response.ok) {\n                    const result = await response.json();\n                    \n                    // Update job in store\n                    this.$store.app.updateJob(jobId, {\n                        status: 'running',\n                        jobId: result.job_id\n                    });\n                    \n                    // Show success notification\n                    this.$store.app.addNotification('Generation started successfully', 'success');\n                    \n                } else {\n                    throw new Error('Failed to start generation');\n                }\n                \n            } catch (error) {\n                // Remove failed job from store\n                if (jobId) {\n                    this.$store.app.removeJob(jobId);\n                }\n                \n                // Show error notification\n                this.$store.app.addNotification(`Generation failed: ${error.message}`, 'error');\n                \n            } finally {\n                this.isGenerating = false;\n            }\n        },\n        \n        // Quick actions\n        clearPrompt() {\n            this.params.prompt = '';\n        },\n        \n        randomSeed() {\n            this.params.seed = Math.floor(Math.random() * 1000000);\n        },\n        \n        // Computed properties\n        get canGenerate() {\n            return !this.isGenerating && this.params.prompt.trim().length > 0;\n        },\n        \n        get hasActiveJobs() {\n            return this.$store.app.activeJobs.length > 0;\n        }\n    };\n}\n"],"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","ignoreList":[]}