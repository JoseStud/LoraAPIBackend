{"version":3,"names":["describe","mockElement","createMobileNavComponent","isOpen","toggle","updateUI","open","close","menu","document","querySelector","classList","add","body","style","overflow","remove","handleKeydown","event","key","init","addEventListener","e","window","setTimeout","beforeEach","innerHTML","jest","fn","afterEach","clearAllMocks","test","component","expect","toBe","toHaveBeenCalledWith","any","Function","contains","escapeEvent","KeyboardEvent","enterEvent","not","toThrow","links","querySelectorAll","length","getAttribute"],"sources":["mobile-nav.test.js"],"sourcesContent":["/**\n * Unit Tests for Mobile Navigation Component\n */\n\ndescribe('Mobile Navigation Component', () => {\n    let mockElement;\n    \n    // Create a mock mobile navigation component for testing\n    const createMobileNavComponent = () => {\n        return {\n            isOpen: false,\n            \n            toggle() {\n                this.isOpen = !this.isOpen;\n                this.updateUI();\n            },\n            \n            open() {\n                this.isOpen = true;\n                this.updateUI();\n            },\n            \n            close() {\n                this.isOpen = false;\n                this.updateUI();\n            },\n            \n            updateUI() {\n                const menu = document.querySelector('.mobile-nav-menu');\n                if (menu) {\n                    if (this.isOpen) {\n                        menu.classList.add('active');\n                        document.body.style.overflow = 'hidden';\n                    } else {\n                        menu.classList.remove('active');\n                        document.body.style.overflow = '';\n                    }\n                }\n            },\n            \n            handleKeydown(event) {\n                if (event.key === 'Escape' && this.isOpen) {\n                    this.close();\n                }\n            },\n            \n            init() {\n                document.addEventListener('keydown', (e) => this.handleKeydown(e));\n                window.addEventListener('orientationchange', () => {\n                    if (this.isOpen) {\n                        setTimeout(() => this.updateUI(), 100);\n                    }\n                });\n            }\n        };\n    };\n    \n    beforeEach(() => {\n        // Setup DOM\n        document.body.innerHTML = `\n            <div class=\"mobile-nav-menu\">\n                <div class=\"mobile-nav-links\">\n                    <a href=\"/\" class=\"mobile-nav-link\">Home</a>\n                    <a href=\"/loras\" class=\"mobile-nav-link\">LoRAs</a>\n                </div>\n            </div>\n        `;\n        \n        mockElement = document.querySelector('.mobile-nav-menu');\n        \n        // Mock DOM methods\n        document.addEventListener = jest.fn();\n        window.addEventListener = jest.fn();\n        document.body.style = {};\n    });\n    \n    afterEach(() => {\n        jest.clearAllMocks();\n    });\n    \n    describe('Initialization', () => {\n        test('should initialize with closed state', () => {\n            const component = createMobileNavComponent();\n            expect(component.isOpen).toBe(false);\n        });\n        \n        test('should set up event listeners', () => {\n            const component = createMobileNavComponent();\n            component.init();\n            \n            expect(document.addEventListener).toHaveBeenCalledWith(\n                'keydown',\n                expect.any(Function)\n            );\n            expect(window.addEventListener).toHaveBeenCalledWith(\n                'orientationchange',\n                expect.any(Function)\n            );\n        });\n    });\n    \n    describe('Toggle Functionality', () => {\n        test('should toggle navigation state', () => {\n            const component = createMobileNavComponent();\n            \n            expect(component.isOpen).toBe(false);\n            \n            component.toggle();\n            expect(component.isOpen).toBe(true);\n            \n            component.toggle();\n            expect(component.isOpen).toBe(false);\n        });\n        \n        test('should add active class when opened', () => {\n            const component = createMobileNavComponent();\n            \n            component.open();\n            \n            expect(mockElement.classList.contains('active')).toBe(true);\n            expect(document.body.style.overflow).toBe('hidden');\n        });\n        \n        test('should remove active class when closed', () => {\n            const component = createMobileNavComponent();\n            \n            // First open\n            component.open();\n            expect(mockElement.classList.contains('active')).toBe(true);\n            \n            // Then close\n            component.close();\n            expect(mockElement.classList.contains('active')).toBe(false);\n            expect(document.body.style.overflow).toBe('');\n        });\n    });\n    \n    describe('Keyboard Navigation', () => {\n        test('should close on Escape key when open', () => {\n            const component = createMobileNavComponent();\n            component.open();\n            \n            expect(component.isOpen).toBe(true);\n            \n            const escapeEvent = new KeyboardEvent('keydown', { key: 'Escape' });\n            component.handleKeydown(escapeEvent);\n            \n            expect(component.isOpen).toBe(false);\n        });\n        \n        test('should not close on Escape key when already closed', () => {\n            const component = createMobileNavComponent();\n            \n            expect(component.isOpen).toBe(false);\n            \n            const escapeEvent = new KeyboardEvent('keydown', { key: 'Escape' });\n            component.handleKeydown(escapeEvent);\n            \n            expect(component.isOpen).toBe(false);\n        });\n        \n        test('should ignore other keys', () => {\n            const component = createMobileNavComponent();\n            component.open();\n            \n            expect(component.isOpen).toBe(true);\n            \n            const enterEvent = new KeyboardEvent('keydown', { key: 'Enter' });\n            component.handleKeydown(enterEvent);\n            \n            expect(component.isOpen).toBe(true);\n        });\n    });\n    \n    describe('DOM Interaction', () => {\n        test('should handle missing menu element gracefully', () => {\n            document.body.innerHTML = '';\n            const component = createMobileNavComponent();\n            \n            expect(() => {\n                component.updateUI();\n            }).not.toThrow();\n        });\n        \n        test('should find navigation links', () => {\n            const links = document.querySelectorAll('.mobile-nav-link');\n            expect(links.length).toBe(2);\n            expect(links[0].getAttribute('href')).toBe('/');\n            expect(links[1].getAttribute('href')).toBe('/loras');\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}