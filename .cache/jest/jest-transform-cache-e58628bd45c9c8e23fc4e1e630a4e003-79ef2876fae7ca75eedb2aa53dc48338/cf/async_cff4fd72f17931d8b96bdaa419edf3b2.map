{"version":3,"names":["cov_2dwuis6rfq","actualCoverage","delay","ms","f","s","Promise","resolve","setTimeout","debounce","func","wait","immediate","b","timeout","executedFunction","args","later","apply","callNow","clearTimeout","throttle","limit","inThrottle","retryWithBackoff","operation","maxRetries","baseDelay","lastError","attempt","error","delayMs","Math","pow","withTimeout","promise","timeoutMs","timeoutPromise","_","reject","Error","race","processBatches","items","processor","batchSize","results","i","length","batch","slice","batchResults","all","map","push","simulateProgress","updateCallback","options","duration","initialSpeed","slowDownAt","finalSpeed","maxProgress","progress","startTime","Date","now","interval","setInterval","elapsed","timeProgress","speed","slowFactor","randomFactor","random","min","round","clearInterval"],"sources":["async.js"],"sourcesContent":["/**\n * Async Operation Utilities\n * \n * Functions for handling asynchronous operations, delays,\n * debouncing, throttling, and other async patterns.\n */\n\n/**\n * Create a delay/sleep function\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise} Promise that resolves after the delay\n */\nexport function delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Debounce a function - delays execution until after wait time has elapsed\n * @param {Function} func - The function to debounce\n * @param {number} wait - The wait time in milliseconds\n * @param {boolean} immediate - Whether to trigger on leading edge\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n    let timeout;\n    \n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(this, args);\n        };\n        \n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        \n        if (callNow) func.apply(this, args);\n    };\n}\n\n/**\n * Throttle a function - limits execution to once per specified time period\n * @param {Function} func - The function to throttle\n * @param {number} limit - The time limit in milliseconds\n * @returns {Function} Throttled function\n */\nexport function throttle(func, limit) {\n    let inThrottle;\n    \n    return function executedFunction(...args) {\n        if (!inThrottle) {\n            func.apply(this, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit);\n        }\n    };\n}\n\n/**\n * Retry an async operation with exponential backoff\n * @param {Function} operation - The async operation to retry\n * @param {number} maxRetries - Maximum number of retries\n * @param {number} baseDelay - Base delay in milliseconds\n * @returns {Promise} Promise that resolves/rejects based on operation result\n */\nexport async function retryWithBackoff(operation, maxRetries = 3, baseDelay = 1000) {\n    let lastError;\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n        try {\n            return await operation();\n        } catch (error) {\n            lastError = error;\n            \n            if (attempt === maxRetries) {\n                throw lastError;\n            }\n            \n            const delayMs = baseDelay * Math.pow(2, attempt);\n            await delay(delayMs);\n        }\n    }\n}\n\n/**\n * Execute async operations with a timeout\n * @param {Promise} promise - The promise to execute\n * @param {number} timeoutMs - Timeout in milliseconds\n * @returns {Promise} Promise that resolves/rejects based on operation or timeout\n */\nexport function withTimeout(promise, timeoutMs) {\n    const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs);\n    });\n    \n    return Promise.race([promise, timeoutPromise]);\n}\n\n/**\n * Execute async operations in batches\n * @param {Array} items - Items to process\n * @param {Function} processor - Async function to process each item\n * @param {number} batchSize - Number of items to process concurrently\n * @returns {Promise<Array>} Promise that resolves to array of results\n */\nexport async function processBatches(items, processor, batchSize = 5) {\n    const results = [];\n    \n    for (let i = 0; i < items.length; i += batchSize) {\n        const batch = items.slice(i, i + batchSize);\n        const batchResults = await Promise.all(batch.map(processor));\n        results.push(...batchResults);\n    }\n    \n    return results;\n}\n\n/**\n * Simulate progress for long-running operations\n * @param {Function} updateCallback - Callback to update progress (receives percentage)\n * @param {Object} options - Options for progress simulation\n * @returns {Function} Function to stop progress simulation\n */\nexport function simulateProgress(updateCallback, options = {}) {\n    const {\n        duration = 10000,        // Total duration in ms\n        initialSpeed = 20,       // Initial progress speed\n        slowDownAt = 80,         // Start slowing down at this percentage\n        finalSpeed = 2,          // Final progress speed\n        maxProgress = 95         // Don't go beyond this percentage\n    } = options;\n    \n    let progress = 0;\n    const startTime = Date.now();\n    \n    const interval = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        const timeProgress = (elapsed / duration) * 100;\n        \n        // Calculate speed based on progress\n        let speed = initialSpeed;\n        if (progress > slowDownAt) {\n            const slowFactor = (progress - slowDownAt) / (100 - slowDownAt);\n            speed = initialSpeed - (initialSpeed - finalSpeed) * slowFactor;\n        }\n        \n        // Add some randomness\n        const randomFactor = 0.5 + Math.random();\n        progress += (speed * randomFactor) / 100;\n        \n        // Don't exceed max progress or 100%\n        progress = Math.min(progress, maxProgress, timeProgress);\n        \n        updateCallback(Math.round(progress));\n        \n        // Stop if we've reached max progress or duration\n        if (progress >= maxProgress || elapsed >= duration) {\n            clearInterval(interval);\n        }\n    }, 100);\n    \n    // Return function to stop simulation\n    return () => clearInterval(interval);\n}\n"],"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","ignoreList":[]}