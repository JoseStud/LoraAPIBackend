{"version":3,"names":["describe","mockFetchData","originalWindow","beforeEach","global","window","BACKEND_URL","jest","fn","doMock","fetchData","afterEach","resetModules","clearAllMocks","test","mockLoraData","items","id","name","mockResolvedValue","createRecommendationsComponent","require","component","loadAvailableLoras","expect","toHaveBeenCalledWith","availableLoras","toEqual","isLoading","toBe","mockError","Error","mockRejectedValue","mockShowToast","showToastMessage","mockDirectArray"],"sources":["recommendations-api-refactor.test.js"],"sourcesContent":["/**\n * Test for recommendations module refactoring to use utils/api.js\n */\n\ndescribe('Recommendations Module API Refactoring', () => {\n    let mockFetchData;\n    let originalWindow;\n\n    beforeEach(() => {\n        // Save original window\n        originalWindow = global.window;\n        \n        // Setup mock window\n        global.window = {\n            BACKEND_URL: 'http://localhost:8000'\n        };\n\n        // Mock fetchData\n        mockFetchData = jest.fn();\n        \n        // Mock the module\n        jest.doMock('../../app/frontend/static/js/utils/api.js', () => ({\n            fetchData: mockFetchData\n        }));\n    });\n\n    afterEach(() => {\n        // Restore window\n        global.window = originalWindow;\n        jest.resetModules();\n        jest.clearAllMocks();\n    });\n\n    test('should use fetchData instead of raw fetch for loading LoRAs', async () => {\n        // Arrange\n        const mockLoraData = {\n            items: [\n                { id: '1', name: 'Test LoRA 1' },\n                { id: '2', name: 'Test LoRA 2' }\n            ]\n        };\n        mockFetchData.mockResolvedValue(mockLoraData);\n\n        // Import after mocking\n        const { createRecommendationsComponent } = require('../../app/frontend/static/js/components/recommendations/index.js');\n        const component = createRecommendationsComponent();\n\n        // Act\n        await component.loadAvailableLoras();\n\n        // Assert\n        expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/adapters');\n        expect(component.availableLoras).toEqual(mockLoraData.items);\n        expect(component.isLoading).toBe(false);\n    });\n\n    test('should handle API errors gracefully', async () => {\n        // Arrange\n        const mockError = new Error('API Error');\n        mockFetchData.mockRejectedValue(mockError);\n\n        const { createRecommendationsComponent } = require('../../app/frontend/static/js/components/recommendations/index.js');\n        const component = createRecommendationsComponent();\n        \n        // Mock the toast method\n        const mockShowToast = jest.fn();\n        component.showToastMessage = mockShowToast;\n\n        // Act\n        await component.loadAvailableLoras();\n\n        // Assert\n        expect(mockShowToast).toHaveBeenCalledWith('Failed to load LoRAs', 'error');\n        expect(component.isLoading).toBe(false);\n    });\n\n    test('should handle data with direct array format', async () => {\n        // Arrange - API returns array directly instead of wrapped in items\n        const mockDirectArray = [\n            { id: '1', name: 'Direct LoRA 1' },\n            { id: '2', name: 'Direct LoRA 2' }\n        ];\n        mockFetchData.mockResolvedValue(mockDirectArray);\n\n        const { createRecommendationsComponent } = require('../../app/frontend/static/js/components/recommendations/index.js');\n        const component = createRecommendationsComponent();\n\n        // Act\n        await component.loadAvailableLoras();\n\n        // Assert\n        expect(component.availableLoras).toEqual(mockDirectArray);\n    });\n});"],"mappings":"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","ignoreList":[]}