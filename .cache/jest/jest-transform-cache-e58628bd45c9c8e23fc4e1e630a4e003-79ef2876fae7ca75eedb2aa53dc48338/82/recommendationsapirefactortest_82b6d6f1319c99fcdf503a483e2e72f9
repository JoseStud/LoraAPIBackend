816d0ae0fdfa2f8205f799f496225d2f
/**
 * Test for recommendations module refactoring to use utils/api.js
 */

describe('Recommendations Module API Refactoring', () => {
  let mockFetchData;
  let originalWindow;
  beforeEach(() => {
    // Save original window
    originalWindow = global.window;

    // Setup mock window
    global.window = {
      BACKEND_URL: 'http://localhost:8000'
    };

    // Mock fetchData
    mockFetchData = jest.fn();

    // Mock the module
    jest.doMock('../../app/frontend/static/js/utils/api.js', () => ({
      fetchData: mockFetchData
    }));
  });
  afterEach(() => {
    // Restore window
    global.window = originalWindow;
    jest.resetModules();
    jest.clearAllMocks();
  });
  test('should use fetchData instead of raw fetch for loading LoRAs', async () => {
    // Arrange
    const mockLoraData = {
      items: [{
        id: '1',
        name: 'Test LoRA 1'
      }, {
        id: '2',
        name: 'Test LoRA 2'
      }]
    };
    mockFetchData.mockResolvedValue(mockLoraData);

    // Import after mocking
    const {
      createRecommendationsComponent
    } = require('../../app/frontend/static/js/components/recommendations/index.js');
    const component = createRecommendationsComponent();

    // Act
    await component.loadAvailableLoras();

    // Assert
    expect(mockFetchData).toHaveBeenCalledWith('http://localhost:8000/adapters');
    expect(component.availableLoras).toEqual(mockLoraData.items);
    expect(component.isLoading).toBe(false);
  });
  test('should handle API errors gracefully', async () => {
    // Arrange
    const mockError = new Error('API Error');
    mockFetchData.mockRejectedValue(mockError);
    const {
      createRecommendationsComponent
    } = require('../../app/frontend/static/js/components/recommendations/index.js');
    const component = createRecommendationsComponent();

    // Mock the toast method
    const mockShowToast = jest.fn();
    component.showToastMessage = mockShowToast;

    // Act
    await component.loadAvailableLoras();

    // Assert
    expect(mockShowToast).toHaveBeenCalledWith('Failed to load LoRAs', 'error');
    expect(component.isLoading).toBe(false);
  });
  test('should handle data with direct array format', async () => {
    // Arrange - API returns array directly instead of wrapped in items
    const mockDirectArray = [{
      id: '1',
      name: 'Direct LoRA 1'
    }, {
      id: '2',
      name: 'Direct LoRA 2'
    }];
    mockFetchData.mockResolvedValue(mockDirectArray);
    const {
      createRecommendationsComponent
    } = require('../../app/frontend/static/js/components/recommendations/index.js');
    const component = createRecommendationsComponent();

    // Act
    await component.loadAvailableLoras();

    // Assert
    expect(component.availableLoras).toEqual(mockDirectArray);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIm1vY2tGZXRjaERhdGEiLCJvcmlnaW5hbFdpbmRvdyIsImJlZm9yZUVhY2giLCJnbG9iYWwiLCJ3aW5kb3ciLCJCQUNLRU5EX1VSTCIsImplc3QiLCJmbiIsImRvTW9jayIsImZldGNoRGF0YSIsImFmdGVyRWFjaCIsInJlc2V0TW9kdWxlcyIsImNsZWFyQWxsTW9ja3MiLCJ0ZXN0IiwibW9ja0xvcmFEYXRhIiwiaXRlbXMiLCJpZCIsIm5hbWUiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImNyZWF0ZVJlY29tbWVuZGF0aW9uc0NvbXBvbmVudCIsInJlcXVpcmUiLCJjb21wb25lbnQiLCJsb2FkQXZhaWxhYmxlTG9yYXMiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImF2YWlsYWJsZUxvcmFzIiwidG9FcXVhbCIsImlzTG9hZGluZyIsInRvQmUiLCJtb2NrRXJyb3IiLCJFcnJvciIsIm1vY2tSZWplY3RlZFZhbHVlIiwibW9ja1Nob3dUb2FzdCIsInNob3dUb2FzdE1lc3NhZ2UiLCJtb2NrRGlyZWN0QXJyYXkiXSwic291cmNlcyI6WyJyZWNvbW1lbmRhdGlvbnMtYXBpLXJlZmFjdG9yLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0IGZvciByZWNvbW1lbmRhdGlvbnMgbW9kdWxlIHJlZmFjdG9yaW5nIHRvIHVzZSB1dGlscy9hcGkuanNcbiAqL1xuXG5kZXNjcmliZSgnUmVjb21tZW5kYXRpb25zIE1vZHVsZSBBUEkgUmVmYWN0b3JpbmcnLCAoKSA9PiB7XG4gICAgbGV0IG1vY2tGZXRjaERhdGE7XG4gICAgbGV0IG9yaWdpbmFsV2luZG93O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIC8vIFNhdmUgb3JpZ2luYWwgd2luZG93XG4gICAgICAgIG9yaWdpbmFsV2luZG93ID0gZ2xvYmFsLndpbmRvdztcbiAgICAgICAgXG4gICAgICAgIC8vIFNldHVwIG1vY2sgd2luZG93XG4gICAgICAgIGdsb2JhbC53aW5kb3cgPSB7XG4gICAgICAgICAgICBCQUNLRU5EX1VSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCdcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBNb2NrIGZldGNoRGF0YVxuICAgICAgICBtb2NrRmV0Y2hEYXRhID0gamVzdC5mbigpO1xuICAgICAgICBcbiAgICAgICAgLy8gTW9jayB0aGUgbW9kdWxlXG4gICAgICAgIGplc3QuZG9Nb2NrKCcuLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL3V0aWxzL2FwaS5qcycsICgpID0+ICh7XG4gICAgICAgICAgICBmZXRjaERhdGE6IG1vY2tGZXRjaERhdGFcbiAgICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgLy8gUmVzdG9yZSB3aW5kb3dcbiAgICAgICAgZ2xvYmFsLndpbmRvdyA9IG9yaWdpbmFsV2luZG93O1xuICAgICAgICBqZXN0LnJlc2V0TW9kdWxlcygpO1xuICAgICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB1c2UgZmV0Y2hEYXRhIGluc3RlYWQgb2YgcmF3IGZldGNoIGZvciBsb2FkaW5nIExvUkFzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBBcnJhbmdlXG4gICAgICAgIGNvbnN0IG1vY2tMb3JhRGF0YSA9IHtcbiAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAnVGVzdCBMb1JBIDEnIH0sXG4gICAgICAgICAgICAgICAgeyBpZDogJzInLCBuYW1lOiAnVGVzdCBMb1JBIDInIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgICAgbW9ja0ZldGNoRGF0YS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrTG9yYURhdGEpO1xuXG4gICAgICAgIC8vIEltcG9ydCBhZnRlciBtb2NraW5nXG4gICAgICAgIGNvbnN0IHsgY3JlYXRlUmVjb21tZW5kYXRpb25zQ29tcG9uZW50IH0gPSByZXF1aXJlKCcuLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25zL2luZGV4LmpzJyk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNyZWF0ZVJlY29tbWVuZGF0aW9uc0NvbXBvbmVudCgpO1xuXG4gICAgICAgIC8vIEFjdFxuICAgICAgICBhd2FpdCBjb21wb25lbnQubG9hZEF2YWlsYWJsZUxvcmFzKCk7XG5cbiAgICAgICAgLy8gQXNzZXJ0XG4gICAgICAgIGV4cGVjdChtb2NrRmV0Y2hEYXRhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FkYXB0ZXJzJyk7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuYXZhaWxhYmxlTG9yYXMpLnRvRXF1YWwobW9ja0xvcmFEYXRhLml0ZW1zKTtcbiAgICAgICAgZXhwZWN0KGNvbXBvbmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBBUEkgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEFycmFuZ2VcbiAgICAgICAgY29uc3QgbW9ja0Vycm9yID0gbmV3IEVycm9yKCdBUEkgRXJyb3InKTtcbiAgICAgICAgbW9ja0ZldGNoRGF0YS5tb2NrUmVqZWN0ZWRWYWx1ZShtb2NrRXJyb3IpO1xuXG4gICAgICAgIGNvbnN0IHsgY3JlYXRlUmVjb21tZW5kYXRpb25zQ29tcG9uZW50IH0gPSByZXF1aXJlKCcuLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25zL2luZGV4LmpzJyk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNyZWF0ZVJlY29tbWVuZGF0aW9uc0NvbXBvbmVudCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gTW9jayB0aGUgdG9hc3QgbWV0aG9kXG4gICAgICAgIGNvbnN0IG1vY2tTaG93VG9hc3QgPSBqZXN0LmZuKCk7XG4gICAgICAgIGNvbXBvbmVudC5zaG93VG9hc3RNZXNzYWdlID0gbW9ja1Nob3dUb2FzdDtcblxuICAgICAgICAvLyBBY3RcbiAgICAgICAgYXdhaXQgY29tcG9uZW50LmxvYWRBdmFpbGFibGVMb3JhcygpO1xuXG4gICAgICAgIC8vIEFzc2VydFxuICAgICAgICBleHBlY3QobW9ja1Nob3dUb2FzdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0ZhaWxlZCB0byBsb2FkIExvUkFzJywgJ2Vycm9yJyk7XG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuaXNMb2FkaW5nKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZGF0YSB3aXRoIGRpcmVjdCBhcnJheSBmb3JtYXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vIEFycmFuZ2UgLSBBUEkgcmV0dXJucyBhcnJheSBkaXJlY3RseSBpbnN0ZWFkIG9mIHdyYXBwZWQgaW4gaXRlbXNcbiAgICAgICAgY29uc3QgbW9ja0RpcmVjdEFycmF5ID0gW1xuICAgICAgICAgICAgeyBpZDogJzEnLCBuYW1lOiAnRGlyZWN0IExvUkEgMScgfSxcbiAgICAgICAgICAgIHsgaWQ6ICcyJywgbmFtZTogJ0RpcmVjdCBMb1JBIDInIH1cbiAgICAgICAgXTtcbiAgICAgICAgbW9ja0ZldGNoRGF0YS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRGlyZWN0QXJyYXkpO1xuXG4gICAgICAgIGNvbnN0IHsgY3JlYXRlUmVjb21tZW5kYXRpb25zQ29tcG9uZW50IH0gPSByZXF1aXJlKCcuLi8uLi9hcHAvZnJvbnRlbmQvc3RhdGljL2pzL2NvbXBvbmVudHMvcmVjb21tZW5kYXRpb25zL2luZGV4LmpzJyk7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNyZWF0ZVJlY29tbWVuZGF0aW9uc0NvbXBvbmVudCgpO1xuXG4gICAgICAgIC8vIEFjdFxuICAgICAgICBhd2FpdCBjb21wb25lbnQubG9hZEF2YWlsYWJsZUxvcmFzKCk7XG5cbiAgICAgICAgLy8gQXNzZXJ0XG4gICAgICAgIGV4cGVjdChjb21wb25lbnQuYXZhaWxhYmxlTG9yYXMpLnRvRXF1YWwobW9ja0RpcmVjdEFycmF5KTtcbiAgICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBQSxRQUFRLENBQUMsd0NBQXdDLEVBQUUsTUFBTTtFQUNyRCxJQUFJQyxhQUFhO0VBQ2pCLElBQUlDLGNBQWM7RUFFbEJDLFVBQVUsQ0FBQyxNQUFNO0lBQ2I7SUFDQUQsY0FBYyxHQUFHRSxNQUFNLENBQUNDLE1BQU07O0lBRTlCO0lBQ0FELE1BQU0sQ0FBQ0MsTUFBTSxHQUFHO01BQ1pDLFdBQVcsRUFBRTtJQUNqQixDQUFDOztJQUVEO0lBQ0FMLGFBQWEsR0FBR00sSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQzs7SUFFekI7SUFDQUQsSUFBSSxDQUFDRSxNQUFNLENBQUMsMkNBQTJDLEVBQUUsT0FBTztNQUM1REMsU0FBUyxFQUFFVDtJQUNmLENBQUMsQ0FBQyxDQUFDO0VBQ1AsQ0FBQyxDQUFDO0VBRUZVLFNBQVMsQ0FBQyxNQUFNO0lBQ1o7SUFDQVAsTUFBTSxDQUFDQyxNQUFNLEdBQUdILGNBQWM7SUFDOUJLLElBQUksQ0FBQ0ssWUFBWSxDQUFDLENBQUM7SUFDbkJMLElBQUksQ0FBQ00sYUFBYSxDQUFDLENBQUM7RUFDeEIsQ0FBQyxDQUFDO0VBRUZDLElBQUksQ0FBQyw2REFBNkQsRUFBRSxZQUFZO0lBQzVFO0lBQ0EsTUFBTUMsWUFBWSxHQUFHO01BQ2pCQyxLQUFLLEVBQUUsQ0FDSDtRQUFFQyxFQUFFLEVBQUUsR0FBRztRQUFFQyxJQUFJLEVBQUU7TUFBYyxDQUFDLEVBQ2hDO1FBQUVELEVBQUUsRUFBRSxHQUFHO1FBQUVDLElBQUksRUFBRTtNQUFjLENBQUM7SUFFeEMsQ0FBQztJQUNEakIsYUFBYSxDQUFDa0IsaUJBQWlCLENBQUNKLFlBQVksQ0FBQzs7SUFFN0M7SUFDQSxNQUFNO01BQUVLO0lBQStCLENBQUMsR0FBR0MsT0FBTyxDQUFDLGtFQUFrRSxDQUFDO0lBQ3RILE1BQU1DLFNBQVMsR0FBR0YsOEJBQThCLENBQUMsQ0FBQzs7SUFFbEQ7SUFDQSxNQUFNRSxTQUFTLENBQUNDLGtCQUFrQixDQUFDLENBQUM7O0lBRXBDO0lBQ0FDLE1BQU0sQ0FBQ3ZCLGFBQWEsQ0FBQyxDQUFDd0Isb0JBQW9CLENBQUMsZ0NBQWdDLENBQUM7SUFDNUVELE1BQU0sQ0FBQ0YsU0FBUyxDQUFDSSxjQUFjLENBQUMsQ0FBQ0MsT0FBTyxDQUFDWixZQUFZLENBQUNDLEtBQUssQ0FBQztJQUM1RFEsTUFBTSxDQUFDRixTQUFTLENBQUNNLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzNDLENBQUMsQ0FBQztFQUVGZixJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBWTtJQUNwRDtJQUNBLE1BQU1nQixTQUFTLEdBQUcsSUFBSUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUN4QzlCLGFBQWEsQ0FBQytCLGlCQUFpQixDQUFDRixTQUFTLENBQUM7SUFFMUMsTUFBTTtNQUFFVjtJQUErQixDQUFDLEdBQUdDLE9BQU8sQ0FBQyxrRUFBa0UsQ0FBQztJQUN0SCxNQUFNQyxTQUFTLEdBQUdGLDhCQUE4QixDQUFDLENBQUM7O0lBRWxEO0lBQ0EsTUFBTWEsYUFBYSxHQUFHMUIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUMvQmMsU0FBUyxDQUFDWSxnQkFBZ0IsR0FBR0QsYUFBYTs7SUFFMUM7SUFDQSxNQUFNWCxTQUFTLENBQUNDLGtCQUFrQixDQUFDLENBQUM7O0lBRXBDO0lBQ0FDLE1BQU0sQ0FBQ1MsYUFBYSxDQUFDLENBQUNSLG9CQUFvQixDQUFDLHNCQUFzQixFQUFFLE9BQU8sQ0FBQztJQUMzRUQsTUFBTSxDQUFDRixTQUFTLENBQUNNLFNBQVMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzNDLENBQUMsQ0FBQztFQUVGZixJQUFJLENBQUMsNkNBQTZDLEVBQUUsWUFBWTtJQUM1RDtJQUNBLE1BQU1xQixlQUFlLEdBQUcsQ0FDcEI7TUFBRWxCLEVBQUUsRUFBRSxHQUFHO01BQUVDLElBQUksRUFBRTtJQUFnQixDQUFDLEVBQ2xDO01BQUVELEVBQUUsRUFBRSxHQUFHO01BQUVDLElBQUksRUFBRTtJQUFnQixDQUFDLENBQ3JDO0lBQ0RqQixhQUFhLENBQUNrQixpQkFBaUIsQ0FBQ2dCLGVBQWUsQ0FBQztJQUVoRCxNQUFNO01BQUVmO0lBQStCLENBQUMsR0FBR0MsT0FBTyxDQUFDLGtFQUFrRSxDQUFDO0lBQ3RILE1BQU1DLFNBQVMsR0FBR0YsOEJBQThCLENBQUMsQ0FBQzs7SUFFbEQ7SUFDQSxNQUFNRSxTQUFTLENBQUNDLGtCQUFrQixDQUFDLENBQUM7O0lBRXBDO0lBQ0FDLE1BQU0sQ0FBQ0YsU0FBUyxDQUFDSSxjQUFjLENBQUMsQ0FBQ0MsT0FBTyxDQUFDUSxlQUFlLENBQUM7RUFDN0QsQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119