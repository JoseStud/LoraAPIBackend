{"version":3,"names":["cov_nzc1g7a2s","actualCoverage","fetchData","createDashboardComponent","f","s","loading","isInitialized","stats","total_loras","active_loras","embeddings_coverage","recent_activities_count","recent_imports","systemHealth","status","gpu_status","init","loadInitialData","refreshData","error","b","data","system_health","formatNumber","num","undefined","toFixed","toString","getStatusColor","getStatusIconColor"],"sources":["index.js"],"sourcesContent":["/**\n * Dashboard Component for LoRA Manager\n * \n * This component handles the main dashboard functionality,\n * including stats display, system health monitoring, and data refresh.\n */\n\nimport { fetchData } from '../../utils/api.js';\n\nexport function createDashboardComponent() {\n    return {\n        // Page-local loading state used by dashboard header actions\n        loading: false,\n        isInitialized: false,\n        \n        // Dashboard statistics\n        stats: {\n            total_loras: 0,\n            active_loras: 0,\n            embeddings_coverage: 0,\n            recent_activities_count: 0,\n            recent_imports: 0\n        },\n        \n        // System health monitoring\n        systemHealth: {\n            status: 'unknown',\n            gpu_status: '-' \n        },\n        \n        // Initialize the dashboard\n        init() {\n            this.loadInitialData();\n            this.isInitialized = true;\n        },\n        \n        // Load initial dashboard data\n        async loadInitialData() {\n            try {\n                await this.refreshData();\n            } catch (error) {\n                // Silently handle errors - backend may be offline\n                // Keep default values\n            }\n        },\n        \n        // Refresh dashboard data\n        async refreshData() {\n            if (this.loading) return;\n            \n            this.loading = true;\n            \n            try {\n                const data = await fetchData('/api/dashboard/stats');\n                \n                // Update stats if provided\n                if (data.stats) {\n                    this.stats = { ...this.stats, ...data.stats };\n                }\n                \n                // Update system health if provided\n                if (data.system_health) {\n                    this.systemHealth = { ...this.systemHealth, ...data.system_health };\n                }\n            } catch (error) {\n                // Handle network errors gracefully\n                // Keep existing data, don't show error to user\n            } finally {\n                this.loading = false;\n            }\n        },\n        \n        // Format numbers for display\n        formatNumber(num) {\n            if (num === null || num === undefined) return '-';\n            if (num >= 1000) {\n                return (num / 1000).toFixed(1) + 'k';\n            }\n            return num.toString();\n        },\n        \n        // Get status color class\n        getStatusColor(status) {\n            switch (status) {\n                case 'healthy': return 'text-green-600';\n                case 'warning': return 'text-yellow-600';\n                case 'error': return 'text-red-600';\n                default: return 'text-gray-600';\n            }\n        },\n        \n        // Get status icon class\n        getStatusIconColor(status) {\n            switch (status) {\n                case 'healthy': return 'bg-green-100';\n                case 'warning': return 'bg-yellow-100';\n                case 'error': return 'bg-red-100';\n                default: return 'bg-gray-100';\n            }\n        }\n    };\n}\n"],"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","ignoreList":[]}