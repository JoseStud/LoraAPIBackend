bb2350654e2a6005982983594c8a6f22
/**
 * Unit test for lora selection event mapping
 */

/** @jest-environment jsdom */

const fs = require('fs');
const path = require('path');
// Polyfill TextEncoder/TextDecoder for jsdom in some Node versions
if (typeof global.TextEncoder === 'undefined') {
  const {
    TextEncoder,
    TextDecoder
  } = require('util');
  global.TextEncoder = TextEncoder;
  global.TextDecoder = TextDecoder;
}

// Load loraGallery implementation from template file (extract function body)
const templatePath = path.resolve(__dirname, '../../app/frontend/templates/pages/loras.html');
const template = fs.readFileSync(templatePath, 'utf8');

// Extract the loraGallery function definition from the template
const fnMatch = template.match(/function loraGallery\s*\(\)\s*\{([\s\S]*?)\n\}\n/);
let loraGalleryFnSource = null;
if (fnMatch) {
  loraGalleryFnSource = fnMatch[0];
} else {
  throw new Error('Could not extract loraGallery function from template');
}

// Create a sandboxed function and evaluate it
const {
  JSDOM
} = require('jsdom');
function setupDom() {
  const dom = new JSDOM(`<!doctype html><html><body><div id="lora-root"></div></body></html>`, {
    runScripts: 'outside-only'
  });
  global.document = dom.window.document;
  global.window = dom.window;
  global.HTMLElement = dom.window.HTMLElement;
}
beforeEach(() => {
  setupDom();
});
test('loraGallery updates selectedLoras on lora-selected / lora-deselected events', () => {
  // Evaluate the function in the JSDOM window context
  const vm = new Function('window', 'document', `${loraGalleryFnSource}; return loraGallery;`);
  const loraGallery = vm(global.window, global.document)();
  // Provide minimal Alpine stubs used by the component (e.g., $watch)
  loraGallery.$watch = function () {};
  if (typeof loraGallery.init === 'function') loraGallery.init();

  // Attach to a dummy element to emulate Alpine.$data semantics (not needed here)
  expect(Array.isArray(loraGallery.selectedLoras)).toBe(true);

  // Dispatch lora-selected event
  const selectEvent = new global.window.CustomEvent('lora-selected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(selectEvent);
  // Allow any synchronous handlers to run
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(true);

  // Dispatch lora-deselected
  const deselectEvent = new global.window.CustomEvent('lora-deselected', {
    detail: {
      id: 'abc-1'
    }
  });
  global.window.document.dispatchEvent(deselectEvent);
  expect(loraGallery.selectedLoras.includes('abc-1')).toBe(false);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiZ2xvYmFsIiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciIsInRlbXBsYXRlUGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJ0ZW1wbGF0ZSIsInJlYWRGaWxlU3luYyIsImZuTWF0Y2giLCJtYXRjaCIsImxvcmFHYWxsZXJ5Rm5Tb3VyY2UiLCJFcnJvciIsIkpTRE9NIiwic2V0dXBEb20iLCJkb20iLCJydW5TY3JpcHRzIiwiZG9jdW1lbnQiLCJ3aW5kb3ciLCJIVE1MRWxlbWVudCIsImJlZm9yZUVhY2giLCJ0ZXN0Iiwidm0iLCJGdW5jdGlvbiIsImxvcmFHYWxsZXJ5IiwiJHdhdGNoIiwiaW5pdCIsImV4cGVjdCIsIkFycmF5IiwiaXNBcnJheSIsInNlbGVjdGVkTG9yYXMiLCJ0b0JlIiwic2VsZWN0RXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImlkIiwiZGlzcGF0Y2hFdmVudCIsImluY2x1ZGVzIiwiZGVzZWxlY3RFdmVudCJdLCJzb3VyY2VzIjpbImxvcmEtc2VsZWN0aW9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbml0IHRlc3QgZm9yIGxvcmEgc2VsZWN0aW9uIGV2ZW50IG1hcHBpbmdcbiAqL1xuXG4vKiogQGplc3QtZW52aXJvbm1lbnQganNkb20gKi9cblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbi8vIFBvbHlmaWxsIFRleHRFbmNvZGVyL1RleHREZWNvZGVyIGZvciBqc2RvbSBpbiBzb21lIE5vZGUgdmVyc2lvbnNcbmlmICh0eXBlb2YgZ2xvYmFsLlRleHRFbmNvZGVyID09PSAndW5kZWZpbmVkJykge1xuICBjb25zdCB7IFRleHRFbmNvZGVyLCBUZXh0RGVjb2RlciB9ID0gcmVxdWlyZSgndXRpbCcpO1xuICBnbG9iYWwuVGV4dEVuY29kZXIgPSBUZXh0RW5jb2RlcjtcbiAgZ2xvYmFsLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7XG59XG5cbi8vIExvYWQgbG9yYUdhbGxlcnkgaW1wbGVtZW50YXRpb24gZnJvbSB0ZW1wbGF0ZSBmaWxlIChleHRyYWN0IGZ1bmN0aW9uIGJvZHkpXG5jb25zdCB0ZW1wbGF0ZVBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vYXBwL2Zyb250ZW5kL3RlbXBsYXRlcy9wYWdlcy9sb3Jhcy5odG1sJyk7XG5jb25zdCB0ZW1wbGF0ZSA9IGZzLnJlYWRGaWxlU3luYyh0ZW1wbGF0ZVBhdGgsICd1dGY4Jyk7XG5cbi8vIEV4dHJhY3QgdGhlIGxvcmFHYWxsZXJ5IGZ1bmN0aW9uIGRlZmluaXRpb24gZnJvbSB0aGUgdGVtcGxhdGVcbmNvbnN0IGZuTWF0Y2ggPSB0ZW1wbGF0ZS5tYXRjaCgvZnVuY3Rpb24gbG9yYUdhbGxlcnlcXHMqXFwoXFwpXFxzKlxceyhbXFxzXFxTXSo/KVxcblxcfVxcbi8pO1xubGV0IGxvcmFHYWxsZXJ5Rm5Tb3VyY2UgPSBudWxsO1xuaWYgKGZuTWF0Y2gpIHtcbiAgbG9yYUdhbGxlcnlGblNvdXJjZSA9IGZuTWF0Y2hbMF07XG59IGVsc2Uge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBleHRyYWN0IGxvcmFHYWxsZXJ5IGZ1bmN0aW9uIGZyb20gdGVtcGxhdGUnKTtcbn1cblxuLy8gQ3JlYXRlIGEgc2FuZGJveGVkIGZ1bmN0aW9uIGFuZCBldmFsdWF0ZSBpdFxuY29uc3QgeyBKU0RPTSB9ID0gcmVxdWlyZSgnanNkb20nKTtcblxuZnVuY3Rpb24gc2V0dXBEb20oKSB7XG4gIGNvbnN0IGRvbSA9IG5ldyBKU0RPTShgPCFkb2N0eXBlIGh0bWw+PGh0bWw+PGJvZHk+PGRpdiBpZD1cImxvcmEtcm9vdFwiPjwvZGl2PjwvYm9keT48L2h0bWw+YCwgeyBydW5TY3JpcHRzOiAnb3V0c2lkZS1vbmx5JyB9KTtcbiAgZ2xvYmFsLmRvY3VtZW50ID0gZG9tLndpbmRvdy5kb2N1bWVudDtcbiAgZ2xvYmFsLndpbmRvdyA9IGRvbS53aW5kb3c7XG4gIGdsb2JhbC5IVE1MRWxlbWVudCA9IGRvbS53aW5kb3cuSFRNTEVsZW1lbnQ7XG59XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBzZXR1cERvbSgpO1xufSk7XG5cbnRlc3QoJ2xvcmFHYWxsZXJ5IHVwZGF0ZXMgc2VsZWN0ZWRMb3JhcyBvbiBsb3JhLXNlbGVjdGVkIC8gbG9yYS1kZXNlbGVjdGVkIGV2ZW50cycsICgpID0+IHtcbiAgLy8gRXZhbHVhdGUgdGhlIGZ1bmN0aW9uIGluIHRoZSBKU0RPTSB3aW5kb3cgY29udGV4dFxuICBjb25zdCB2bSA9IG5ldyBGdW5jdGlvbignd2luZG93JywgJ2RvY3VtZW50JywgYCR7bG9yYUdhbGxlcnlGblNvdXJjZX07IHJldHVybiBsb3JhR2FsbGVyeTtgKTtcbiAgY29uc3QgbG9yYUdhbGxlcnkgPSB2bShnbG9iYWwud2luZG93LCBnbG9iYWwuZG9jdW1lbnQpKCk7XG4gIC8vIFByb3ZpZGUgbWluaW1hbCBBbHBpbmUgc3R1YnMgdXNlZCBieSB0aGUgY29tcG9uZW50IChlLmcuLCAkd2F0Y2gpXG4gIGxvcmFHYWxsZXJ5LiR3YXRjaCA9IGZ1bmN0aW9uKCkge307XG4gIGlmICh0eXBlb2YgbG9yYUdhbGxlcnkuaW5pdCA9PT0gJ2Z1bmN0aW9uJykgbG9yYUdhbGxlcnkuaW5pdCgpO1xuXG4gIC8vIEF0dGFjaCB0byBhIGR1bW15IGVsZW1lbnQgdG8gZW11bGF0ZSBBbHBpbmUuJGRhdGEgc2VtYW50aWNzIChub3QgbmVlZGVkIGhlcmUpXG4gIGV4cGVjdChBcnJheS5pc0FycmF5KGxvcmFHYWxsZXJ5LnNlbGVjdGVkTG9yYXMpKS50b0JlKHRydWUpO1xuXG4gIC8vIERpc3BhdGNoIGxvcmEtc2VsZWN0ZWQgZXZlbnRcbiAgY29uc3Qgc2VsZWN0RXZlbnQgPSBuZXcgZ2xvYmFsLndpbmRvdy5DdXN0b21FdmVudCgnbG9yYS1zZWxlY3RlZCcsIHsgZGV0YWlsOiB7IGlkOiAnYWJjLTEnIH0gfSk7XG4gIGdsb2JhbC53aW5kb3cuZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChzZWxlY3RFdmVudCk7XG4gIC8vIEFsbG93IGFueSBzeW5jaHJvbm91cyBoYW5kbGVycyB0byBydW5cbiAgZXhwZWN0KGxvcmFHYWxsZXJ5LnNlbGVjdGVkTG9yYXMuaW5jbHVkZXMoJ2FiYy0xJykpLnRvQmUodHJ1ZSk7XG5cbiAgLy8gRGlzcGF0Y2ggbG9yYS1kZXNlbGVjdGVkXG4gIGNvbnN0IGRlc2VsZWN0RXZlbnQgPSBuZXcgZ2xvYmFsLndpbmRvdy5DdXN0b21FdmVudCgnbG9yYS1kZXNlbGVjdGVkJywgeyBkZXRhaWw6IHsgaWQ6ICdhYmMtMScgfSB9KTtcbiAgZ2xvYmFsLndpbmRvdy5kb2N1bWVudC5kaXNwYXRjaEV2ZW50KGRlc2VsZWN0RXZlbnQpO1xuICBleHBlY3QobG9yYUdhbGxlcnkuc2VsZWN0ZWRMb3Jhcy5pbmNsdWRlcygnYWJjLTEnKSkudG9CZShmYWxzZSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7QUFDNUI7QUFDQSxJQUFJLE9BQU9FLE1BQU0sQ0FBQ0MsV0FBVyxLQUFLLFdBQVcsRUFBRTtFQUM3QyxNQUFNO0lBQUVBLFdBQVc7SUFBRUM7RUFBWSxDQUFDLEdBQUdKLE9BQU8sQ0FBQyxNQUFNLENBQUM7RUFDcERFLE1BQU0sQ0FBQ0MsV0FBVyxHQUFHQSxXQUFXO0VBQ2hDRCxNQUFNLENBQUNFLFdBQVcsR0FBR0EsV0FBVztBQUNsQzs7QUFFQTtBQUNBLE1BQU1DLFlBQVksR0FBR0osSUFBSSxDQUFDSyxPQUFPLENBQUNDLFNBQVMsRUFBRSwrQ0FBK0MsQ0FBQztBQUM3RixNQUFNQyxRQUFRLEdBQUdULEVBQUUsQ0FBQ1UsWUFBWSxDQUFDSixZQUFZLEVBQUUsTUFBTSxDQUFDOztBQUV0RDtBQUNBLE1BQU1LLE9BQU8sR0FBR0YsUUFBUSxDQUFD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