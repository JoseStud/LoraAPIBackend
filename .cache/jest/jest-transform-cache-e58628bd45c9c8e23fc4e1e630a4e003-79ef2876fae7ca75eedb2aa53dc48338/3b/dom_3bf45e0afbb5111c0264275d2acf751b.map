{"version":3,"names":["cov_1tb8gh00fk","actualCoverage","showElement","element","f","el","s","b","document","querySelector","classList","remove","removeAttribute","hideElement","add","setAttribute","toggleElement","contains","isElementVisible","offsetWidth","offsetHeight","scrollToElement","options","scrollIntoView","behavior","block","addClass","className","removeClass","toggleClass","toggle","getDataAttribute","attribute","dataset","setDataAttribute","value"],"sources":["dom.js"],"sourcesContent":["/**\n * DOM Utilities\n * \n * Functions for DOM manipulation, element visibility,\n * and common DOM operations.\n */\n\n/**\n * Show an element by removing the 'hidden' class\n * @param {HTMLElement|string} element - The element or selector\n */\nexport function showElement(element) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.classList.remove('hidden');\n        el.removeAttribute('aria-hidden');\n    }\n}\n\n/**\n * Hide an element by adding the 'hidden' class\n * @param {HTMLElement|string} element - The element or selector\n */\nexport function hideElement(element) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.classList.add('hidden');\n        el.setAttribute('aria-hidden', 'true');\n    }\n}\n\n/**\n * Toggle an element's visibility\n * @param {HTMLElement|string} element - The element or selector\n */\nexport function toggleElement(element) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        if (el.classList.contains('hidden')) {\n            showElement(el);\n        } else {\n            hideElement(el);\n        }\n    }\n}\n\n/**\n * Check if an element is visible\n * @param {HTMLElement|string} element - The element or selector\n * @returns {boolean} True if visible, false otherwise\n */\nexport function isElementVisible(element) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (!el) return false;\n    \n    return !el.classList.contains('hidden') && \n           el.offsetWidth > 0 && \n           el.offsetHeight > 0;\n}\n\n/**\n * Scroll an element into view smoothly\n * @param {HTMLElement|string} element - The element or selector\n * @param {object} options - Scroll options\n */\nexport function scrollToElement(element, options = {}) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start',\n            ...options\n        });\n    }\n}\n\n/**\n * Add a CSS class to an element\n * @param {HTMLElement|string} element - The element or selector\n * @param {string} className - The class name to add\n */\nexport function addClass(element, className) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.classList.add(className);\n    }\n}\n\n/**\n * Remove a CSS class from an element\n * @param {HTMLElement|string} element - The element or selector\n * @param {string} className - The class name to remove\n */\nexport function removeClass(element, className) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.classList.remove(className);\n    }\n}\n\n/**\n * Toggle a CSS class on an element\n * @param {HTMLElement|string} element - The element or selector\n * @param {string} className - The class name to toggle\n * @returns {boolean} True if class was added, false if removed\n */\nexport function toggleClass(element, className) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        return el.classList.toggle(className);\n    }\n    return false;\n}\n\n/**\n * Get the value of a data attribute\n * @param {HTMLElement|string} element - The element or selector\n * @param {string} attribute - The data attribute name (without 'data-')\n * @returns {string|null} The attribute value\n */\nexport function getDataAttribute(element, attribute) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        return el.dataset[attribute] || null;\n    }\n    return null;\n}\n\n/**\n * Set the value of a data attribute\n * @param {HTMLElement|string} element - The element or selector\n * @param {string} attribute - The data attribute name (without 'data-')\n * @param {string} value - The attribute value\n */\nexport function setDataAttribute(element, attribute, value) {\n    const el = typeof element === 'string' ? document.querySelector(element) : element;\n    if (el) {\n        el.dataset[attribute] = value;\n    }\n}\n"],"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","ignoreList":[]}