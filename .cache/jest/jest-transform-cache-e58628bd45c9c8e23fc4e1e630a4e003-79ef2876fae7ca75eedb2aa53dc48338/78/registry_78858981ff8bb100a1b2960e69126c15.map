{"version":3,"names":["cov_2cqngb39bc","actualCoverage","ComponentRegistry","constructor","f","s","registeredComponents","Set","pendingComponents","Map","isAlpineReady","init","waitForAlpine","window","Alpine","b","onAlpineReady","document","addEventListener","once","DevLogger","debug","processPendingRegistrations","register","name","factory","options","set","data","add","global","fireRegistrationEvent","error","registerMultiple","components","Object","entries","forEach","unregister","delete","isRegistered","has","clear","dispatchEvent","event","CustomEvent","detail","getRegisteredComponents","Array","from","getPendingComponents","keys","RegistrationHelpers","registerComponent","componentRegistry","warn","registerStub","stubFactory","upgradeComponent","realFactory","registerLazyComponent","stub","getCommonStub","whenAlpineReady","callback","createSafeFactory","args","apply","registerSafeComponent","_options","safeFactory","module","exports"],"sources":["registry.js"],"sourcesContent":["/**\n * Component Registration Utilities\n * \n * Provides utilities for registering components with Alpine.js,\n * managing component lifecycle, and handling component upgrades.\n */\n\n/**\n * Component Registry Class\n */\nclass ComponentRegistry {\n    constructor() {\n        this.registeredComponents = new Set();\n        this.pendingComponents = new Map();\n        this.isAlpineReady = false;\n    }\n\n    /**\n     * Initialize the registry\n     */\n    init() {\n        this.waitForAlpine();\n    }\n\n    /**\n     * Wait for Alpine.js to be ready\n     */\n    waitForAlpine() {\n        if (typeof window.Alpine !== 'undefined') {\n            this.onAlpineReady();\n        } else {\n            document.addEventListener('alpine:init', () => {\n                this.onAlpineReady();\n            }, { once: true });\n        }\n    }\n\n    /**\n     * Called when Alpine.js is ready\n     */\n    onAlpineReady() {\n        this.isAlpineReady = true;\n        \n        if (window.DevLogger && window.DevLogger.debug) {\n            window.DevLogger.debug('[ComponentRegistry] Alpine.js ready');\n        }\n\n        // Process pending registrations\n        this.processPendingRegistrations();\n    }\n\n    /**\n     * Register a component with Alpine.js\n     * @param {string} name - Component name\n     * @param {Function} factory - Component factory function\n     * @param {Object} options - Registration options\n     */\n    register(name, factory, options = {}) {\n        if (!this.isAlpineReady) {\n            // Store for later registration\n            this.pendingComponents.set(name, { factory, options });\n            return;\n        }\n\n        try {\n            // Register with Alpine\n            if (window.Alpine && window.Alpine.data) {\n                window.Alpine.data(name, factory);\n                this.registeredComponents.add(name);\n                \n                if (window.DevLogger && window.DevLogger.debug) {\n                    window.DevLogger.debug(`[ComponentRegistry] Registered component: ${name}`);\n                }\n\n                // Make factory available globally for lazy loading\n                if (options.global !== false) {\n                    window[name] = factory;\n                }\n\n                // Fire registration event\n                this.fireRegistrationEvent(name, factory);\n            }\n        } catch (error) {\n            if (window.DevLogger && window.DevLogger.error) {\n                window.DevLogger.error(`[ComponentRegistry] Failed to register ${name}:`, error);\n            }\n        }\n    }\n\n    /**\n     * Register multiple components at once\n     * @param {Object} components - Object with component name -> factory mappings\n     * @param {Object} options - Global options for all components\n     */\n    registerMultiple(components, options = {}) {\n        Object.entries(components).forEach(([name, factory]) => {\n            this.register(name, factory, options);\n        });\n    }\n\n    /**\n     * Unregister a component\n     * @param {string} name - Component name to unregister\n     */\n    unregister(name) {\n        this.registeredComponents.delete(name);\n        this.pendingComponents.delete(name);\n        \n        // Remove global reference\n        if (window[name]) {\n            delete window[name];\n        }\n\n        if (window.DevLogger && window.DevLogger.debug) {\n            window.DevLogger.debug(`[ComponentRegistry] Unregistered component: ${name}`);\n        }\n    }\n\n    /**\n     * Check if a component is registered\n     * @param {string} name - Component name\n     * @returns {boolean} True if component is registered\n     */\n    isRegistered(name) {\n        return this.registeredComponents.has(name);\n    }\n\n    /**\n     * Process pending registrations\n     */\n    processPendingRegistrations() {\n        this.pendingComponents.forEach(({ factory, options }, name) => {\n            this.register(name, factory, options);\n        });\n        this.pendingComponents.clear();\n    }\n\n    /**\n     * Fire custom event when component is registered\n     * @param {string} name - Component name\n     * @param {Function} factory - Component factory\n     */\n    fireRegistrationEvent(name, factory) {\n        if (typeof window.dispatchEvent === 'function') {\n            const event = new CustomEvent('component:registered', {\n                detail: { name, factory }\n            });\n            window.dispatchEvent(event);\n        }\n    }\n\n    /**\n     * Get list of registered components\n     * @returns {string[]} Array of registered component names\n     */\n    getRegisteredComponents() {\n        return Array.from(this.registeredComponents);\n    }\n\n    /**\n     * Get list of pending components\n     * @returns {string[]} Array of pending component names\n     */\n    getPendingComponents() {\n        return Array.from(this.pendingComponents.keys());\n    }\n\n    /**\n     * Clear all registrations (useful for testing)\n     */\n    clear() {\n        this.registeredComponents.clear();\n        this.pendingComponents.clear();\n    }\n}\n\n/**\n * Alpine.js Registration Helpers\n */\nconst RegistrationHelpers = {\n    /**\n     * Register a component factory with Alpine.js\n     * @param {string} name - Component name\n     * @param {Function} factory - Component factory function\n     */\n    registerComponent(name, factory) {\n        if (window.componentRegistry) {\n            window.componentRegistry.register(name, factory);\n        } else if (typeof window.Alpine !== 'undefined' && window.Alpine.data) {\n            window.Alpine.data(name, factory);\n            window[name] = factory;\n        } else {\n            if (window.DevLogger && window.DevLogger.warn) {\n                window.DevLogger.warn(`Cannot register ${name}: Alpine.js not available`);\n            }\n        }\n    },\n\n    /**\n     * Register a stub component\n     * @param {string} name - Component name\n     * @param {Function} stubFactory - Stub factory function\n     */\n    registerStub(name, stubFactory) {\n        this.registerComponent(name, stubFactory);\n    },\n\n    /**\n     * Upgrade a stub to a real component\n     * @param {string} name - Component name\n     * @param {Function} realFactory - Real component factory\n     */\n    upgradeComponent(name, realFactory) {\n        // Replace the existing registration\n        this.registerComponent(name, realFactory);\n        \n        if (window.DevLogger && window.DevLogger.debug) {\n            window.DevLogger.debug(`[RegistrationHelpers] Upgraded component: ${name}`);\n        }\n    },\n\n    /**\n     * Register lazy component with fallback\n     * @param {string} name - Component name\n     */\n    registerLazyComponent(name) {\n        if (window.registerLazyComponent) {\n            window.registerLazyComponent(name);\n        } else {\n            // Fallback registration\n            const factory = () => {\n                const stub = window.getCommonStub ? window.getCommonStub(name) : { init() {} };\n                return stub;\n            };\n            this.registerComponent(name, factory);\n        }\n    },\n\n    /**\n     * Wait for Alpine to be ready and execute callback\n     * @param {Function} callback - Callback to execute\n     */\n    whenAlpineReady(callback) {\n        if (typeof window.Alpine !== 'undefined') {\n            callback();\n        } else {\n            document.addEventListener('alpine:init', callback, { once: true });\n        }\n    },\n\n    /**\n     * Create a component factory with error handling\n     * @param {Function} factory - Original factory function\n     * @param {string} name - Component name for error reporting\n     * @returns {Function} Wrapped factory function\n     */\n    createSafeFactory(factory, name) {\n        return function(...args) {\n            try {\n                return factory.apply(this, args);\n            } catch (error) {\n                if (window.DevLogger && window.DevLogger.error) {\n                    window.DevLogger.error(`Component factory error in ${name}:`, error);\n                }\n                // Return fallback stub\n                return window.getCommonStub ? window.getCommonStub(name) : { init() {} };\n            }\n        };\n    },\n\n    /**\n     * Register component with automatic error handling\n     * @param {string} name - Component name\n     * @param {Function} factory - Component factory\n     * @param {Object} _options - Registration options (future use)\n     */\n    registerSafeComponent(name, factory, _options = {}) {\n        const safeFactory = this.createSafeFactory(factory, name);\n        this.registerComponent(name, safeFactory);\n    }\n};\n\n// Create singleton registry instance\nconst componentRegistry = new ComponentRegistry();\n\n// Auto-initialize\ncomponentRegistry.init();\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { ComponentRegistry, RegistrationHelpers, componentRegistry };\n} else if (typeof window !== 'undefined') {\n    window.ComponentRegistry = ComponentRegistry;\n    window.RegistrationHelpers = RegistrationHelpers;\n    window.componentRegistry = componentRegistry;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}