/**
 * This file is auto-generated by scripts/generate-api-types.mjs.
 * Do not edit this file directly.
 */

export interface paths {
    "/v1/adapters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Adapters
         * @description Return a paginated list of adapters via the service layer.
         */
        get: operations["list_adapters_v1_adapters_get"];
        put?: never;
        /**
         * Create Adapter
         * @description Create a new adapter from the provided payload.
         */
        post: operations["create_adapter_v1_adapters_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/adapters/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Adapter Tags
         * @description Return unique tag list across all adapters.
         *
         *     Response shape matches frontend expectation: {"tags": [..]}.
         */
        get: operations["get_adapter_tags_v1_adapters_tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/adapters/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Adapter Action
         * @description Perform a bulk action on a list of adapters in a transaction.
         *
         *     Actions supported: activate, deactivate, delete.
         *     Returns summary counts and processed IDs.
         */
        post: operations["bulk_adapter_action_v1_adapters_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/adapters/{adapter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Adapter
         * @description Return a single adapter by id.
         *
         *     Raises HTTPException(404) if not found.
         */
        get: operations["get_adapter_v1_adapters__adapter_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Adapter
         * @description Delete an adapter by id.
         *
         *     Returns 204 on success.
         */
        delete: operations["delete_adapter_v1_adapters__adapter_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Adapter
         * @description Update an adapter's mutable fields using a validated payload.
         *
         *     The request body is validated against :class:`AdapterPatch`, ensuring only
         *     supported keys and value types are accepted. Business rules are still
         *     enforced by the service layer, which limits updates to fields defined in
         *     ``AdapterService.PATCHABLE_FIELDS``.
         */
        patch: operations["patch_adapter_v1_adapters__adapter_id__patch"];
        trace?: never;
    };
    "/v1/adapters/{adapter_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate Adapter
         * @description Mark an adapter active and optionally set its ordinal.
         */
        post: operations["activate_adapter_v1_adapters__adapter_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/adapters/{adapter_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate Adapter
         * @description Mark an adapter inactive.
         */
        post: operations["deactivate_adapter_v1_adapters__adapter_id__deactivate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/analytics/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Analytics Summary
         * @description Return a comprehensive analytics snapshot for the requested range.
         */
        get: operations["get_analytics_summary_v1_analytics_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/analytics/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Generation Stats
         * @description Expose headline generation KPIs for the requested range.
         */
        get: operations["get_generation_stats_v1_analytics_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/analytics/errors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Error Breakdown
         * @description Return error distribution for failed generation jobs.
         */
        get: operations["get_error_breakdown_v1_analytics_errors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/analytics/timeseries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Time Series Metrics
         * @description Return time-series metrics for dashboard visualisations.
         */
        get: operations["get_time_series_metrics_v1_analytics_timeseries_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/analytics/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Performance Insights
         * @description Return derived performance insights for the requested window.
         */
        get: operations["get_performance_insights_v1_analytics_insights_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/compose": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compose
         * @description Compose a prompt from active adapters and optionally schedule delivery.
         */
        post: operations["compose_v1_compose_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Delivery
         * @description Create a delivery job and either enqueue it or schedule a background task.
         */
        post: operations["create_delivery_v1_deliveries_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/deliveries/{delivery_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Delivery
         * @description Return the delivery job state for `delivery_id`.
         */
        get: operations["get_delivery_v1_deliveries__delivery_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/backends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Generation Backends
         * @description List available generation backends and their status.
         */
        get: operations["list_generation_backends_v1_generation_backends_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Image
         * @description Generate an image using the specified backend.
         */
        post: operations["generate_image_v1_generation_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/progress/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Generation Progress
         * @description Check the progress of a generation job.
         */
        get: operations["check_generation_progress_v1_generation_progress__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/compose-and-generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compose And Generate
         * @description Compose LoRA prompt and immediately generate images.
         */
        post: operations["compose_and_generate_v1_generation_compose_and_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/queue-generation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Queue Generation Job
         * @description Queue a generation job for background processing.
         */
        post: operations["queue_generation_job_v1_generation_queue_generation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/jobs/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Active Generation Jobs
         * @description Return active generation jobs for frontend queues.
         */
        get: operations["list_active_generation_jobs_v1_generation_jobs_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Generation Job
         * @description Get generation job status and results.
         */
        get: operations["get_generation_job_v1_generation_jobs__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/jobs/{job_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Generation Job
         * @description Cancel an active generation job.
         */
        post: operations["cancel_generation_job_v1_generation_jobs__job_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Generation Results
         * @description Return recent completed generation results.
         */
        get: operations["list_generation_results_v1_generation_results_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/results/bulk-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Bulk Delete Generation Results
         * @description Delete multiple generation results in a single request.
         */
        delete: operations["bulk_delete_generation_results_v1_generation_results_bulk_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/results/{result_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Generation Result
         * @description Delete a stored generation result and its associated artifacts.
         */
        delete: operations["delete_generation_result_v1_generation_results__result_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/results/{result_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Generation Result
         * @description Download the primary asset associated with a generation result.
         */
        get: operations["download_generation_result_v1_generation_results__result_id__download_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/generation/results/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Generation Results
         * @description Stream a ZIP archive containing the requested generation results.
         */
        post: operations["export_generation_results_v1_generation_results_export_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/similar/{lora_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Similar Loras
         * @description Get LoRAs similar to the specified LoRA. The recommendation engine ignores adapter description text; the field is preserved strictly for presentation.
         *
         *     Args:
         *         lora_id: ID of the target LoRA
         *         limit: Maximum number of recommendations to return
         *         similarity_threshold: Minimum similarity score (0.0 to 1.0)
         *         diversify_results: Whether to diversify results by different criteria
         *         weights: Custom weights for similarity components
         *             (semantic, artistic, technical)
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         List of similar LoRA recommendations with similarity scores and explanations
         */
        get: operations["get_similar_loras_v1_recommendations_similar__lora_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/for-prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Recommendations For Prompt
         * @description Get LoRA recommendations that would enhance a given prompt. Adapter descriptions are ignored during embedding and ranking and remain available only for client display.
         *
         *     Args:
         *         request: Prompt recommendation request with prompt text and preferences
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         List of LoRA recommendations optimized for the given prompt
         */
        post: operations["get_recommendations_for_prompt_v1_recommendations_for_prompt_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommendation Stats
         * @description Get comprehensive statistics about the recommendation system.
         *
         *     Args:
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Statistics including coverage, performance metrics, and system status
         */
        get: operations["get_recommendation_stats_v1_recommendations_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/embeddings/compute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compute Embeddings
         * @description Compute embeddings for LoRAs in batch.
         *
         *     Args:
         *         request: Batch embedding request specifying which LoRAs to process
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Processing results with counts and timing information
         */
        post: operations["compute_embeddings_v1_recommendations_embeddings_compute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/embeddings/{lora_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Embedding Status
         * @description Get embedding status for a specific LoRA.
         *
         *     Args:
         *         lora_id: ID of the LoRA to check
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Embedding status including what embeddings are available and when computed
         */
        get: operations["get_embedding_status_v1_recommendations_embeddings__lora_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/embeddings/{lora_id}/compute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compute Single Embedding
         * @description Compute embeddings for a single LoRA.
         *
         *     Args:
         *         lora_id: ID of the LoRA to process
         *         force_recompute: Whether to recompute existing embeddings
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Success status
         */
        post: operations["compute_single_embedding_v1_recommendations_embeddings__lora_id__compute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit Recommendation Feedback
         * @description Submit user feedback on recommendations for learning.
         *
         *     Args:
         *         feedback: User feedback data
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Stored feedback record
         */
        post: operations["submit_recommendation_feedback_v1_recommendations_feedback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update User Preferences
         * @description Update user preferences for personalized recommendations.
         *
         *     Args:
         *         preference: User preference data
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Persisted preference record
         */
        post: operations["update_user_preferences_v1_recommendations_preferences_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/index/rebuild": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rebuild Similarity Index
         * @description Rebuild the similarity index for fast recommendations.
         *
         *     Args:
         *         force: Force rebuild even if index exists
         *         services: Domain service container that provides recommendation logic
         *
         *     Returns:
         *         Rebuild status and timing
         */
        post: operations["rebuild_similarity_index_v1_recommendations_index_rebuild_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/recommendations/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recommendation Health
         * @description Get health status of the recommendation system.
         *
         *     Returns:
         *         Health status including model availability and performance metrics
         */
        get: operations["get_recommendation_health_v1_recommendations_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/export/estimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate Export
         * @description Calculate export size and time estimates using archive metadata.
         */
        post: operations["estimate_export_v1_export_estimate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Data
         * @description Stream an archive export of adapters using the archive helper.
         */
        post: operations["export_data_v1_export_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import Data
         * @description Import adapters from uploaded archives after validation.
         */
        post: operations["import_data_v1_import_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backups/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Backup History
         * @description Get persisted backup history entries.
         */
        get: operations["get_backup_history_v1_backups_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backup/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Backup
         * @description Create a new backup and return the created metadata.
         */
        post: operations["create_backup_v1_backup_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backups/{backup_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Backup
         * @description Delete a backup entry and its archive.
         */
        delete: operations["delete_backup_v1_backups__backup_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Stats
         * @description Get dashboard statistics and system health information.
         */
        get: operations["get_dashboard_stats_v1_dashboard_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/featured-loras": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Featured Loras
         * @description Get featured LoRAs for the dashboard.
         */
        get: operations["get_featured_loras_v1_dashboard_featured_loras_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/dashboard/activity-feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activity Feed
         * @description Get recent activity feed for the dashboard.
         */
        get: operations["get_activity_feed_v1_dashboard_activity_feed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/system/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get System Status
         * @description Return a snapshot of system status and telemetry data.
         */
        get: operations["get_system_status_v1_system_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health
         * @description Return a simple health status used by tests and readiness checks.
         */
        get: operations["health_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AdapterCreate
         * @description Input model for creating an adapter.
         */
        AdapterCreate: {
            /** Name */
            name: string;
            /** Version */
            version?: string | null;
            /** Canonical Version Name */
            canonical_version_name?: string | null;
            /** Description */
            description?: string | null;
            /** Author Username */
            author_username?: string | null;
            /**
             * Visibility
             * @default Public
             */
            visibility: string | null;
            /** Published At */
            published_at?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Trained Words */
            trained_words?: string[] | null;
            /** Triggers */
            triggers?: string[] | null;
            /** File Path */
            file_path: string;
            /**
             * Weight
             * @default 1
             */
            weight: number | null;
            /**
             * Active
             * @default false
             */
            active: boolean | null;
            /** Ordinal */
            ordinal?: number | null;
            /** Primary File Name */
            primary_file_name?: string | null;
            /** Primary File Size Kb */
            primary_file_size_kb?: number | null;
            /** Primary File Sha256 */
            primary_file_sha256?: string | null;
            /** Primary File Download Url */
            primary_file_download_url?: string | null;
            /** Primary File Local Path */
            primary_file_local_path?: string | null;
            /**
             * Supports Generation
             * @default false
             */
            supports_generation: boolean | null;
            /** Sd Version */
            sd_version?: string | null;
            /**
             * Nsfw Level
             * @default 0
             */
            nsfw_level: number | null;
            /** Activation Text */
            activation_text?: string | null;
            /** Stats */
            stats?: {
                [key: string]: unknown;
            } | null;
            /** Extra */
            extra?: {
                [key: string]: unknown;
            } | null;
            /** Json File Path */
            json_file_path?: string | null;
            /** Json File Mtime */
            json_file_mtime?: string | null;
            /** Json File Size */
            json_file_size?: number | null;
            /** Last Ingested At */
            last_ingested_at?: string | null;
        };
        /**
         * AdapterListResponse
         * @description Paginated list response for adapters.
         */
        AdapterListResponse: {
            /** Items */
            items: components["schemas"]["AdapterRead"][];
            /** Total */
            total: number;
            /** Filtered */
            filtered: number;
            /** Page */
            page: number;
            /** Pages */
            pages: number;
            /** Per Page */
            per_page: number;
        };
        /**
         * AdapterPatch
         * @description Partial update payload for adapter resources.
         */
        AdapterPatch: {
            /** Weight */
            weight?: number | null;
            /** Active */
            active?: boolean | null;
            /** Ordinal */
            ordinal?: number | null;
            /** Tags */
            tags?: string[] | null;
            /** Description */
            description?: string | null;
            /** Activation Text */
            activation_text?: string | null;
            /** Trained Words */
            trained_words?: string[] | null;
            /** Triggers */
            triggers?: string[] | null;
            /** Archetype */
            archetype?: string | null;
            /** Archetype Confidence */
            archetype_confidence?: number | null;
            /** Visibility */
            visibility?: string | null;
            /** Nsfw Level */
            nsfw_level?: number | null;
            /** Supports Generation */
            supports_generation?: boolean | null;
            /** Sd Version */
            sd_version?: string | null;
        };
        /**
         * AdapterRead
         * @description Public read model for adapters.
         */
        AdapterRead: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Version */
            version?: string | null;
            /** Canonical Version Name */
            canonical_version_name?: string | null;
            /** Description */
            description?: string | null;
            /** Author Username */
            author_username?: string | null;
            /**
             * Visibility
             * @default Public
             */
            visibility: string;
            /** Published At */
            published_at?: string | null;
            /** Tags */
            tags: string[];
            /** Trained Words */
            trained_words: string[];
            /** Triggers */
            triggers: string[];
            /** File Path */
            file_path: string;
            /** Weight */
            weight: number;
            /** Active */
            active: boolean;
            /** Ordinal */
            ordinal?: number | null;
            /** Archetype */
            archetype?: string | null;
            /** Archetype Confidence */
            archetype_confidence?: number | null;
            /** Primary File Name */
            primary_file_name?: string | null;
            /** Primary File Size Kb */
            primary_file_size_kb?: number | null;
            /** Primary File Sha256 */
            primary_file_sha256?: string | null;
            /** Primary File Download Url */
            primary_file_download_url?: string | null;
            /** Primary File Local Path */
            primary_file_local_path?: string | null;
            /**
             * Supports Generation
             * @default false
             */
            supports_generation: boolean;
            /** Sd Version */
            sd_version?: string | null;
            /**
             * Nsfw Level
             * @default 0
             */
            nsfw_level: number;
            /** Activation Text */
            activation_text?: string | null;
            /** Stats */
            stats?: {
                [key: string]: unknown;
            } | null;
            /** Extra */
            extra?: {
                [key: string]: unknown;
            } | null;
            /** Json File Path */
            json_file_path?: string | null;
            /** Json File Mtime */
            json_file_mtime?: string | null;
            /** Json File Size */
            json_file_size?: number | null;
            /** Last Ingested At */
            last_ingested_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * AdapterWrapper
         * @description Wrapper for a single Adapter in responses.
         */
        AdapterWrapper: {
            adapter: components["schemas"]["AdapterRead"];
        };
        /**
         * BackupCreateRequest
         * @description Request body for initiating a backup operation.
         */
        BackupCreateRequest: {
            /**
             * Backup Type
             * @default full
             */
            backup_type: string;
        };
        /**
         * BackupHistoryItem
         * @description Backup history item schema.
         */
        BackupHistoryItem: {
            /** Id */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Type */
            type: string;
            /** Size */
            size?: number | null;
            /** Status */
            status: string;
        };
        /**
         * BatchEmbeddingRequest
         * @description Request to compute embeddings for multiple LoRAs.
         */
        BatchEmbeddingRequest: {
            /** Adapter Ids */
            adapter_ids?: string[];
            /**
             * Force Recompute
             * @default false
             */
            force_recompute: boolean;
            /**
             * Compute All
             * @default false
             */
            compute_all: boolean;
            /**
             * Batch Size
             * @default 32
             */
            batch_size: number;
        };
        /**
         * BatchEmbeddingResponse
         * @description Response for batch embedding computation.
         */
        BatchEmbeddingResponse: {
            /** Processed Count */
            processed_count: number;
            /** Skipped Count */
            skipped_count: number;
            /** Error Count */
            error_count: number;
            /** Processing Time Seconds */
            processing_time_seconds: number;
            /** Errors */
            errors?: {
                [key: string]: string;
            }[];
            /**
             * Completed At
             * Format: date-time
             */
            completed_at: string;
        };
        /** Body_compose_and_generate_v1_generation_compose_and_generate_post */
        Body_compose_and_generate_v1_generation_compose_and_generate_post: {
            compose_request: components["schemas"]["ComposeRequest"];
            generation_params: components["schemas"]["SDNextGenerationParams"];
        };
        /** Body_import_data_v1_import_post */
        Body_import_data_v1_import_post: {
            /** Files */
            files: string[];
            /** Config */
            config: string;
        };
        /**
         * BulkActionRequest
         * @description Request body for bulk adapter actions.
         */
        BulkActionRequest: {
            /**
             * Action
             * @enum {string}
             */
            action: "activate" | "deactivate" | "delete";
            /** Lora Ids */
            lora_ids: string[];
        };
        /**
         * ComposeDelivery
         * @description Delivery configuration for compose requests.
         */
        ComposeDelivery: {
            /** Mode */
            mode: string;
            http?: components["schemas"]["ComposeDeliveryHTTP"] | null;
            cli?: components["schemas"]["ComposeDeliveryCLI"] | null;
            sdnext?: components["schemas"]["ComposeDeliverySDNext"] | null;
        };
        /**
         * ComposeDeliveryCLI
         * @description CLI-specific delivery parameters.
         */
        ComposeDeliveryCLI: {
            /** Template */
            template?: string | null;
        };
        /**
         * ComposeDeliveryHTTP
         * @description HTTP delivery configuration for compose requests.
         */
        ComposeDeliveryHTTP: {
            /** Host */
            host: string;
            /** Port */
            port?: number | null;
            /** Path */
            path?: string | null;
        };
        /**
         * ComposeDeliveryInfo
         * @description Information about an enqueued or scheduled delivery.
         */
        ComposeDeliveryInfo: {
            /** Id */
            id: string;
            /** Status */
            status: string;
        };
        /**
         * ComposeDeliverySDNext
         * @description SDNext delivery configuration for compose requests.
         */
        ComposeDeliverySDNext: {
            generation_params: components["schemas"]["SDNextGenerationParams"];
            /** @default immediate */
            mode: components["schemas"]["GenerationMode"];
            /**
             * Save Images
             * @default true
             */
            save_images: boolean;
            /** @default base64 */
            return_format: components["schemas"]["GenerationResultFormat"];
        };
        /**
         * ComposeRequest
         * @description Request body for composing a prompt.
         */
        ComposeRequest: {
            /** Prefix */
            prefix?: string | null;
            /** Suffix */
            suffix?: string | null;
            delivery?: components["schemas"]["ComposeDelivery"] | null;
        };
        /**
         * ComposeResponse
         * @description Response returned from the compose endpoint.
         */
        ComposeResponse: {
            /** Prompt */
            prompt: string;
            /** Tokens */
            tokens: string[];
            /** Warnings */
            warnings?: string[];
            delivery?: components["schemas"]["ComposeDeliveryInfo"] | null;
        };
        /**
         * DeliveryCreate
         * @description Request body for creating a delivery job.
         */
        DeliveryCreate: {
            /** Prompt */
            prompt: string;
            /** Mode */
            mode: string;
            /** Params */
            params?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * DeliveryCreateResponse
         * @description Response returned when a delivery is created.
         */
        DeliveryCreateResponse: {
            /** Delivery Id */
            delivery_id: string;
        };
        /**
         * DeliveryRead
         * @description Read model for a delivery job.
         */
        DeliveryRead: {
            /** Id */
            id: string;
            /** Prompt */
            prompt: string;
            /** Mode */
            mode: string;
            /** Params */
            params: {
                [key: string]: unknown;
            };
            /** Status */
            status: string;
            /** Result */
            result?: unknown | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Started At */
            started_at?: string | null;
            /** Finished At */
            finished_at?: string | null;
        };
        /**
         * DeliveryWrapper
         * @description Wrapper for delivery read responses.
         */
        DeliveryWrapper: {
            delivery: components["schemas"]["DeliveryRead"];
        };
        /**
         * EmbeddingStatus
         * @description Status of embedding computation for a LoRA.
         */
        EmbeddingStatus: {
            /** Adapter Id */
            adapter_id: string;
            /** Has Semantic Embedding */
            has_semantic_embedding: boolean;
            /** Has Artistic Embedding */
            has_artistic_embedding: boolean;
            /** Has Technical Embedding */
            has_technical_embedding: boolean;
            /** Has Extracted Features */
            has_extracted_features: boolean;
            /** Last Computed */
            last_computed?: string | null;
            /**
             * Needs Recomputation
             * @default false
             */
            needs_recomputation: boolean;
        };
        /**
         * ErrorAnalysisEntry
         * @description Error breakdown entry with counts and percentages.
         */
        ErrorAnalysisEntry: {
            /** Type */
            type: string;
            /** Count */
            count: number;
            /** Percentage */
            percentage: number;
            /** Description */
            description: string;
        };
        /**
         * ExportConfig
         * @description Export configuration schema shared across services.
         */
        ExportConfig: {
            /**
             * Loras
             * @default false
             */
            loras: boolean;
            /**
             * Lora Files
             * @default false
             */
            lora_files: boolean;
            /**
             * Lora Metadata
             * @default false
             */
            lora_metadata: boolean;
            /**
             * Lora Embeddings
             * @default false
             */
            lora_embeddings: boolean;
            /**
             * Generations
             * @default false
             */
            generations: boolean;
            /**
             * Generation Range
             * @default all
             */
            generation_range: string;
            /** Date From */
            date_from?: string | null;
            /** Date To */
            date_to?: string | null;
            /**
             * User Data
             * @default false
             */
            user_data: boolean;
            /**
             * System Config
             * @default false
             */
            system_config: boolean;
            /**
             * Analytics
             * @default false
             */
            analytics: boolean;
            /**
             * Format
             * @default zip
             */
            format: string;
            /**
             * Compression
             * @default balanced
             */
            compression: string;
            /**
             * Split Archives
             * @default false
             */
            split_archives: boolean;
            /**
             * Max Size Mb
             * @default 1024
             */
            max_size_mb: number;
            /**
             * Encrypt
             * @default false
             */
            encrypt: boolean;
            /** Password */
            password?: string | null;
        };
        /**
         * ExportEstimate
         * @description Export size and time estimates.
         */
        ExportEstimate: {
            /** Size */
            size: string;
            /** Time */
            time: string;
        };
        /**
         * GenerationBulkDeleteRequest
         * @description Request payload for bulk deletion of generation results.
         */
        GenerationBulkDeleteRequest: {
            /** Ids */
            ids?: (string | number)[];
        };
        /**
         * GenerationCancelResponse
         * @description Response returned when cancelling a generation job.
         */
        GenerationCancelResponse: {
            /**
             * Success
             * @default true
             */
            success: boolean;
            /** Status */
            status: string;
            /** Message */
            message?: string | null;
        };
        /**
         * GenerationExportRequest
         * @description Request payload for exporting generation results.
         */
        GenerationExportRequest: {
            /** Ids */
            ids?: (string | number)[];
            /**
             * Include Metadata
             * @default true
             */
            include_metadata: boolean;
        };
        /**
         * GenerationJobStatus
         * @description Summary of an active generation job for queue displays.
         */
        GenerationJobStatus: {
            /** Id */
            id: string;
            /** Jobid */
            jobId?: string | null;
            /** Prompt */
            prompt?: string | null;
            /** Status */
            status: string;
            /**
             * Progress
             * @default 0
             */
            progress: number;
            /** Message */
            message?: string | null;
            /** Error */
            error?: string | null;
            /** Params */
            params?: {
                [key: string]: unknown;
            };
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Starttime */
            startTime?: string | null;
            /** Finished At */
            finished_at?: string | null;
            /** Result */
            result?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * GenerationMode
         * @description Supported orchestration modes for generation requests.
         * @enum {string}
         */
        GenerationMode: "immediate" | "deferred";
        /**
         * GenerationResultFormat
         * @description Accepted result serialization strategies for generation responses.
         * @enum {string}
         */
        GenerationResultFormat: "base64" | "file_path" | "url";
        /**
         * GenerationResultSummary
         * @description Summary of a completed generation result.
         */
        GenerationResultSummary: {
            /** Id */
            id: string;
            /** Job Id */
            job_id: string;
            /** Prompt */
            prompt?: string | null;
            /** Negative Prompt */
            negative_prompt?: string | null;
            /** Status */
            status: string;
            /** Image Url */
            image_url?: string | null;
            /** Thumbnail Url */
            thumbnail_url?: string | null;
            /** Width */
            width?: number | null;
            /** Height */
            height?: number | null;
            /** Steps */
            steps?: number | null;
            /** Cfg Scale */
            cfg_scale?: number | null;
            /** Seed */
            seed?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Finished At */
            finished_at?: string | null;
            /** Generation Info */
            generation_info?: {
                [key: string]: unknown;
            } | null;
            /** Rating */
            rating?: number | null;
            /**
             * Is Favorite
             * @default false
             */
            is_favorite: boolean;
            /** Rating Updated At */
            rating_updated_at?: string | null;
            /** Favorite Updated At */
            favorite_updated_at?: string | null;
        };
        /**
         * GenerationVolumePoint
         * @description Time-series point representing generation volume.
         */
        GenerationVolumePoint: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Count */
            count: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * IndexRebuildResponse
         * @description Response returned when rebuilding the similarity index.
         */
        IndexRebuildResponse: {
            /**
             * Status
             * @enum {string}
             */
            status: "rebuilt" | "skipped" | "empty";
            /** Indexed Items */
            indexed_items: number;
            /** Index Path */
            index_path: string;
            /**
             * Index Size Bytes
             * @default 0
             */
            index_size_bytes: number;
            /** Processing Time Seconds */
            processing_time_seconds: number;
            /**
             * Rebuilt At
             * Format: date-time
             */
            rebuilt_at: string;
            /**
             * Skipped
             * @default false
             */
            skipped: boolean;
            /** Skipped Reason */
            skipped_reason?: string | null;
        };
        /**
         * LoraUsageSlice
         * @description Breakdown entry describing LoRA usage distribution.
         */
        LoraUsageSlice: {
            /** Name */
            name: string;
            /** Usage Count */
            usage_count: number;
        };
        /**
         * PerformanceAnalyticsCharts
         * @description Collection of chart data used by the analytics dashboard.
         */
        PerformanceAnalyticsCharts: {
            /** Generation Volume */
            generation_volume?: components["schemas"]["GenerationVolumePoint"][];
            /** Performance */
            performance?: components["schemas"]["PerformanceSeriesPoint"][];
            /** Lora Usage */
            lora_usage?: components["schemas"]["LoraUsageSlice"][];
            /** Resource Usage */
            resource_usage?: components["schemas"]["ResourceUsagePoint"][];
        };
        /**
         * PerformanceAnalyticsSummary
         * @description Aggregated analytics payload returned by the API.
         */
        PerformanceAnalyticsSummary: {
            /**
             * Time Range
             * @enum {string}
             */
            time_range: "24h" | "7d" | "30d";
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
            kpis?: components["schemas"]["PerformanceKpiSummary"];
            chart_data?: components["schemas"]["PerformanceAnalyticsCharts"];
            /** Error Breakdown */
            error_breakdown?: components["schemas"]["ErrorAnalysisEntry"][];
            /** Performance Insights */
            performance_insights?: components["schemas"]["PerformanceInsightEntry"][];
        };
        /**
         * PerformanceInsightEntry
         * @description Actionable insight generated from analytics data.
         */
        PerformanceInsightEntry: {
            /** Id */
            id: string;
            /** Title */
            title: string;
            /** Description */
            description: string;
            /** Severity */
            severity: string;
            /** Recommendation */
            recommendation?: string | null;
        };
        /**
         * PerformanceKpiSummary
         * @description Key performance indicators for generation analytics.
         */
        PerformanceKpiSummary: {
            /**
             * Total Generations
             * @default 0
             */
            total_generations: number;
            /**
             * Generation Growth
             * @default 0
             */
            generation_growth: number;
            /**
             * Avg Generation Time
             * @default 0
             */
            avg_generation_time: number;
            /**
             * Time Improvement
             * @default 0
             */
            time_improvement: number;
            /**
             * Success Rate
             * @default 0
             */
            success_rate: number;
            /**
             * Total Failed
             * @default 0
             */
            total_failed: number;
            /**
             * Active Loras
             * @default 0
             */
            active_loras: number;
            /**
             * Total Loras
             * @default 0
             */
            total_loras: number;
        };
        /**
         * PerformanceSeriesPoint
         * @description Time-series point representing performance metrics.
         */
        PerformanceSeriesPoint: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Avg Time */
            avg_time: number;
            /** Success Rate */
            success_rate: number;
        };
        /**
         * PromptRecommendationRequest
         * @description Request for prompt-based recommendations.
         */
        PromptRecommendationRequest: {
            /** Prompt */
            prompt: string;
            /** Active Loras */
            active_loras?: string[];
            /**
             * Limit
             * @default 10
             */
            limit: number;
            /**
             * Include Explanations
             * @default true
             */
            include_explanations: boolean;
            /** Style Preference */
            style_preference?: string | null;
            /** Technical Requirements */
            technical_requirements?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * RecommendationFeedbackRead
         * @description Database-backed representation of recorded recommendation feedback.
         */
        RecommendationFeedbackRead: {
            /** Id */
            id: string;
            /** Session Id */
            session_id: string;
            /** Recommended Lora Id */
            recommended_lora_id: string;
            /** Feedback Type */
            feedback_type: string;
            /** Feedback Reason */
            feedback_reason?: string | null;
            /** Implicit Signal */
            implicit_signal: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * RecommendationItem
         * @description Individual recommendation item.
         */
        RecommendationItem: {
            /** Lora Id */
            lora_id: string;
            /** Lora Name */
            lora_name: string;
            /** Lora Description */
            lora_description?: string | null;
            /** Similarity Score */
            similarity_score: number;
            /** Final Score */
            final_score: number;
            /** Explanation */
            explanation: string;
            /** Semantic Similarity */
            semantic_similarity?: number | null;
            /** Artistic Similarity */
            artistic_similarity?: number | null;
            /** Technical Similarity */
            technical_similarity?: number | null;
            /** Quality Boost */
            quality_boost?: number | null;
            /** Popularity Boost */
            popularity_boost?: number | null;
            /** Recency Boost */
            recency_boost?: number | null;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * RecommendationResponse
         * @description Response containing recommendations.
         */
        RecommendationResponse: {
            /** Target Lora Id */
            target_lora_id?: string | null;
            /** Prompt */
            prompt?: string | null;
            /** Recommendations */
            recommendations: components["schemas"]["RecommendationItem"][];
            /** Total Candidates */
            total_candidates: number;
            /** Processing Time Ms */
            processing_time_ms: number;
            /** Recommendation Config */
            recommendation_config: {
                [key: string]: unknown;
            };
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
        };
        /**
         * RecommendationStats
         * @description Statistics about the recommendation system.
         */
        RecommendationStats: {
            /** Total Loras */
            total_loras: number;
            /** Loras With Embeddings */
            loras_with_embeddings: number;
            /** Embedding Coverage */
            embedding_coverage: number;
            /** Avg Recommendation Time Ms */
            avg_recommendation_time_ms: number;
            /** Cache Hit Rate */
            cache_hit_rate: number;
            /** Total Sessions */
            total_sessions: number;
            /** User Preferences Count */
            user_preferences_count: number;
            /** Feedback Count */
            feedback_count: number;
            /** Model Memory Usage Gb */
            model_memory_usage_gb: number;
            /**
             * Last Index Update
             * Format: date-time
             */
            last_index_update: string;
        };
        /**
         * ResourceUsagePoint
         * @description Time-series point representing system resource utilisation.
         */
        ResourceUsagePoint: {
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Cpu Percent */
            cpu_percent: number;
            /** Memory Percent */
            memory_percent: number;
            /** Gpu Percent */
            gpu_percent: number;
        };
        /**
         * SDNextGenerationParams
         * @description Parameters for SDNext text-to-image generation.
         */
        SDNextGenerationParams: {
            /** Prompt */
            prompt: string;
            /** Negative Prompt */
            negative_prompt?: string | null;
            /**
             * Steps
             * @default 20
             */
            steps: number;
            /**
             * Sampler Name
             * @default DPM++ 2M
             */
            sampler_name: string;
            /**
             * Cfg Scale
             * @default 7
             */
            cfg_scale: number;
            /**
             * Width
             * @default 512
             */
            width: number;
            /**
             * Height
             * @default 512
             */
            height: number;
            /**
             * Seed
             * @default -1
             */
            seed: number;
            /**
             * Batch Size
             * @default 1
             */
            batch_size: number;
            /**
             * N Iter
             * @default 1
             */
            n_iter: number;
            /** Denoising Strength */
            denoising_strength?: number | null;
        };
        /**
         * SDNextGenerationResult
         * @description Result of SDNext generation operation.
         */
        SDNextGenerationResult: {
            /** Job Id */
            job_id: string;
            /** Status */
            status: string;
            /** Images */
            images?: string[] | null;
            /** Progress */
            progress?: number | null;
            /** Error Message */
            error_message?: string | null;
            /** Generation Info */
            generation_info?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * UserFeedbackRequest
         * @description User feedback on recommendations.
         */
        UserFeedbackRequest: {
            /** Session Id */
            session_id: string;
            /** Recommended Lora Id */
            recommended_lora_id: string;
            /** Feedback Type */
            feedback_type: string;
            /** Feedback Reason */
            feedback_reason?: string | null;
            /**
             * Implicit Signal
             * @default false
             */
            implicit_signal: boolean;
        };
        /**
         * UserPreferenceRead
         * @description Persisted user preference representation.
         */
        UserPreferenceRead: {
            /** Id */
            id: string;
            /** Preference Type */
            preference_type: string;
            /** Preference Value */
            preference_value: string;
            /** Confidence */
            confidence: number;
            /** Learned From */
            learned_from: string;
            /** Evidence Count */
            evidence_count: number;
            /**
             * Last Evidence At
             * Format: date-time
             */
            last_evidence_at: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UserPreferenceRequest
         * @description Request to update user preferences.
         */
        UserPreferenceRequest: {
            /** Preference Type */
            preference_type: string;
            /** Preference Value */
            preference_value: string;
            /** Confidence */
            confidence: number;
            /**
             * Explicit
             * @default true
             */
            explicit: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_adapters_v1_adapters_get: {
        parameters: {
            query?: {
                search?: string;
                active_only?: boolean;
                tags?: string;
                sort?: string;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_adapter_v1_adapters_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdapterCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_adapter_tags_v1_adapters_tags_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    bulk_adapter_action_v1_adapters_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkActionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_adapter_v1_adapters__adapter_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_adapter_v1_adapters__adapter_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_adapter_v1_adapters__adapter_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adapter_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdapterPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_adapter_v1_adapters__adapter_id__activate_post: {
        parameters: {
            query?: {
                ordinal?: number;
            };
            header?: never;
            path: {
                adapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_adapter_v1_adapters__adapter_id__deactivate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                adapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdapterWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_analytics_summary_v1_analytics_summary_get: {
        parameters: {
            query?: {
                time_range?: "24h" | "7d" | "30d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceAnalyticsSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_generation_stats_v1_analytics_stats_get: {
        parameters: {
            query?: {
                time_range?: "24h" | "7d" | "30d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceKpiSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_error_breakdown_v1_analytics_errors_get: {
        parameters: {
            query?: {
                time_range?: "24h" | "7d" | "30d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorAnalysisEntry"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_time_series_metrics_v1_analytics_timeseries_get: {
        parameters: {
            query?: {
                time_range?: "24h" | "7d" | "30d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceAnalyticsCharts"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_performance_insights_v1_analytics_insights_get: {
        parameters: {
            query?: {
                time_range?: "24h" | "7d" | "30d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceInsightEntry"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compose_v1_compose_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComposeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComposeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_delivery_v1_deliveries_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeliveryCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_delivery_v1_deliveries__delivery_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                delivery_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_generation_backends_v1_generation_backends_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: boolean;
                    };
                };
            };
        };
    };
    generate_image_v1_generation_generate_post: {
        parameters: {
            query?: {
                backend?: string;
                mode?: components["schemas"]["GenerationMode"];
                save_images?: boolean;
                return_format?: components["schemas"]["GenerationResultFormat"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SDNextGenerationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SDNextGenerationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_generation_progress_v1_generation_progress__job_id__get: {
        parameters: {
            query?: {
                backend?: string;
            };
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SDNextGenerationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compose_and_generate_v1_generation_compose_and_generate_post: {
        parameters: {
            query?: {
                backend?: string;
                mode?: components["schemas"]["GenerationMode"];
                save_images?: boolean;
                return_format?: components["schemas"]["GenerationResultFormat"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_compose_and_generate_v1_generation_compose_and_generate_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SDNextGenerationResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_generation_job_v1_generation_queue_generation_post: {
        parameters: {
            query?: {
                backend?: string;
                mode?: string;
                save_images?: boolean;
                return_format?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SDNextGenerationParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_active_generation_jobs_v1_generation_jobs_active_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerationJobStatus"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_generation_job_v1_generation_jobs__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeliveryWrapper"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_generation_job_v1_generation_jobs__job_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerationCancelResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_generation_results_v1_generation_results_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerationResultSummary"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_generation_results_v1_generation_results_bulk_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenerationBulkDeleteRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_generation_result_v1_generation_results__result_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                result_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_generation_result_v1_generation_results__result_id__download_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                result_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_generation_results_v1_generation_results_export_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenerationExportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_similar_loras_v1_recommendations_similar__lora_id__get: {
        parameters: {
            query?: {
                limit?: number;
                similarity_threshold?: number;
                diversify_results?: boolean;
            };
            header?: never;
            path: {
                lora_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: number;
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recommendations_for_prompt_v1_recommendations_for_prompt_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptRecommendationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recommendation_stats_v1_recommendations_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationStats"];
                };
            };
        };
    };
    compute_embeddings_v1_recommendations_embeddings_compute_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BatchEmbeddingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchEmbeddingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_embedding_status_v1_recommendations_embeddings__lora_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                lora_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbeddingStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compute_single_embedding_v1_recommendations_embeddings__lora_id__compute_post: {
        parameters: {
            query?: {
                force_recompute?: boolean;
            };
            header?: never;
            path: {
                lora_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    submit_recommendation_feedback_v1_recommendations_feedback_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserFeedbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendationFeedbackRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_preferences_v1_recommendations_preferences_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferenceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferenceRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rebuild_similarity_index_v1_recommendations_index_rebuild_post: {
        parameters: {
            query?: {
                force?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IndexRebuildResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recommendation_health_v1_recommendations_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    estimate_export_v1_export_estimate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExportEstimate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_data_v1_export_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    import_data_v1_import_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_import_data_v1_import_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_backup_history_v1_backups_history_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupHistoryItem"][];
                };
            };
        };
    };
    create_backup_v1_backup_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BackupCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_backup_v1_backups__backup_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                backup_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dashboard_stats_v1_dashboard_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_featured_loras_v1_dashboard_featured_loras_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_activity_feed_v1_dashboard_activity_feed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_system_status_v1_system_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    health_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}

